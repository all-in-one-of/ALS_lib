// Magic: c372ade8
// Automatically generated PSI dialog (PSI version 16.0.557)
// Fri Mar 31 12:38:16 2017


f_tmp = FLOAT_FIELD;	// dialog.top.ui

mode.gad = 
{
    LAYOUT(horizontal) JUSTIFY(left, center) HSTRETCH

    PARM_LABEL_SIMPLE("Wrangle Mode", "mode") WIDTH(1.5);
    { WIDTH(0.09) }

    mode.menu;

    { HSTRETCH }

}
type.gad = NULL { }

group.gad = ROW
{
    HSTRETCH JUSTIFY(left, center)

    group.label = PARM_LABEL("Group", "group") WIDTH(1.5);
    PARM_FIELD(string, "group") VALUE(group.val) 
	LABELREF(group.label) HSTRETCH;

    group.menu SIZE(0.26, 0.26) LOOK(menuiconbutton);

    ACTION_ICONBUTTON "BUTTONS_reselect" VALUE(group.script_action)
	HELP("Select geometry from an available viewport.")
	UI_FLAT_ICON_BTN_SIZE_SMALL LOOKFLAT;

}

group2.gad = ROW
{
    HSTRETCH JUSTIFY(left, center)

    group2.label = PARM_LABEL("Group", "group2") WIDTH(1.5);
    PARM_FIELD(string, "group2") VALUE(group2.val) 
	LABELREF(group2.label) HSTRETCH;

    group2.menu SIZE(0.26, 0.26) LOOK(menuiconbutton);

    ACTION_ICONBUTTON "BUTTONS_reselect" VALUE(group2.script_action)
	HELP("Select geometry from an available viewport.")
	UI_FLAT_ICON_BTN_SIZE_SMALL LOOKFLAT;

}

grouptype.gad = 
{
    LAYOUT(horizontal) JUSTIFY(left, center) HSTRETCH

    PARM_LABEL_SIMPLE("Group Type", "grouptype") WIDTH(1.5);
    { WIDTH(0.09) }

    grouptype.menu;

    { HSTRETCH }

}

class.gad = 
{
    LAYOUT(horizontal) JUSTIFY(left, center) HSTRETCH

    PARM_LABEL_SIMPLE("Run Over", "class") WIDTH(1.5);
    { WIDTH(0.09) }

    class.menu;

    { HSTRETCH }

}

vex_numcount.gad = 
{
 LAYOUT(horizontal) HSTRETCH

 vex_numcount.label = PARM_LABEL("Number Count", "vex_numcount") WIDTH(1.5);
 PARM(integer, 1, "vex_numcount", none, none) RANGE(0,10000)
	LOCK_RANGE_MIN LABELREF(vex_numcount.label) HSTRETCH;

}

vex_threadjobsize.gad = 
{
 LAYOUT(horizontal) HSTRETCH

 vex_threadjobsize.label = PARM_LABEL("Thread Job Size", "vex_threadjobsize") WIDTH(1.5);
 PARM(integer, 1, "vex_threadjobsize", none, none) RANGE(1,10000)
	LOCK_RANGE_MIN LABELREF(vex_threadjobsize.label) HSTRETCH;

}
replace.row.join =		
{
  LAYOUT(horizontal) HSTRETCH JUSTIFY(left, center)

replace.gad = ROW
{
    HSTRETCH JUSTIFY(left, center)

    replace.label = PARM_LABEL("Replace With", "replace") WIDTH(1.5);
    PARM_FIELD(string, "replace") VALUE(replace.val) 
	LABELREF(replace.label) HSTRETCH;

    replace.menu SIZE(0.26, 0.26) LOOK(menuiconbutton);

}

menutype.gad = 
{
    LAYOUT(horizontal) JUSTIFY(left, center) 

    PARM_LABEL_SIMPLE("        Snippet Menu", "menutype") ;
    { WIDTH(0.09) }

    menutype.menu;

    {  }

    ACTION_ICONBUTTON "$JOB/icons/standart/BUTTONS/delete.svg" VALUE(menutype.script_action)
	HELP("Clear Snippet")
	UI_FLAT_ICON_BTN_SIZE_SMALL LOOKFLAT;

}
}	// Template join.bot


snippet1.gad = ROW
{

    HSTRETCH JUSTIFY(left, top)

    snippet1.label = PARM_LABEL("VEXpression", "snippet1") WIDTH(1.5);

    MULTILINE_PARM_FIELD ("snippet1") 
    	LABELREF(snippet1.label) 
    	VALUE(snippet1.val) 
    	SYNTAX("VEX") 
    	LINES(8,30) 
    	HSTRETCH;

    snippet1.menu SIZE(0.26, 0.26) LOOK(menuiconbutton);

    ACTION_ICONBUTTON "BUTTONS_create_parm_from_ch" VALUE(snippet1.script_action)
	HELP("Creates spare parameters for each unique call of ch() ")
	UI_FLAT_ICON_BTN_SIZE_SMALL LOOKFLAT;

}
exportlist.row.join =		
{
  LAYOUT(horizontal) HSTRETCH JUSTIFY(left, center)

exportlist.gad = ROW
{
    HSTRETCH JUSTIFY(left, center)

    exportlist.label = PARM_LABEL("Attributes to Create", "exportlist") WIDTH(1.5);
    PARM_FIELD(string, "exportlist") VALUE(exportlist.val) 
	LABELREF(exportlist.label) HSTRETCH;

}

vex_strict.gad = ROW
{
    

    {  }
    { WIDTH(0.08) }

    PARM_BUTTON("vex_strict", "Enforce Prototypes") toggle VALUE(vex_strict.val);

    {  }

}
}	// Template join.bot


snippet2.gad = ROW
{

    HSTRETCH JUSTIFY(left, top)

    snippet2.label = PARM_LABEL("VEXpression", "snippet2") WIDTH(1.5);

    MULTILINE_PARM_FIELD ("snippet2") 
    	LABELREF(snippet2.label) 
    	VALUE(snippet2.val) 
    	SYNTAX("VEX") 
    	LINES(8,30) 
    	HSTRETCH;

    snippet2.menu SIZE(0.26, 0.26) LOOK(menuiconbutton);

    ACTION_ICONBUTTON "BUTTONS_create_parm_from_ch" VALUE(snippet2.script_action)
	HELP("Creates spare parameters for each unique call of ch() ")
	UI_FLAT_ICON_BTN_SIZE_SMALL LOOKFLAT;

}

exportlist2.gad = ROW
{
    HSTRETCH JUSTIFY(left, center)

    exportlist2.label = PARM_LABEL("Volumes to Write to", "exportlist2") WIDTH(1.5);
    PARM_FIELD(string, "exportlist2") VALUE(exportlist2.val) 
	LABELREF(exportlist2.label) HSTRETCH;

}

snippet3.gad = ROW
{

    HSTRETCH JUSTIFY(left, top)

    snippet3.label = PARM_LABEL("VEXpression", "snippet3") WIDTH(1.5);

    MULTILINE_PARM_FIELD ("snippet3") 
    	LABELREF(snippet3.label) 
    	VALUE(snippet3.val) 
    	SYNTAX("vex") 
    	LINES(8,30) 
    	HSTRETCH;

    snippet3.menu SIZE(0.26, 0.26) LOOK(menuiconbutton);

    ACTION_ICONBUTTON "BUTTONS_create_parm_from_ch" VALUE(snippet3.script_action)
	HELP("Creates spare parameters for each unique call of ch() ")
	UI_FLAT_ICON_BTN_SIZE_SMALL LOOKFLAT;

}

attribs.gad = ROW
{
    HSTRETCH JUSTIFY(left, center)

    attribs.label = PARM_LABEL("Attributes to Transform", "attribs") WIDTH(1.5);
    PARM_FIELD(string, "attribs") VALUE(attribs.val) 
	LABELREF(attribs.label) HSTRETCH;

    attribs.menu SIZE(0.26, 0.26) LOOK(menuiconbutton);

}

clearchans.gad = ROW
{
    HSTRETCH

    { WIDTH(1.5) }
    { WIDTH(0.08) }

    PARM_BUTTON("clearchans", "Destroy Unused Cannels") toggle VALUE(clearchans.val);

    { HSTRETCH }

}

updateaffectednmls.gad = ROW
{
    HSTRETCH

    { WIDTH(1.5) }
    { WIDTH(0.08) }

    PARM_BUTTON("updateaffectednmls", "Recompute Affected Normals") toggle VALUE(updateaffectednmls.val);

    { HSTRETCH }

}

vlength.gad = ROW
{
    HSTRETCH

    { WIDTH(1.5) }
    { WIDTH(0.08) }

    PARM_BUTTON("vlength", "Preserve Normal Length") toggle VALUE(vlength.val);

    { HSTRETCH }

}

derivative_method.gad = 
{
    LAYOUT(horizontal) JUSTIFY(left, center) HSTRETCH

    PARM_LABEL_SIMPLE("Method", "derivative_method") WIDTH(1.5);
    { WIDTH(0.09) }

    derivative_method.menu;

    { HSTRETCH }

}

derivative_stepsize.gad = 
{
 LAYOUT(horizontal) HSTRETCH

 derivative_stepsize.label = PARM_LABEL("Step Size", "derivative_stepsize") WIDTH(1.5);
 PARM(float, 1, "derivative_stepsize", none, none) RANGE(0,1)
	LOCK_RANGE_MIN LABELREF(derivative_stepsize.label) HSTRETCH;

}

derivative_rigidprojection.gad = ROW
{
    HSTRETCH

    { WIDTH(1.5) }
    { WIDTH(0.08) }

    PARM_BUTTON("derivative_rigidprojection", "Rigid Projection") toggle VALUE(derivative_rigidprojection.val);

    { HSTRETCH }

}

derivative_preventinversion.gad = ROW
{
    HSTRETCH

    { WIDTH(1.5) }
    { WIDTH(0.08) }

    PARM_BUTTON("derivative_preventinversion", "Prevent Inversion") toggle VALUE(derivative_preventinversion.val);

    { HSTRETCH }

}

autobind.gad = ROW
{
    HSTRETCH

    { WIDTH(1.5) }
    { WIDTH(0.08) }

    PARM_BUTTON("autobind", "Autobind by Name") toggle VALUE(autobind.val);

    { HSTRETCH }

}

bindings.parm =
{
    LAYOUT(horizontal) SPACING(0.02) HSTRETCH JUSTIFY(left, center)

    PARM_LABEL_SIMPLE("Number of Bindings", "bindings") WIDTH(1.5);
    { WIDTH(0.08) }

    ROW
    {
	HSTRETCH(0.5) JUSTIFY(left, center)  VALUE(bindings.val)

        bindings.field = PARM_FIELD (integer, "bindings")
				VALUE(bindings.val) HSTRETCH(0.5)
				 PREF_WIDTH(0.5);

        ROW
        {
	     LOOK(lightline) VMARGIN(1p)

   	     INCREMENT_ICONBUTTON VALUE(bindings.more.val)	
	    	HELP("Add Another Instance") SIZE(0.2, 0.24);
	     DECREMENT_ICONBUTTON VALUE(bindings.less.val)	
	        HELP("Remove Last Instance") SIZE(0.2, 0.24);

	}

	ACTION_BUTTON "Clear" VALUE(bindings.clear.val);
    }

    { HSTRETCH }
}

bindings.multilist = 
{
    LAYOUT(vertical) STRETCH MARGIN(0.05)
}

bindings.gad =
{
    LAYOUT(vertical) STRETCH SPACING(0.02)

    bindings.parm;
    bindings.multilist;
}

groupautobind.gad = ROW
{
    HSTRETCH

    { WIDTH(1.5) }
    { WIDTH(0.08) }

    PARM_BUTTON("groupautobind", "Autobind Groups by Name") toggle VALUE(groupautobind.val);

    { HSTRETCH }

}

groupbindings.parm =
{
    LAYOUT(horizontal) SPACING(0.02) HSTRETCH JUSTIFY(left, center)

    PARM_LABEL_SIMPLE("Group Bindings", "groupbindings") WIDTH(1.5);
    { WIDTH(0.08) }

    ROW
    {
	HSTRETCH(0.5) JUSTIFY(left, center)  VALUE(groupbindings.val)

        groupbindings.field = PARM_FIELD (integer, "groupbindings")
				VALUE(groupbindings.val) HSTRETCH(0.5)
				 PREF_WIDTH(0.5);

        ROW
        {
	     LOOK(lightline) VMARGIN(1p)

   	     INCREMENT_ICONBUTTON VALUE(groupbindings.more.val)	
	    	HELP("Add Another Instance") SIZE(0.2, 0.24);
	     DECREMENT_ICONBUTTON VALUE(groupbindings.less.val)	
	        HELP("Remove Last Instance") SIZE(0.2, 0.24);

	}

	ACTION_BUTTON "Clear" VALUE(groupbindings.clear.val);
    }

    { HSTRETCH }
}

groupbindings.multilist = 
{
    LAYOUT(vertical) STRETCH MARGIN(0.05)
}

groupbindings.gad =
{
    LAYOUT(vertical) STRETCH SPACING(0.02)

    groupbindings.parm;
    groupbindings.multilist;
}

vex_cwdpath.gad = 
{
 LAYOUT(horizontal) HSTRETCH JUSTIFY(left,center)

 vex_cwdpath.label = PARM_LABEL("Evaluation Node Path", "vex_cwdpath") WIDTH(1.5);
 PARM_FIELD(pathstring, "vex_cwdpath") VALUE(vex_cwdpath.val) 
	LABELREF(vex_cwdpath.label) HSTRETCH;

 ACTION_ICONBUTTON "BUTTONS_jump" VALUE(vex_cwdpath.jump)
    HELP("Jump to operator\nCtrl+LMB: Open parameters popup dialog")
    UI_FLAT_ICON_BTN_SIZE_SMALL LOOKFLAT;

 ACTION_ICONBUTTON "BUTTONS_chooser_node" VALUE(vex_cwdpath.plus)
    HELP("Open floating operator chooser") UI_FLAT_ICON_BTN_SIZE_SMALL 
    LOOKFLAT;

}

vex_outputmask.gad = ROW
{
    HSTRETCH JUSTIFY(left, center)

    vex_outputmask.label = PARM_LABEL("Export Parameters", "vex_outputmask") WIDTH(1.5);
    PARM_FIELD(string, "vex_outputmask") VALUE(vex_outputmask.val) 
	LABELREF(vex_outputmask.label) HSTRETCH;

}

vex_updatenmls.gad = ROW
{
    HSTRETCH

    { WIDTH(1.5) }
    { WIDTH(0.08) }

    PARM_BUTTON("vex_updatenmls", "Update Normals If Displaced") toggle VALUE(vex_updatenmls.val);

    { HSTRETCH }

}

vex_matchattrib.gad = ROW
{
    HSTRETCH JUSTIFY(left, center)

    vex_matchattrib.label = PARM_LABEL("Attribute to Match", "vex_matchattrib") WIDTH(1.5);
    PARM_FIELD(string, "vex_matchattrib") VALUE(vex_matchattrib.val) 
	LABELREF(vex_matchattrib.label) HSTRETCH;

}

sepparm.gad = 

{
    LAYOUT(vertical) HSTRETCH 

    { HEIGHT(0.1) }
    SEPARATOR; 
    { HEIGHT(0.1) }
}

vex_geometrygenerator.gad = ROW
{
    HSTRETCH

    { WIDTH(1.5) }
    { WIDTH(0.08) }

    PARM_BUTTON("vex_geometrygenerator", "Only Output Created Geometry") toggle VALUE(vex_geometrygenerator.val);

    { HSTRETCH }

}

vdb_signedflood.gad = ROW
{
    HSTRETCH

    { WIDTH(1.5) }
    { WIDTH(0.08) }

    PARM_BUTTON("vdb_signedflood", "Signed-Flood Fill Output SDF VDBs") toggle VALUE(vdb_signedflood.val);

    { HSTRETCH }

}

exportlist3.gad = ROW
{
    HSTRETCH JUSTIFY(left, center)

    exportlist3.label = PARM_LABEL("Attributes to Create", "exportlist3") WIDTH(1.5);
    PARM_FIELD(string, "exportlist3") VALUE(exportlist3.val) 
	LABELREF(exportlist3.label) HSTRETCH;

}

vex_cwdpath2.gad = 
{
 LAYOUT(horizontal) HSTRETCH JUSTIFY(left,center)

 vex_cwdpath2.label = PARM_LABEL("Evaluation Node Path", "vex_cwdpath2") WIDTH(1.5);
 PARM_FIELD(pathstring, "vex_cwdpath2") VALUE(vex_cwdpath2.val) 
	LABELREF(vex_cwdpath2.label) HSTRETCH;

 ACTION_ICONBUTTON "BUTTONS_jump" VALUE(vex_cwdpath2.jump)
    HELP("Jump to operator\nCtrl+LMB: Open parameters popup dialog")
    UI_FLAT_ICON_BTN_SIZE_SMALL LOOKFLAT;

 ACTION_ICONBUTTON "BUTTONS_chooser_node" VALUE(vex_cwdpath2.plus)
    HELP("Open floating operator chooser") UI_FLAT_ICON_BTN_SIZE_SMALL 
    LOOKFLAT;

}

vex_outputmask2.gad = ROW
{
    HSTRETCH JUSTIFY(left, center)

    vex_outputmask2.label = PARM_LABEL("Export Parameters", "vex_outputmask2") WIDTH(1.5);
    PARM_FIELD(string, "vex_outputmask2") VALUE(vex_outputmask2.val) 
	LABELREF(vex_outputmask2.label) HSTRETCH;

}
file.row.join =		
{
  LAYOUT(horizontal) HSTRETCH JUSTIFY(left, center)

file.gad = 
{
 LAYOUT(horizontal) HSTRETCH JUSTIFY(left, center)

 file.label = PARM_LABEL("Vex File", "file") WIDTH(1.5);

 PARM_FIELD (pathstring, "file") LABELREF(file.label)
	VALUE(file.val) HSTRETCH;

    file.menu SIZE(0.26, 0.26) LOOK(menuiconbutton);

 ACTION_ICONBUTTON "BUTTONS_chooser_file" VALUE(file.plus) LOOKFLAT
    HELP("Open floating file chooser") UI_FLAT_ICON_BTN_SIZE_SMALL;

}

save.gad = ROW
{
    JUSTIFY(left, center)

    PARM_BUTTON("save", "Save")
	push VALUE(save.val);

}

load.gad = ROW
{
    JUSTIFY(left, center)

    PARM_BUTTON("load", "Load")
	push VALUE(load.val);

}

edit.gad = ROW
{
    JUSTIFY(left, center)

    PARM_BUTTON("edit", "Editor")
	push VALUE(edit.val);

}

browse.gad = ROW
{
    JUSTIFY(left, center)

    {  }
    { WIDTH(0.1) }

    PARM_BUTTON("browse", "Browse")
	push VALUE(browse.val);

}
}	// Template join.bot


version.gad = 
{
 LAYOUT(horizontal) HSTRETCH

 version.label = PARM_LABEL("Version", "version") WIDTH(1.5);
 PARM(integer, 1, "version", none, none) RANGE(1,10)
	LOCK_RANGE_MIN LABELREF(version.label) HSTRETCH;

}

folder1.gad = 
GROUP simple "Attribute Bindings"
{ 
    VALUE(folder1.gad.val) LAYOUT(vertical) HSTRETCH 
	    autobind.gad;		
	    bindings.gad;		
	    groupautobind.gad;		
	    groupbindings.gad;		
} 

folder0.gad = 
{
    LAYOUT(vertical) HSTRETCH

    TABDIALOG
    { 
	VALUE(folder0.gad.val) STRETCH(1,0)

	TAB "Code"
	{
	    LAYOUT(vertical) STRETCH

	    MARGIN(0.05) SPACING(2p)
	    mode.gad;		
	    type.gad;		
	    group.gad;		
	    group2.gad;		
	    grouptype.gad;		
	    class.gad;		
	    vex_numcount.gad;		
	    vex_threadjobsize.gad;		
	    replace.row.join;		
	    snippet1.gad;		
	    exportlist.row.join;		
	    snippet2.gad;		
	    exportlist2.gad;		
	    snippet3.gad;		
	    attribs.gad;		
	    clearchans.gad;		
	    updateaffectednmls.gad;		
	    vlength.gad;		

	    { STRETCH(1,1) LOOK(plain) }
	}

	TAB "Derivatives"
	{
	    LAYOUT(vertical) STRETCH

	    MARGIN(0.05) SPACING(2p)
	    derivative_method.gad;		
	    derivative_stepsize.gad;		
	    derivative_rigidprojection.gad;		
	    derivative_preventinversion.gad;		

	    { STRETCH(1,1) LOOK(plain) }
	}

	TAB "Bindings"
	{
	    LAYOUT(vertical) STRETCH

	    MARGIN(0.05) SPACING(2p)
	    folder1.gad;		
	    vex_cwdpath.gad;		
	    vex_outputmask.gad;		
	    vex_updatenmls.gad;		
	    vex_matchattrib.gad;		
	    sepparm.gad;		
	    vex_geometrygenerator.gad;		
	    vdb_signedflood.gad;		
	    exportlist3.gad;		
	    vex_cwdpath2.gad;		
	    vex_outputmask2.gad;		

	    { STRETCH(1,1) LOOK(plain) }
	}
    } 
}

# warning cpp warning: "GenV3/subdialog.top.ui":5 Macro "PARMSPACING" redefined.  Using later definition
# warning cpp warning: "GenV3/subdialog.top.ui":6 Macro "LAYOUTDIR" redefined.  Using later definition
# warning cpp warning: "GenV3/subdialog.top.ui":7 Macro "LOOK_PLAIN" redefined.  Using later definition
# warning cpp warning: "GenV3/subdialog.top.ui":8 Macro "DO_JUSTIFY" redefined.  Using later definition
dialog_norm.gad = 
{
    LAYOUT(vertical) SPACING(0.02) HSTRETCH LOOK(plain) 
    folder0.gad; 
    file.row.join; 
    version.gad; 
} 
// dialog.bot.ui

extrastuffstowbar_minimize.val := 1;

dialog = OPENNOTIFIER
{
    LAYOUT(vertical) SPACING(0.02) LOOK(bg) VALUE(open.val) HSTRETCH

    { HEIGHT(1p) LOOK(bg) HSTRETCH }

    dialog_norm.gad;
}
