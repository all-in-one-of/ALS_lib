{"body": [{"indent": 0, "text": [{"text": "hou.", "type": "supertitle"}, "ParmTemplateGroup"], "type": "title", "level": 0}, {"indent": 0, "type": "summary", "text": ["A group of parameter templates used to represent the parameter layout of\na node or the parameters in a digital asset definition."]}, {"indent": 0, "type": "para", "text": ["This class stores a group of ", {"_hs_sc": true, "text": "", "value": "/hom/hou/ParmTemplate", "fallback_text": "hou.ParmTemplate", "fullpath": "/hom/hou/ParmTemplate", "scheme": "Hom", "type": "link"}, " objects.  You can create an\nempty group, create a group from a sequence of parm templates, or create a\ngroup from the parameter definitions of a digital asset or from a particular\nnode\u2019s current parameter layout.  Similarly, you can set an asset\u2019s parameters\nor a node\u2019s parameter interface to the contents of a parameter group."]}, {"indent": 0, "type": "para", "text": ["You can get an asset\u2019s parm templates with\n", {"_hs_sc": true, "fragment": "#parmTemplateGroup", "text": "", "value": "/hom/hou/HDADefinition#parmTemplateGroup", "fallback_text": "hou.HDADefinition.parmTemplateGroup", "fullpath": "/hom/hou/HDADefinition#parmTemplateGroup", "scheme": "Hom", "type": "link"}, " and set them with\n", {"_hs_sc": true, "fragment": "#setParmTemplateGroup", "text": "", "value": "/hom/hou/HDADefinition#setParmTemplateGroup", "fallback_text": "hou.HDADefinition.setParmTemplateGroup", "fullpath": "/hom/hou/HDADefinition#setParmTemplateGroup", "scheme": "Hom", "type": "link"}, ".  Similarly, you can get an\nindividual node\u2019s parameter definition with ", {"_hs_sc": true, "fragment": "#parmTemplateGroup", "text": "", "value": "/hom/hou/Node#parmTemplateGroup", "fallback_text": "hou.Node.parmTemplateGroup", "fullpath": "/hom/hou/Node#parmTemplateGroup", "scheme": "Hom", "type": "link"}, "\nand set it with ", {"_hs_sc": true, "fragment": "#setParmTemplateGroup", "text": "", "value": "/hom/hou/Node#setParmTemplateGroup", "fallback_text": "hou.Node.setParmTemplateGroup", "fullpath": "/hom/hou/Node#setParmTemplateGroup", "scheme": "Hom", "type": "link"}, ".  When setting a node\u2019s\nparameter interface, any parms that are not in the node\u2019s type\u2019s set of parms\nwill be added as spare parameters.  Similarly, if parameters in the node\u2019s type\nare not present in the group, they will be automatically added at the end\nand made invisible.  Also, if they exist but the types, labels, looks, naming\nschemes, etc are different, Houdini will discard all changes you attempt to\nmake to these reserved parameters except for visibility settings."]}, {"indent": 0, "type": "para", "text": ["Note that ParmTemplateGroups store their own copy of the parm templates.\nAsking for the parm templates in a group will return a copy of the parm\ntemplates; modifying those copies will not change the contents of the group.\nFor example, to change a parameter in a group you cannot simply call\n", {"_hs_sc": true, "fragment": "#find", "text": ["find"], "value": "/hom/hou/ParmTemplateGroup#find", "fullpath": "/hom/hou/ParmTemplateGroup#find", "scheme": "Hom", "type": "link"}, " and modify the ", {"_hs_sc": true, "text": "", "value": "/hom/hou/ParmTemplate", "fallback_text": "hou.ParmTemplate", "fullpath": "/hom/hou/ParmTemplate", "scheme": "Hom", "type": "link"}, " it\nreturned.  Instead, you must call ", {"_hs_sc": true, "fragment": "#replace", "text": ["replace"], "value": "/hom/hou/ParmTemplateGroup#replace", "fullpath": "/hom/hou/ParmTemplateGroup#replace", "scheme": "Hom", "type": "link"}, "."]}, {"indent": 0, "type": "para", "text": ["It is important to understand the difference between folder parm templates and\nfolder set parm templates when using ParmTemplateGroups.  Folder sets\ncorrespond directly to ", {"_hs_sc": true, "text": "", "value": "/hom/hou/ParmTuple", "fallback_text": "hou.ParmTuple", "fullpath": "/hom/hou/ParmTuple", "scheme": "Hom", "type": "link"}, " objects \u2013 there is one parm tuple\n(that contains one parm) for each set of folders, and changing the value\nof that parm changes which folder is displayed.  Individual Folders, on the\nother hand, do not directly correspond to ", {"_hs_sc": true, "text": "", "value": "/hom/hou/ParmTuple", "fallback_text": "hou.ParmTuple", "fullpath": "/hom/hou/ParmTuple", "scheme": "Hom", "type": "link"}, " objects, but they\nare used in Houdini\u2019s ", {"text": ["Type Properties"], "type": "var"}, " dialog and they make it easy to add\nindividual folders and control which parameters are inside a folder.\nUnlike a ", {"_hs_sc": true, "text": "", "value": "/hom/hou/FolderSetParmTemplate", "fallback_text": "hou.FolderSetParmTemplate", "fullpath": "/hom/hou/FolderSetParmTemplate", "scheme": "Hom", "type": "link"}, ", a ", {"_hs_sc": true, "text": "", "value": "/hom/hou/FolderParmTemplate", "fallback_text": "hou.FolderParmTemplate", "fullpath": "/hom/hou/FolderParmTemplate", "scheme": "Hom", "type": "link"}, " stores\nthe set of parm templates inside that folder.  When a node or definition\u2019s\nparameters are set to the contents of a parm template group, the folder sets\nare determined and the parm tuple name for the set is the name of the first\nfolder in that set.  The names of the other folders in the set are not used."]}, {"indent": 0, "type": "para", "text": ["ParmTemplateGroups use folder parm templates instead of folder set parm\ntemplates.  Attempting to add a FolderSetParmTemplate to a group will raise\n", {"_hs_sc": true, "text": "", "value": "/hom/hou/OperationFailed", "fallback_text": "hou.OperationFailed", "fullpath": "/hom/hou/OperationFailed", "scheme": "Hom", "type": "link"}, ".  Asking a parm tuple for its parm template, on the\nother hand, may return a folder set but will never return a folder.\nPreviously, folder parameter templates and parm template groups did not exist,\nso the only way to add folders were with special methods like\n", {"_hs_sc": true, "fragment": "#addParmFolder", "text": "", "value": "/hom/hou/HDADefinition#addParmFolder", "fallback_text": "hou.HDADefinition.addParmFolder", "fullpath": "/hom/hou/HDADefinition#addParmFolder", "scheme": "Hom", "type": "link"}, " and ", {"_hs_sc": true, "fragment": "#addSpareParmFolder", "text": "", "value": "/hom/hou/Node#addSpareParmFolder", "fallback_text": "hou.Node.addSpareParmFolder", "fullpath": "/hom/hou/Node#addSpareParmFolder", "scheme": "Hom", "type": "link"}, ".\nNow that that they exist, you may create folders by passing folder parm\ntemplates to ", {"_hs_sc": true, "fragment": "#addParmTuple", "text": "", "value": "/hom/hou/HDADefinition#addParmTuple", "fallback_text": "hou.HDADefinition.addParmTuple", "fullpath": "/hom/hou/HDADefinition#addParmTuple", "scheme": "Hom", "type": "link"}, " and\n", {"_hs_sc": true, "fragment": "#addSpareParmTuple", "text": "", "value": "/hom/hou/Node#addSpareParmTuple", "fallback_text": "hou.Node.addSpareParmTuple", "fullpath": "/hom/hou/Node#addSpareParmTuple", "scheme": "Hom", "type": "link"}, ".  However, using parm template groups is\npreferred over calling these methods."]}, {"indent": 0, "type": "para", "text": ["Note that folder parm templates are also used to represent multiparm blocks,\nmuch like the ", {"text": ["Type Properties"], "type": "var"}, " dialog does.  The folder parm template\u2019s\n", {"_hs_sc": true, "text": "", "value": "/hom/hou/folderType", "fallback_text": "hou.folderType", "fullpath": "/hom/hou/folderType", "scheme": "Hom", "type": "link"}, " determines whether it is a folder or a multiparm block.  \nUnlike folder parm templates, which do not correspond directly to parameter\ninstances, a multiparm parm template does correspond to an integer parameter\nthat controls the number of instances of the multiparm."]}, {"body": [{"body": [{"body": [{"indent": 4, "type": "para", "text": ["Create a new group from an optional sequence of parm templates.  If none\n    are passed in, the new group will be empty."]}, {"indent": 4, "type": "para", "text": ["Because groups and folder parm templates can both be constructed using\n    a sequence of contained parm templates, it is possible to construct a\n    parm template group with parameters inside folders using a single\n    expression.  The following example creates a group with two folders\n    and with parameters inside each of those folders:"]}, {"lang": "pycon", "indent": 4, "type": "pre", "text": ["\n    >>> group = hou.ParmTemplateGroup((\n    ... hou.FolderParmTemplate(\"folder\", \"Physical\", (\n    ...     hou.FloatParmTemplate(\"mass\", \"Mass\", 1),\n    ...     hou.FloatParmTemplate(\"density\", \"Density\", 1),\n    ... )),\n    ... hou.FolderParmTemplate(\"folder\", \"Divisions\", (\n    ...     hou.FloatParmTemplate(\"divisions\", \"Divisions\", 3),\n    ...     hou.ToggleParmTemplate(\"laser\", \"Laser Scan\", default_value=True),\n    ... )),\n    ... ))\n    >>> group.entries()\n    (<hou.FolderParmTemplate name='folder' label='Physical' folder_style=Tabs>,\n    <hou.FolderParmTemplate name= 'folder' label='Divisions' folder_style=Tabs>)\n    >>> group.entries()[0].parmTemplates()[0]\n    <hou.FloatParmTemplate name='mass' label='Mass' length=1 naming_scheme=XYZW look=Regular default_value=(0,)>\n    >>> group.entriesWithoutFolders()\n    (<hou.FloatParmTemplate name='mass' label='Mass' length=1 naming_scheme=XYZW look=Regular default_value=(0,)>,\n     <hou.FloatParmTemplate name='density' label='Density' length=1 naming_scheme=XYZW look=Regular default_value=(0,)>,\n      <hou.FloatParmTemplate name='divisions' label='Divisions' length=3 naming_scheme=XYZW look=Regular default_value=(0,0,0)>,\n       <hou.ToggleParmTemplate name='laser' label='Laser Scan' default_value=True>)\n    "]}, {"indent": 4, "type": "para", "text": ["Raises ", {"_hs_sc": true, "text": "", "value": "/hom/hou/OperationFailed", "fallback_text": "hou.OperationFailed", "fullpath": "/hom/hou/OperationFailed", "scheme": "Hom", "type": "link"}, " if any of the parm templates in the\n    sequence are ", {"_hs_sc": true, "text": "", "value": "/hom/hou/FolderSetParmTemplate", "fallback_text": "hou.FolderSetParmTemplate", "fullpath": "/hom/hou/FolderSetParmTemplate", "scheme": "Hom", "type": "link"}, " objects."]}], "indent": 0, "text": [{"text": ["__init__(self, parm_templates=())"], "type": "code"}], "role": "item", "attrs": {"cppname": "HOM_ParmTemplateGroup::HOM_ParmTemplateGroup"}, "type": "methods_item", "id": "__init__"}, {"body": [{"indent": 4, "type": "para", "text": ["Search in this group for a parm template whose name matches the specified\n    one.  Return a copy of the parm template or ", {"text": ["None"], "type": "code"}, " if no match was found."]}, {"indent": 4, "type": "para", "text": ["Note that this function returns a copy of the parm template stored in this\n    group.  Modifying the copy will not affect the parameters in this group.\n    The following example shows how to use the ", {"text": ["find"], "type": "code"}, " and ", {"text": ["replace"], "type": "code"}, " methods to\n    modify the ", {"text": ["\"pos\""], "type": "code"}, " parm template in the group:"]}, {"lang": "pycon", "indent": 4, "type": "pre", "text": ["\n    >>> parm_template = group.find(\"pos\")\n    >>> parm_template.setLabel(\"Position\")\n    >>> parm_template.replace(\"pos\", parm_template)\n    "]}, {"indent": 4, "type": "para", "text": ["If you created the group from existing parameters, folder parm templates in\n    the same folder set will share the same name, so searching for a folder\n    using this method may return the first folder in the folder set.  To\n    instead search for a folder by its folder label, use\n    ", {"_hs_sc": true, "fragment": "#findFolder", "text": ["findFolder"], "value": "/hom/hou/ParmTemplateGroup#findFolder", "fullpath": "/hom/hou/ParmTemplateGroup#findFolder", "scheme": "Hom", "type": "link"}, "."]}, {"indent": 4, "type": "para", "text": ["Note that, in general, the group does not prevent you from adding two\n    parameters with the same name.  In this case, searching for a parameter\n    with this name will return the first one.  Note, though, that when\n    when setting this group to a node or asset definition\u2019s parms, either\n    the duplicate parameters will be renamed on an exception will be raised.\n    See the ", {"text": ["rename_conflicting_parms"], "type": "code"}, " parameter to\n    ", {"_hs_sc": true, "fragment": "#setParmTemplateGroup", "text": "", "value": "/hom/hou/HDADefinition#setParmTemplateGroup", "fallback_text": "hou.HDADefinition.setParmTemplateGroup", "fullpath": "/hom/hou/HDADefinition#setParmTemplateGroup", "scheme": "Hom", "type": "link"}, " for more information."]}], "indent": 0, "text": [{"text": ["find(self, name)"], "type": "code"}, "  \u2192 ", {"_hs_sc": true, "text": "", "value": "/hom/hou/ParmTemplate", "fallback_text": "hou.ParmTemplate", "fullpath": "/hom/hou/ParmTemplate", "scheme": "Hom", "type": "link"}, " or ", {"text": ["None"], "type": "code"}], "role": "item", "attrs": {"cppname": "HOM_ParmTemplateGroup::find"}, "type": "methods_item", "id": "find"}, {"body": [{"indent": 4, "type": "para", "text": ["Search in this group for a parm template and return a tuple of integers\n    corresponding to the indices of the parm in the group.  Return an empty\n    tuple if no match was found."]}, {"body": [{"body": [{"indent": 8, "type": "para", "text": ["Either the name of the parm template or another ", {"_hs_sc": true, "text": "", "value": "/hom/hou/ParmTemplate", "fallback_text": "hou.ParmTemplate", "fullpath": "/hom/hou/ParmTemplate", "scheme": "Hom", "type": "link"}, "\n        object to compare against when searching for a match."]}], "indent": 4, "type": "dt", "text": [{"text": ["name_or_parm_template"], "type": "code"}]}], "container": true, "type": "dt_group"}, {"indent": 4, "type": "para", "text": ["If the parm template was found and it is not inside any folders, the\n    result tuple will contain a single integer with the index of the parm\n    template.  Otherwise, the first entry will be the index of a folder inside\n    the group, the next will be an index of a folder inside that folder, and\n    so on until the last index is an index of a parm template inside a folder."]}, {"indent": 4, "type": "para", "text": ["See also\n    ", {"_hs_sc": true, "fragment": "#findIndicesForFolder", "text": ["findIndicesForFolder"], "value": "/hom/hou/ParmTemplateGroup#findIndicesForFolder", "fullpath": "/hom/hou/ParmTemplateGroup#findIndicesForFolder", "scheme": "Hom", "type": "link"}, "."]}], "indent": 0, "text": [{"text": ["findIndices(self, name_or_parm_template)"], "type": "code"}, "  \u2192 tuple of ", {"text": ["int"], "type": "code"}], "role": "item", "attrs": {"cppname": "HOM_ParmTemplateGroup::findIndices"}, "type": "methods_item", "id": "findIndices"}, {"body": [{"indent": 4, "type": "para", "text": ["Search in this group for a folder parm template with the given label.\n    Return a copy of the ", {"_hs_sc": true, "text": "", "value": "/hom/hou/FolderParmTemplate", "fallback_text": "hou.FolderParmTemplate", "fullpath": "/hom/hou/FolderParmTemplate", "scheme": "Hom", "type": "link"}, " or ", {"text": ["None"], "type": "code"}, " if the\n    folder wasn\u2019t found."]}, {"body": [{"body": [{"indent": 8, "type": "para", "text": ["Either a string containing the folder\u2019s label or a tuple of strings\n        containing the labels of containing folders as well as the folder\u2019s\n        label."]}], "indent": 4, "type": "dt", "text": [{"text": ["label_or_labels"], "type": "code"}]}], "container": true, "type": "dt_group"}, {"indent": 4, "type": "para", "text": ["Note that a folder parm template\u2019s label is what appears in the interface\n    in the parameter dialog.  The folder parm template\u2019s name is used to\n    determine the name of the parm tuple for the folder set, if the folder is\n    the first in the folder set.  See the documentation for this class for\n    more information."]}], "indent": 0, "text": [{"text": ["findFolder(self, label_or_labels)"], "type": "code"}, "  \u2192 ", {"_hs_sc": true, "text": "", "value": "/hom/hou/FolderParmTemplate", "fallback_text": "hou.FolderParmTemplate", "fullpath": "/hom/hou/FolderParmTemplate", "scheme": "Hom", "type": "link"}, " or ", {"text": ["None"], "type": "code"}], "role": "item", "attrs": {"cppname": "HOM_ParmTemplateGroup::findFolder"}, "type": "methods_item", "id": "findFolder"}, {"body": [{"indent": 4, "type": "para", "text": ["Search in this group for a folder parm template with the given label.\n    Return an empty tuple if no match was found."]}, {"indent": 4, "type": "para", "text": ["See ", {"_hs_sc": true, "fragment": "#findFolder", "text": ["findFolder"], "value": "/hom/hou/ParmTemplateGroup#findFolder", "fullpath": "/hom/hou/ParmTemplateGroup#findFolder", "scheme": "Hom", "type": "link"}, " for a description of\n    the parameter and ", {"_hs_sc": true, "fragment": "#findIndices", "text": ["findIndices"], "value": "/hom/hou/ParmTemplateGroup#findIndices", "fullpath": "/hom/hou/ParmTemplateGroup#findIndices", "scheme": "Hom", "type": "link"}, " for a\n    description of the return value."]}, {"indent": 4, "type": "para", "text": ["Note that this method does not accept a parm template.  However, if you\n    have a folder parm template and want to find its indices, simply call\n    ", {"_hs_sc": true, "fragment": "#findIndices", "text": ["findIndices"], "value": "/hom/hou/ParmTemplateGroup#findIndices", "fullpath": "/hom/hou/ParmTemplateGroup#findIndices", "scheme": "Hom", "type": "link"}, " on the folder parm\n    template."]}], "indent": 0, "text": [{"text": ["findIndicesForFolder(self, label_or_labels)"], "type": "code"}, "  \u2192 tuple of ", {"text": ["int"], "type": "code"}], "role": "item", "attrs": {"cppname": "HOM_ParmTemplateGroup::findIndicesForFolder"}, "type": "methods_item", "id": "findIndicesForFolder"}, {"body": [{"indent": 4, "type": "para", "text": ["Given a sequence of integer indices return a copy of the\n    ", {"_hs_sc": true, "text": "", "value": "/hom/hou/ParmTemplate", "fallback_text": "hou.ParmTemplate", "fullpath": "/hom/hou/ParmTemplate", "scheme": "Hom", "type": "link"}, " object at that location.  The indices are of\n    the format returned by ", {"_hs_sc": true, "fragment": "#findIndices", "text": ["findIndices"], "value": "/hom/hou/ParmTemplateGroup#findIndices", "fullpath": "/hom/hou/ParmTemplateGroup#findIndices", "scheme": "Hom", "type": "link"}, "."]}, {"indent": 4, "type": "para", "text": ["Like the ", {"_hs_sc": true, "fragment": "#find", "text": "", "value": "/hom/hou/ParmTemplate#find", "fallback_text": "hou.ParmTemplate.find", "fullpath": "/hom/hou/ParmTemplate#find", "scheme": "Hom", "type": "link"}, " and ", {"_hs_sc": true, "fragment": "#entries", "text": "", "value": "/hom/hou/ParmTemplate#entries", "fallback_text": "hou.ParmTemplate.entries", "fullpath": "/hom/hou/ParmTemplate#entries", "scheme": "Hom", "type": "link"}, "\n    methods, this method returns a copy of the parm template stored inside\n    this group.  Modifying the copied parm template will not affect the\n    contents of this group.  Use ", {"_hs_sc": true, "fragment": "#replace", "text": ["replace"], "value": "/hom/hou/ParmTemplateGroup#replace", "fullpath": "/hom/hou/ParmTemplateGroup#replace", "scheme": "Hom", "type": "link"}, " to\n    change a parm template."]}, {"indent": 4, "type": "para", "text": ["Raises ", {"_hs_sc": true, "text": "", "value": "/hom/hou/OperationFailed", "fallback_text": "hou.OperationFailed", "fullpath": "/hom/hou/OperationFailed", "scheme": "Hom", "type": "link"}, " if the indices are invalid, including when\n    the indices sequence is empty."]}, {"indent": 4, "type": "para", "text": ["This method could be implemented as follows:"]}, {"lang": "python", "indent": 4, "type": "pre", "text": ["\n    def entryAtIndices(self, indices):\n        if len(indices) == 0:\n            raise hou.OperationFailed(\"Invalid indices\")\n        parm_template = self.entries()[indices[0]]\n\n        # If there are multiple indices then we should have just looked up\n        # a folder parm template.\n        for index in indices[1:]:\n            parm_template = parm_template.parmTemplates()[index]\n        return parm_template\n    "]}], "indent": 0, "text": [{"text": ["entryAtIndices(self, indices)"], "type": "code"}, "  \u2192 ", {"_hs_sc": true, "text": "", "value": "/hom/hou/ParmTemplate", "fallback_text": "hou.ParmTemplate", "fullpath": "/hom/hou/ParmTemplate", "scheme": "Hom", "type": "link"}], "role": "item", "attrs": {"cppname": "HOM_ParmTemplateGroup::entryAtIndices"}, "type": "methods_item", "id": "entryAtIndices"}, {"body": [{"indent": 4, "type": "para", "text": ["Return a copy of the ", {"_hs_sc": true, "text": "", "value": "/hom/hou/FolderParmTemplate", "fallback_text": "hou.FolderParmTemplate", "fullpath": "/hom/hou/FolderParmTemplate", "scheme": "Hom", "type": "link"}, " in this group containing\n    a parm template."]}, {"body": [{"body": [{"indent": 8, "type": "para", "text": ["Either the name of the parm template or another ", {"_hs_sc": true, "text": "", "value": "/hom/hou/ParmTemplate", "fallback_text": "hou.ParmTemplate", "fullpath": "/hom/hou/ParmTemplate", "scheme": "Hom", "type": "link"}, "\n        object to compare against when searching for a match."]}], "indent": 4, "type": "dt", "text": [{"text": ["name_or_parm_template"], "type": "code"}]}], "container": true, "type": "dt_group"}, {"indent": 4, "type": "para", "text": ["Raises ", {"_hs_sc": true, "text": "", "value": "/hom/hou/OperationFailed", "fallback_text": "hou.OperationFailed", "fullpath": "/hom/hou/OperationFailed", "scheme": "Hom", "type": "link"}, " if the parameter is not inside the\n    group or is not inside a folder."]}], "indent": 0, "text": [{"text": ["containingFolder(self, name_or_parm_template)"], "type": "code"}, "  \u2192 ", {"_hs_sc": true, "text": "", "value": "/hom/hou/FolderParmTemplate", "fallback_text": "hou.FolderParmTemplate", "fullpath": "/hom/hou/FolderParmTemplate", "scheme": "Hom", "type": "link"}], "role": "item", "attrs": {"cppname": "HOM_ParmTemplateGroup::containingFolder"}, "type": "methods_item", "id": "containingFolder"}, {"body": [{"indent": 4, "type": "para", "text": ["Return the indices of the folder in this group containing a given parm\n    template.  Return an empty tuple if no match was found."]}, {"indent": 4, "type": "para", "text": ["See ", {"_hs_sc": true, "fragment": "#replace", "text": ["replace"], "value": "/hom/hou/ParmTemplateGroup#replace", "fullpath": "/hom/hou/ParmTemplateGroup#replace", "scheme": "Hom", "type": "link"}, " for a description of the\n    parameter and ", {"_hs_sc": true, "fragment": "#findIndices", "text": ["findIndices"], "value": "/hom/hou/ParmTemplateGroup#findIndices", "fullpath": "/hom/hou/ParmTemplateGroup#findIndices", "scheme": "Hom", "type": "link"}, " for a\n    description of the return value."]}, {"indent": 4, "type": "para", "text": ["Raises ", {"_hs_sc": true, "text": "", "value": "/hom/hou/OperationFailed", "fallback_text": "hou.OperationFailed", "fullpath": "/hom/hou/OperationFailed", "scheme": "Hom", "type": "link"}, " if the parameter is not inside the\n    group or is not inside a folder."]}], "indent": 0, "text": [{"text": ["containingFolderIndices(self, name_or_parm_template_or_indices)"], "type": "code"}, "  \u2192 tuple of ", {"text": ["int"], "type": "code"}], "role": "item", "attrs": {"cppname": "HOM_ParmTemplateGroup::containingFolderIndices"}, "type": "methods_item", "id": "containingFolderIndices"}, {"body": [{"indent": 4, "type": "para", "text": ["Return a tuple containing copies of the parm templates inside this group."]}, {"indent": 4, "type": "para", "text": ["Note that folders are returned as ", {"_hs_sc": true, "text": "", "value": "/hom/hou/FolderParmTemplate", "fallback_text": "hou.FolderParmTemplate", "fullpath": "/hom/hou/FolderParmTemplate", "scheme": "Hom", "type": "link"}, " objects,\n    and each folder parm template contains the parm templates inside it.\n    Use ", {"_hs_sc": true, "fragment": "#parmTemplates", "text": "", "value": "/hom/hou/FolderParmTemplate#parmTemplates", "fallback_text": "hou.FolderParmTemplate.parmTemplates", "fullpath": "/hom/hou/FolderParmTemplate#parmTemplates", "scheme": "Hom", "type": "link"}, " to access the elements in\n    a folder."]}, {"indent": 4, "type": "para", "text": ["The following example creates a function named ", {"text": ["allParmTemplates"], "type": "code"}, " that\n    returns a single sequence of parm templates, including folders, for\n    all parm templates in the group:"]}, {"lang": "python", "indent": 4, "type": "pre", "text": ["\n    def allParmTemplates(group_or_folder):\n        for parm_template in group_or_folder.parmTemplates():\n            yield parm_template\n\n        # Note that we don't want to return parm templates inside multiparm\n        # blocks, so we verify that the folder parm template is actually\n        # for a folder.\n            if (parm_template.type() == hou.parmTemplateType.Folder and\n            parm_template.isActualFolder()):\n                for sub_parm_template in allParmTemplates(parm_template):\n                    yield sub_parm_template\n    "]}, {"indent": 4, "type": "para", "text": ["See also the ", {"_hs_sc": true, "fragment": "#parmTemplates", "text": ["parmTemplates"], "value": "/hom/hou/ParmTemplateGroup#parmTemplates", "fullpath": "/hom/hou/ParmTemplateGroup#parmTemplates", "scheme": "Hom", "type": "link"}, "\n    method."]}], "indent": 0, "text": [{"text": ["entries(self)"], "type": "code"}, "  \u2192 tuple of ", {"_hs_sc": true, "text": "", "value": "/hom/hou/ParmTemplate", "fallback_text": "hou.ParmTemplate", "fullpath": "/hom/hou/ParmTemplate", "scheme": "Hom", "type": "link"}], "role": "item", "attrs": {"cppname": "HOM_ParmTemplateGroup::entries"}, "type": "methods_item", "id": "entries"}, {"body": [{"indent": 4, "type": "para", "text": ["This method is simply an alias for the\n    ", {"_hs_sc": true, "fragment": "#entries", "text": ["entries"], "value": "/hom/hou/ParmTemplateGroup#entries", "fullpath": "/hom/hou/ParmTemplateGroup#entries", "scheme": "Hom", "type": "link"}, " method."]}, {"indent": 4, "type": "para", "text": ["It makes it easier to search down through a parm template group for items\n    nested in folders, since the ", {"_hs_sc": true, "text": "", "value": "/hom/hou/FolderParmTemplate", "fallback_text": "hou.FolderParmTemplate", "fullpath": "/hom/hou/FolderParmTemplate", "scheme": "Hom", "type": "link"}, " class also has\n    a method named ", {"text": ["parmTemplates"], "type": "code"}, ".  The following example shows how to look\n    up the labels for a folder parameter given its indices:"]}, {"lang": "python", "indent": 4, "type": "pre", "text": ["\n    def folderLabels(parm_template_group, indices):\n        container = parm_template_group\n        result = []\n        for index in indices:\n            container = container.parmTemplates()[index]\n            result.append(container.label())\n        return result\n    "]}], "indent": 0, "text": [{"text": ["parmTemplates(self)"], "type": "code"}, "  \u2192 tuple of ", {"_hs_sc": true, "text": "", "value": "/hom/hou/ParmTemplate", "fallback_text": "hou.ParmTemplate", "fullpath": "/hom/hou/ParmTemplate", "scheme": "Hom", "type": "link"}], "role": "item", "attrs": {"cppname": "HOM_ParmTemplateGroup::parmTemplates"}, "type": "methods_item", "id": "parmTemplates"}, {"body": [{"indent": 4, "type": "para", "text": ["Return a tuple containing all the non-folder parm templates inside this\n    group.  The output is the flattened set of parm templates in the group,\n    and includes the non-folder parms inside folders."]}, {"indent": 4, "type": "para", "text": ["Like ", {"_hs_sc": true, "fragment": "#entries", "text": ["entries"], "value": "/hom/hou/ParmTemplateGroup#entries", "fullpath": "/hom/hou/ParmTemplateGroup#entries", "scheme": "Hom", "type": "link"}, ", this method returns a copy\n    of the parm templates inside this group."]}, {"indent": 4, "type": "para", "text": ["Note that this function does not return parm templates for entries inside\n    multiparm blocks."]}, {"indent": 4, "type": "para", "text": ["Also see the ", {"_hs_sc": true, "fragment": "#entries", "text": ["entries"], "value": "/hom/hou/ParmTemplateGroup#entries", "fullpath": "/hom/hou/ParmTemplateGroup#entries", "scheme": "Hom", "type": "link"}, " method for the\n    example function ", {"text": ["allParmTemplates"], "type": "code"}, "."]}], "indent": 0, "text": [{"text": ["entriesWithoutFolders(self)"], "type": "code"}, "  \u2192 tuple of ", {"_hs_sc": true, "text": "", "value": "/hom/hou/ParmTemplate", "fallback_text": "hou.ParmTemplate", "fullpath": "/hom/hou/ParmTemplate", "scheme": "Hom", "type": "link"}], "role": "item", "attrs": {"cppname": "HOM_ParmTemplateGroup::entriesWithoutFolders"}, "type": "methods_item", "id": "entriesWithoutFolders"}, {"body": [{"indent": 4, "type": "para", "text": ["Replace a parm template inside this group with another parm template."]}, {"body": [{"body": [{"indent": 8, "type": "para", "text": ["Either the name of the parm template being replaced, a copy of the parm\n        template, or a tuple of integer indices that identify the parm template\n        and any containing folders."]}], "indent": 4, "type": "dt", "text": [{"text": ["name_or_parm_template_or_indices"], "type": "code"}]}], "container": true, "type": "dt_group"}, {"indent": 4, "type": "para", "text": ["This method changes the contents of this group.  Note that it stores a\n    copy of the parm template in the group, so future changes to the parm\n    template passed in will not affect the group."]}, {"indent": 4, "type": "para", "text": ["See the ", {"_hs_sc": true, "fragment": "#find", "text": ["find"], "value": "/hom/hou/ParmTemplateGroup#find", "fullpath": "/hom/hou/ParmTemplateGroup#find", "scheme": "Hom", "type": "link"}, " method for a simple example\n    of how to use this method."]}, {"indent": 4, "type": "para", "text": ["Note that parm templates for reserved parameters (for example, the\n    transform parameters in object-level digital assets) can be replaced\n    in the parm template group, but all aspects of reserved parameters except\n    for their visibility and join settings will be restored to their defaults\n    when you save this group to a node or asset definition."]}, {"indent": 4, "type": "para", "text": ["Raises ", {"_hs_sc": true, "text": "", "value": "/hom/hou/OperationFailed", "fallback_text": "hou.OperationFailed", "fullpath": "/hom/hou/OperationFailed", "scheme": "Hom", "type": "link"}, " if the parm template doesn\u2019t exist."]}], "indent": 0, "text": [{"text": ["replace(self, name_or_parm_template_or_indices, parm_template)"], "type": "code"}], "role": "item", "attrs": {"cppname": "HOM_ParmTemplateGroup::replace"}, "type": "methods_item", "id": "replace"}, {"body": [{"indent": 4, "type": "para", "text": ["Insert a parm template inside this group before an existing one.  The\n    new parm template will be in the same folder as the existing one."]}, {"indent": 4, "type": "para", "text": ["See ", {"_hs_sc": true, "fragment": "#replace", "text": ["replace"], "value": "/hom/hou/ParmTemplateGroup#replace", "fullpath": "/hom/hou/ParmTemplateGroup#replace", "scheme": "Hom", "type": "link"}, " for a description of the\n    name/parm template/indices parameter."]}, {"indent": 4, "type": "para", "text": ["Use ", {"_hs_sc": true, "fragment": "#appendToFolder", "text": ["appendToFolder"], "value": "/hom/hou/ParmTemplateGroup#appendToFolder", "fullpath": "/hom/hou/ParmTemplateGroup#appendToFolder", "scheme": "Hom", "type": "link"}, " to add an\n    entry to a empty folder.  Use ", {"_hs_sc": true, "fragment": "#append", "text": ["append"], "value": "/hom/hou/ParmTemplateGroup#append", "fullpath": "/hom/hou/ParmTemplateGroup#append", "scheme": "Hom", "type": "link"}, " to\n    add an entry to an empty parm template group."]}], "indent": 0, "text": [{"text": ["insertBefore(self, name_or_parm_template_or_indices, parm_template)"], "type": "code"}], "role": "item", "attrs": {"cppname": "HOM_ParmTemplateGroup::insertBefore"}, "type": "methods_item", "id": "insertBefore"}, {"body": [{"indent": 4, "type": "para", "text": ["Insert a parm template inside this group after an existing one.  The\n    new parm template will be in the same folder as the existing one."]}, {"indent": 4, "type": "para", "text": ["See ", {"_hs_sc": true, "fragment": "#replace", "text": ["replace"], "value": "/hom/hou/ParmTemplateGroup#replace", "fullpath": "/hom/hou/ParmTemplateGroup#replace", "scheme": "Hom", "type": "link"}, " for a description of the\n    name/ parm template/indices parameter."]}, {"indent": 4, "type": "para", "text": ["Use ", {"_hs_sc": true, "fragment": "#appendToFolder", "text": ["appendToFolder"], "value": "/hom/hou/ParmTemplateGroup#appendToFolder", "fullpath": "/hom/hou/ParmTemplateGroup#appendToFolder", "scheme": "Hom", "type": "link"}, " to add an\n    entry to a empty folder.  Use ", {"_hs_sc": true, "fragment": "#append", "text": ["append"], "value": "/hom/hou/ParmTemplateGroup#append", "fullpath": "/hom/hou/ParmTemplateGroup#append", "scheme": "Hom", "type": "link"}, " to\n    add an entry to an empty parm template group."]}], "indent": 0, "text": [{"text": ["insertAfter(self, name_or_parm_template_or_indices, parm_template)"], "type": "code"}], "role": "item", "attrs": {"cppname": "HOM_ParmTemplateGroup::insertAfter"}, "type": "methods_item", "id": "insertAfter"}, {"body": [{"indent": 4, "type": "para", "text": ["Add a parm template after all existing parm templates, outside of\n    any folder."]}, {"indent": 4, "type": "para", "text": ["See also ", {"_hs_sc": true, "fragment": "#appendToFolder", "text": ["appendToFolder"], "value": "/hom/hou/ParmTemplateGroup#appendToFolder", "fullpath": "/hom/hou/ParmTemplateGroup#appendToFolder", "scheme": "Hom", "type": "link"}, "."]}], "indent": 0, "text": [{"text": ["append(self, parm_template)"], "type": "code"}], "role": "item", "attrs": {"cppname": "HOM_ParmTemplateGroup::append"}, "type": "methods_item", "id": "append"}, {"body": [{"indent": 4, "type": "para", "text": ["This method is simply an alias for the\n    ", {"_hs_sc": true, "fragment": "#append", "text": ["append"], "value": "/hom/hou/ParmTemplateGroup#append", "fullpath": "/hom/hou/ParmTemplateGroup#append", "scheme": "Hom", "type": "link"}, " method."]}, {"indent": 4, "type": "para", "text": ["It makes it easier to treat parm template groups and\n    ", {"_hs_sc": true, "text": "", "value": "/hom/hou/FolderParmTemplate", "fallback_text": "hou.FolderParmTemplate", "fullpath": "/hom/hou/FolderParmTemplate", "scheme": "Hom", "type": "link"}, " objects uniformly, since\n    ", {"_hs_sc": true, "text": "", "value": "/hom/hou/FolderParmTemplate", "fallback_text": "hou.FolderParmTemplate", "fullpath": "/hom/hou/FolderParmTemplate", "scheme": "Hom", "type": "link"}, " has an\n    ", {"_hs_sc": true, "fragment": "#addParmTemplate", "text": ["addParmTemplate"], "value": "/hom/hou/FolderParmTemplate#addParmTemplate", "fullpath": "/hom/hou/FolderParmTemplate#addParmTemplate", "scheme": "Hom", "type": "link"}, " method."]}], "indent": 0, "text": [{"text": ["addParmTemplate(self, parm_template)"], "type": "code"}], "role": "item", "attrs": {"cppname": "HOM_ParmTemplateGroup::addParmTemplate"}, "type": "methods_item", "id": "addParmTemplate"}, {"body": [{"indent": 4, "type": "para", "text": ["Add a parm template to the bottom of an existing folder."]}, {"indent": 4, "type": "para", "text": ["Note that you cannot add to a folder by simply looking up the folder parm\n    template and calling ", {"_hs_sc": true, "fragment": "#addParmTemplate", "text": "", "value": "/hom/hou/FolderParmTemplate#addParmTemplate", "fallback_text": "hou.FolderParmTemplate.addParmTemplate", "fullpath": "/hom/hou/FolderParmTemplate#addParmTemplate", "scheme": "Hom", "type": "link"}, " on it,\n    because asking for a folder will return a deep copy.  The parm templates\n    inside the copied folder will be separate from those inside this group,\n    and modifying the folder will not affect the group.  Consider the following\n    example:"]}, {"lang": "pycon", "indent": 4, "type": "pre", "text": ["\n    >>> folder = group.findFolder(\"Transform\")\n    # \"folder\" now has its own copy of the parms inside it.\n    >>> folder.addParmTemplate(new_parm_template)\n    # \"folder\"'s parm templates are updated, but the group's parm templates are\n    # unchanged.\n\n    >>> group.appendToFolder(folder, new_parm_template)\n    # The group is modified.  \"folder\"'s contents are unchanged.\n    "]}], "indent": 0, "text": [{"text": ["appendToFolder(self, label_or_labels_or_parm_template_or_indices, parm_template)"], "type": "code"}], "role": "item", "attrs": {"cppname": "HOM_ParmTemplateGroup::appendToFolder"}, "type": "methods_item", "id": "appendToFolder"}, {"body": [{"indent": 4, "type": "para", "text": ["Remove a parm template from the group.  Note that if you remove a folder,\n    all of the parm templates in the folder are also removed."]}, {"indent": 4, "type": "para", "text": ["See ", {"_hs_sc": true, "fragment": "#replace", "text": ["replace"], "value": "/hom/hou/ParmTemplateGroup#replace", "fullpath": "/hom/hou/ParmTemplateGroup#replace", "scheme": "Hom", "type": "link"}, " for a description of the\n    name/parm template/indices parameter."]}, {"indent": 4, "type": "para", "text": ["Raises ", {"_hs_sc": true, "text": "", "value": "/hom/hou/OperationFailed", "fallback_text": "hou.OperationFailed", "fullpath": "/hom/hou/OperationFailed", "scheme": "Hom", "type": "link"}, " if the parm template could not be found."]}], "indent": 0, "text": [{"text": ["remove(self, name_or_parm_template_or_indices)"], "type": "code"}], "role": "item", "attrs": {"cppname": "HOM_ParmTemplateGroup::remove"}, "type": "methods_item", "id": "remove"}, {"body": [{"indent": 4, "type": "para", "text": ["Hide a parameter by making it invisible.  The parameter still exists in\n    the group, but parameter dialogs will not display it."]}, {"indent": 4, "type": "para", "text": ["See ", {"_hs_sc": true, "fragment": "#replace", "text": ["replace"], "value": "/hom/hou/ParmTemplateGroup#replace", "fullpath": "/hom/hou/ParmTemplateGroup#replace", "scheme": "Hom", "type": "link"}, " for a description of the\n    name/parm template/indices parameter."]}, {"indent": 4, "type": "para", "text": ["This method could be implemented as follows:"]}, {"lang": "python", "indent": 4, "type": "pre", "text": ["\n    def hide(self, name_or_parm_template_or_indices, on):\n        parm_template = self.find(name_or_parm_template_or_indices)\n        parm_template.hide(on)\n        self.replace(name_or_parm_template_or_indices, parm_template)\n    "]}, {"indent": 4, "type": "para", "text": ["See also ", {"_hs_sc": true, "fragment": "#hideFolder", "text": ["hideFolder"], "value": "/hom/hou/ParmTemplateGroup#hideFolder", "fullpath": "/hom/hou/ParmTemplateGroup#hideFolder", "scheme": "Hom", "type": "link"}, " and\n    ", {"_hs_sc": true, "fragment": "#hide", "text": "", "value": "/hom/hou/ParmTemplate#hide", "fallback_text": "hou.ParmTemplate.hide", "fullpath": "/hom/hou/ParmTemplate#hide", "scheme": "Hom", "type": "link"}, "."]}], "indent": 0, "text": [{"text": ["hide(self, name_or_parm_template_or_indices, on)"], "type": "code"}], "role": "item", "attrs": {"cppname": "HOM_ParmTemplateGroup::hide"}, "type": "methods_item", "id": "hide"}, {"body": [{"indent": 4, "type": "para", "text": ["Hide a folder and all the parameters in it."]}, {"indent": 4, "type": "para", "text": ["You may pass in either a string containing a single folder name or\n    a sequence of strings to indentify a nested folder.  For example,\n    the sequence ", {"text": ["(\"Render\", \"Dicing\")"], "type": "code"}, " identifies the ", {"text": ["Dicing"], "type": "code"}, " folder inside\n    the ", {"text": ["Render"], "type": "code"}, " folder.  The folder is hidden if ", {"text": ["on"], "type": "code"}, " is ", {"text": ["True"], "type": "code"}, " and unhidden\n    if it is ", {"text": ["False"], "type": "code"}, "."]}, {"indent": 4, "type": "para", "text": ["The following example hides the Transform parameter in a geometry object:"]}, {"lang": "pycon", "indent": 4, "type": "pre", "text": ["\n    >>> group = geo_node.parmTemplateGroup()\n    >>> group.hideFolder(\"Transform\", True)\n    >>> geo_node.setParmTemplateGroup(group)\n    "]}, {"indent": 4, "type": "para", "text": ["The following example hides the Dicing folder inside the Render folder\n    on a geometry object:"]}, {"lang": "pycon", "indent": 4, "type": "pre", "text": ["\n    >>> group = geo_node.parmTemplateGroup()\n    >>> group.hideFolder((\"Render\", \"Dicing\"), True)\n    >>> geo_node.setParmTemplateGroup(group)\n    "]}, {"indent": 4, "type": "para", "text": ["This method could be implemented as follows:"]}, {"lang": "python", "indent": 4, "type": "pre", "text": ["\n    def hideFolder(self, label_or_labels, on):\n        self.hide(self.findFolder(label_or_labels), on)\n    "]}, {"indent": 4, "type": "para", "text": ["See also ", {"_hs_sc": true, "fragment": "#hide", "text": ["hide"], "value": "/hom/hou/ParmTemplateGroup#hide", "fullpath": "/hom/hou/ParmTemplateGroup#hide", "scheme": "Hom", "type": "link"}, "."]}], "indent": 0, "text": [{"text": ["hideFolder(self, label_or_labels, on)"], "type": "code"}], "role": "item", "attrs": {"cppname": "HOM_ParmTemplateGroup::hideFolder"}, "type": "methods_item", "id": "hideFolder"}, {"body": [{"indent": 4, "type": "para", "text": ["Return whether the given parameter is itself hidden or lies inside\n    a hidden folder."]}, {"indent": 4, "type": "para", "text": ["See ", {"_hs_sc": true, "fragment": "#replace", "text": ["replace"], "value": "/hom/hou/ParmTemplateGroup#replace", "fullpath": "/hom/hou/ParmTemplateGroup#replace", "scheme": "Hom", "type": "link"}, " for a description of the\n    name/parm template/indices parameter."]}, {"indent": 4, "type": "para", "text": ["Note that if the parameter is inside a hidden folder but the parameter is\n    not marked as hidden, calling ", {"_hs_sc": true, "fragment": "#isHidden", "text": "", "value": "/hom/hou/ParmTemplate#isHidden", "fallback_text": "hou.ParmTemplate.isHidden", "fullpath": "/hom/hou/ParmTemplate#isHidden", "scheme": "Hom", "type": "link"}, "\n    on the parm template will return ", {"text": ["False"], "type": "code"}, ", while this method will return\n    ", {"text": ["True"], "type": "code"}, "."]}], "indent": 0, "text": [{"text": ["isHidden(self, name_or_parm_template_or_indices)"], "type": "code"}, "  \u2192 ", {"text": ["bool"], "type": "code"}], "role": "item", "attrs": {"cppname": "HOM_ParmTemplateGroup::isHidden"}, "type": "methods_item", "id": "isHidden"}, {"body": [{"indent": 4, "type": "para", "text": ["Return whether a folder or one of its containing folders is hidden."]}, {"indent": 4, "type": "para", "text": ["Note that if a folder is inside a hidden folder but this folder is\n    not marked as hidden, calling ", {"_hs_sc": true, "fragment": "#isHidden", "text": "", "value": "/hom/hou/ParmTemplate#isHidden", "fallback_text": "hou.ParmTemplate.isHidden", "fullpath": "/hom/hou/ParmTemplate#isHidden", "scheme": "Hom", "type": "link"}, "\n    on the folder parm template will return ", {"text": ["False"], "type": "code"}, ", while this method will\n    return ", {"text": ["True"], "type": "code"}, "."]}, {"indent": 4, "type": "para", "text": ["You may pass in either a string containing a single folder name or\n    a sequence of strings to indentify a nested folder.  For example,\n    the sequence ", {"text": ["(\"Render\", \"Dicing\")"], "type": "code"}, " identifies the ", {"text": ["Dicing"], "type": "code"}, " folder inside\n    the ", {"text": ["Render"], "type": "code"}, " folder.  The folder is hidden if ", {"text": ["on"], "type": "code"}, " is ", {"text": ["True"], "type": "code"}, " and unhidden\n    if it is ", {"text": ["False"], "type": "code"}, "."]}], "indent": 0, "text": [{"text": ["isFolderHidden(self, label_or_labels)"], "type": "code"}, "  \u2192 ", {"text": ["bool"], "type": "code"}], "role": "item", "attrs": {"cppname": "HOM_ParmTemplateGroup::isFolderHidden"}, "type": "methods_item", "id": "isFolderHidden"}, {"body": [{"indent": 4, "type": "para", "text": ["Remove all parm templates from this group."]}], "indent": 0, "text": [{"text": ["clear(self)"], "type": "code"}], "role": "item", "attrs": {"cppname": "HOM_ParmTemplateGroup::clear"}, "type": "methods_item", "id": "clear"}, {"body": [{"indent": 4, "type": "para", "text": ["Return a string containing the dialog script file contents corresponding\n    to this parm template group."]}, {"indent": 4, "type": "para", "text": ["Houdini saves parameter definitions in this format when saving digital\n    asset definitions (in the ", {"text": ["DialogScript"], "type": "code"}, " section of the digital asset) and\n    when saving parameter layouts of nodes."]}, {"indent": 4, "type": "para", "text": ["The default behaviour for reserved parameters is to output ", {"text": ["baseparm"], "type": "code"}, "\n    tokens for reserved parameters so that it is resistant to changes in their\n    definition. To change this, use ", {"text": ["full_info=True"], "type": "code"}, "."]}], "indent": 0, "text": [{"text": ["asDialogScript(rename_conflicting_parms=False, full_info=False)"], "type": "code"}], "role": "item", "attrs": {"cppname": "HOM_ParmTemplateGroup::asDialogScript"}, "type": "methods_item", "id": "asDialogScript"}, {"body": [{"indent": 4, "type": "para", "text": ["Set the contents of this group to match the parameters defined by the\n    given dialog script string."]}, {"indent": 4, "type": "para", "text": ["Raises ", {"_hs_sc": true, "text": "", "value": "/hom/hou/OperationFailed", "fallback_text": "hou.OperationFailed", "fullpath": "/hom/hou/OperationFailed", "scheme": "Hom", "type": "link"}, " if there is an error in the dialog script\n    contents."]}], "indent": 0, "text": [{"text": ["setToDialogScript(dialog_script)"], "type": "code"}], "role": "item", "attrs": {"cppname": "HOM_ParmTemplateGroup::setToDialogScript"}, "type": "methods_item", "id": "setToDialogScript"}, {"body": [{"indent": 4, "type": "para", "text": ["Return Python code that will recreate this group."]}, {"body": [{"body": [{"indent": 8, "type": "para", "text": ["If not ", {"text": ["None"], "type": "code"}, ", the returned code will create a Python function."]}], "indent": 4, "type": "dt", "text": [{"text": ["function_name"], "type": "code"}]}, {"body": [{"indent": 8, "type": "para", "text": ["The name of the variable that will be assigned the newly-created\n        parm template group."]}], "indent": 4, "type": "dt", "text": [{"text": ["variable_name"], "type": "code"}]}], "container": true, "type": "dt_group"}], "indent": 0, "text": [{"text": ["asCode(self, function_name=None, variable_name=None)"], "type": "code"}], "role": "item", "attrs": {"cppname": "HOM_ParmTemplateGroup::asCode"}, "type": "methods_item", "id": "asCode"}, {"body": [{"indent": 4, "type": "para", "text": ["Return the node that the parameter template group was generated from.\n    If the group was not generated from a node, then return None."]}, {"indent": 4, "type": "para", "text": ["Raises ", {"_hs_sc": true, "text": "", "value": "/hom/hou/ObjectWasDeleted", "fallback_text": "hou.ObjectWasDeleted", "fullpath": "/hom/hou/ObjectWasDeleted", "scheme": "Hom", "type": "link"}, " if the source node has been destroyed."]}], "indent": 0, "text": [{"text": ["sourceNode(self)"], "type": "code"}, "  \u2192 ", {"_hs_sc": true, "text": "", "value": "/hom/hou/Node", "fallback_text": "hou.Node", "fullpath": "/hom/hou/Node", "scheme": "Hom", "type": "link"}, " or ", {"text": ["None"], "type": "code"}], "role": "item", "attrs": {"cppname": "HOM_ParmTemplateGroup::sourceNode"}, "type": "methods_item", "id": "sourceNode"}], "container": true, "role": "item_group", "type": "methods_item_group"}], "indent": 0, "level": 1, "text": "Methods", "role": "section", "container": true, "type": "methods_section", "id": "methods"}], "summary": ["A group of parameter templates used to represent the parameter layout of\na node or the parameters in a digital asset definition."], "type": "root", "attrs": {"cppname": "HOM_ParmTemplateGroup", "type": "homclass", "group": "parmtemplates"}, "title": [{"text": "hou.", "type": "supertitle"}, "ParmTemplateGroup"]}