{"body": [{"indent": 0, "text": [{"text": "hou.", "type": "supertitle"}, "SceneViewer"], "type": "title", "level": 0}, {"body": [{"body": [{"body": [{"body": [], "indent": 0, "text": [{"text": ["selectObjects(self, prompt='Select objects', sel_index=0, allow_drag=False, quick_select=False, use_existing_selection=True, allow_multisel=True, allowed_types=('*',), icon=None, label=None, prior_selection_paths=[], prior_selection_ids=[], prior_selections=[])"], "type": "code"}, "  \u2192 tuple of Nodes"], "role": "item", "attrs": {"status": "nd", "cppname": "HOM_SceneViewer::selectObjects"}, "type": "methods_item", "id": "selectObjects"}, {"body": [], "indent": 0, "text": [{"text": ["selectGeometry(self, prompt='Select geometry', sel_index=0, allow_drag=False, quick_select=False, use_existing_selection=True, initial_selection = None, initial_selection_type = None, ordered=False, geometry_types=(), primitive_types=(), allow_obj_sel=True, icon=None, label=None, prior_selection_paths=[], prior_selection_ids=[], prior_selections=[], allow_other_sops=True, consume_selections=True)"], "type": "code"}, "  \u2192 GeometrySelection"], "role": "item", "attrs": {"status": "nd", "cppname": "HOM_SceneViewer::selectGeometry"}, "type": "methods_item", "id": "selectGeometry"}, {"body": [], "indent": 0, "text": [{"text": ["selectPositions(self, prompt='Click to specify a position', number_of_positions=1, connect_positions=True, show_coordinates=True, bbox=BoundingBox(), position_type=positionType.WorldSpace, icon=None, label=None)"], "type": "code"}, "  \u2192 tuple of Vector3s"], "role": "item", "attrs": {"status": "nd", "cppname": "HOM_SceneViewer::selectPositions"}, "type": "methods_item", "id": "selectPositions"}, {"body": [], "indent": 0, "text": [{"text": ["selectDynamics(self, prompt='Select dynamics objects', sel_index=0, allow_objects=True, allow_modifiers=False, quick_select=False, use_existing_selection=True, allow_multisel=True, icon=None, label=None, prior_selection_paths=[], prior_selection_ids=[], prior_selections=[])"], "type": "code"}, "  \u2192 tuple of ", {"_hs_sc": true, "text": "", "value": "/hom/hou/DopData", "fallback_text": "hou.DopData", "fullpath": "/hom/hou/DopData", "scheme": "Hom", "type": "link"}], "role": "item", "attrs": {"status": "nd", "cppname": "HOM_SceneViewer::selectDynamics"}, "type": "methods_item", "id": "selectDynamics"}, {"body": [], "indent": 0, "text": [{"text": ["selectDynamicsPoints(self, prompt='Select dynamics points', sel_index=0, quick_select=False, use_existing_selection=True, allow_multisel=True, only_select_points=True, object_based_point_selection=False, use_last_selected_object=False, icon=None, label=None, prior_selection_paths=[], prior_selection_ids=[], prior_selections=[])"], "type": "code"}, "  \u2192 tuple of (", {"_hs_sc": true, "text": "", "value": "/hom/hou/DopData", "fallback_text": "hou.DopData", "fullpath": "/hom/hou/DopData", "scheme": "Hom", "type": "link"}, ", ", {"_hs_sc": true, "text": "", "value": "/hom/hou/GeometrySelection", "fallback_text": "hou.GeometrySelection", "fullpath": "/hom/hou/GeometrySelection", "scheme": "Hom", "type": "link"}, ")"], "role": "item", "attrs": {"status": "nd", "cppname": "HOM_SceneViewer::selectDynamicsPoints"}, "type": "methods_item", "id": "selectDynamicsPoints"}, {"body": [], "indent": 0, "text": [{"text": ["selectDynamicsPolygons(self, prompt='Select dynamics polygons', sel_index=0, quick_select=False, use_existing_selection=True, object_based_point_selection=False, use_last_selected_object=False, icon=None, label=None, prior_selection_paths=[], prior_selection_ids=[], prior_selections=[])"], "type": "code"}, "  \u2192 tuple of (", {"_hs_sc": true, "text": "", "value": "/hom/hou/DopData", "fallback_text": "hou.DopData", "fullpath": "/hom/hou/DopData", "scheme": "Hom", "type": "link"}, ", ", {"_hs_sc": true, "text": "", "value": "/hom/hou/GeometrySelection", "fallback_text": "hou.GeometrySelection", "fullpath": "/hom/hou/GeometrySelection", "scheme": "Hom", "type": "link"}, ")"], "role": "item", "attrs": {"status": "nd", "cppname": "HOM_SceneViewer::selectDynamicsPolygons"}, "type": "methods_item", "id": "selectDynamicsPolygons"}], "container": true, "role": "item_group", "type": "methods_item_group"}], "indent": 0, "level": 2, "text": ["Prompting for a selection"], "container": true, "type": "h", "id": null}, {"body": [{"body": [{"body": [{"indent": 4, "type": "para", "text": ["Returns the name of the viewer\u2019s current tool state."]}], "indent": 0, "text": [{"text": ["currentState(self)"], "type": "code"}, "  \u2192 string"], "role": "item", "attrs": {"cppname": "HOM_SceneViewer::currentState"}, "type": "methods_item", "id": "currentState"}, {"body": [{"indent": 4, "type": "para", "text": ["Sets the current tool state of the viewer.\n    If wait_for_exit is True, then the function will not return until the\n    viewer exits the tool."]}, {"body": [{"body": [{"indent": 8, "type": "para", "text": ["A ", {"_hs_sc": true, "text": "", "value": "/hom/hou/stateGenerateMode", "fallback_text": "hou.stateGenerateMode", "fullpath": "/hom/hou/stateGenerateMode", "scheme": "Hom", "type": "link"}, " enumeration value to specify how a new\n        node should be generated, inserted inline or into a new branch."]}], "indent": 4, "type": "dt", "text": ["generate"]}, {"body": [{"indent": 8, "type": "para", "text": ["Some states reuse the current node whenever possible.  Setting this\n        argument to True requests that such states generate a new node."]}], "indent": 4, "type": "dt", "text": ["request_new_on_generate"]}], "container": true, "type": "dt_group"}], "indent": 0, "text": [{"text": ["setCurrentState(self, state, wait_for_exit=False, generate=hou.stateGenerateMode.Insert, request_new_on_generate=True)"], "type": "code"}], "role": "item", "attrs": {"cppname": "HOM_SceneViewer::setCurrentState"}, "type": "methods_item", "id": "setCurrentState"}, {"body": [{"indent": 4, "type": "para", "text": ["Enters the viewer into the node-specific tool state of the last selected\n    node.\n    If wait_for_exit is True, then the function will not return until the\n    viewer exits the tool."]}], "indent": 0, "text": [{"text": ["enterCurrentNodeState(self, wait_for_exit=False)"], "type": "code"}], "role": "item", "attrs": {"cppname": "HOM_SceneViewer::enterCurrentNodeState"}, "type": "methods_item", "id": "enterCurrentNodeState"}, {"body": [{"indent": 4, "type": "para", "text": ["Enters the viewer into view tool state.\n    If wait_for_exit is True, then the function will not return until the\n    viewer exits the tool."]}], "indent": 0, "text": [{"text": ["enterViewState(self, wait_for_exit=False)"], "type": "code"}], "role": "item", "attrs": {"cppname": "HOM_SceneViewer::enterViewState"}, "type": "methods_item", "id": "enterViewState"}, {"body": [{"indent": 4, "type": "para", "text": ["Enters the viewer into translate tool state.\n    This is available only for the node contexts that support the move tools.\n    If wait_for_exit is True, then the function will not return until the\n    viewer exits the tool."]}], "indent": 0, "text": [{"text": ["enterTranslateToolState(self, wait_for_exit=False)"], "type": "code"}], "role": "item", "attrs": {"cppname": "HOM_SceneViewer::enterTranslateToolState"}, "type": "methods_item", "id": "enterTranslateToolState"}, {"body": [{"indent": 4, "type": "para", "text": ["Enters the viewer into rotate tool state.\n    This is available only for the node contexts that support the move tools.\n    If wait_for_exit is True, then the function will not return until the\n    viewer exits the tool."]}], "indent": 0, "text": [{"text": ["enterRotateToolState(self, wait_for_exit=False)"], "type": "code"}], "role": "item", "attrs": {"cppname": "HOM_SceneViewer::enterRotateToolState"}, "type": "methods_item", "id": "enterRotateToolState"}, {"body": [{"indent": 4, "type": "para", "text": ["Enters the viewer into scale tool state.\n    This is available only for the node contexts that support the move tools.\n    If wait_for_exit is True, then the function will not return until the\n    viewer exits the tool."]}], "indent": 0, "text": [{"text": ["enterScaleToolState(self, wait_for_exit=False)"], "type": "code"}], "role": "item", "attrs": {"cppname": "HOM_SceneViewer::enterScaleToolState"}, "type": "methods_item", "id": "enterScaleToolState"}], "container": true, "role": "item_group", "type": "methods_item_group"}], "indent": 0, "level": 2, "text": ["Tool state"], "container": true, "type": "h", "id": null}, {"body": [{"body": [{"body": [{"indent": 4, "type": "para", "text": ["Return the construction plane (or grid) in the perspective viewport of\n    this viewer."]}, {"indent": 4, "type": "para", "text": ["See ", {"_hs_sc": true, "text": "", "value": "/hom/hou/ConstructionPlane", "fallback_text": "hou.ConstructionPlane", "fullpath": "/hom/hou/ConstructionPlane", "scheme": "Hom", "type": "link"}, " for more information."]}], "indent": 0, "text": [{"text": ["constructionPlane(self)"], "type": "code"}, "  \u2192 ", {"_hs_sc": true, "text": "", "value": "/hom/hou/ConstructionPlane", "fallback_text": "hou.ConstructionPlane", "fullpath": "/hom/hou/ConstructionPlane", "scheme": "Hom", "type": "link"}], "role": "item", "attrs": {"cppname": "HOM_SceneViewer::constructionPlane"}, "type": "methods_item", "id": "constructionPlane"}], "container": true, "role": "item_group", "type": "methods_item_group"}], "indent": 0, "level": 2, "text": ["Modeling"], "container": true, "type": "h", "id": null}, {"body": [{"body": [{"body": [], "indent": 0, "text": [{"text": ["viewports(self)"], "type": "code"}, "  \u2192 tuple of GeometryViewports"], "role": "item", "attrs": {"status": "nd", "cppname": "HOM_SceneViewer::viewports"}, "type": "methods_item", "id": "viewports"}, {"body": [], "indent": 0, "text": [{"text": ["findViewport(self, name)"], "type": "code"}, "  \u2192 GeometryViewport"], "role": "item", "attrs": {"status": "nd", "cppname": "HOM_SceneViewer::findViewport"}, "type": "methods_item", "id": "findViewport"}, {"body": [{"indent": 4, "type": "para", "text": ["Returns this viewer\u2019s current viewport.  The current viewport is the one\n    containing the mouse cursor.  If the cursor is not in a viewport, then the\n    selected, or active, viewport is returned."]}], "indent": 0, "text": [{"text": ["curViewport(self)"], "type": "code"}, "  \u2192 ", {"_hs_sc": true, "text": "", "value": "/hom/hou/GeometryViewport", "fallback_text": "hou.GeometryViewport", "fullpath": "/hom/hou/GeometryViewport", "scheme": "Hom", "type": "link"}], "role": "item", "attrs": {"cppname": "HOM_SceneViewer::curViewport"}, "type": "methods_item", "id": "curViewport"}, {"body": [], "indent": 0, "text": [{"text": ["setCurViewport(self, viewport)"], "type": "code"}], "role": "item", "attrs": {"status": "ni", "cppname": "HOM_SceneViewer::setCurViewport"}, "type": "methods_item", "id": "setCurViewport"}, {"body": [], "indent": 0, "text": [{"text": ["linkOrthoViewports(self)"], "type": "code"}], "role": "item", "attrs": {"status": "ni", "cppname": "HOM_SceneViewer::linkOrthoViewports"}, "type": "methods_item", "id": "linkOrthoViewports"}, {"body": [], "indent": 0, "text": [{"text": ["setLinkOrthoViewports(self, on)"], "type": "code"}], "role": "item", "attrs": {"status": "ni", "cppname": "HOM_SceneViewer::setLinkOrthoViewports"}, "type": "methods_item", "id": "setLinkOrthoViewports"}, {"body": [{"indent": 4, "type": "para", "text": ["Returns the enumerated value ", {"_hs_sc": true, "text": "", "value": "/hom/hou/geometryViewportLayout", "fallback_text": "hou.geometryViewportLayout", "fullpath": "/hom/hou/geometryViewportLayout", "scheme": "Hom", "type": "link"}, " identifying\n    how the viewports are currently arranged in the viewer."]}], "indent": 0, "text": [{"text": ["viewportLayout(self) -> [Hom:hou.geometryViewportLayout]"], "type": "code"}], "role": "item", "attrs": {"cppname": "HOM_SceneViewer::viewportLayout"}, "type": "methods_item", "id": "viewportLayout"}, {"body": [{"indent": 4, "type": "para", "text": ["Change how the viewports are arranged in the viewer by specifying a\n    ", {"_hs_sc": true, "text": "", "value": "/hom/hou/geometryViewportLayout", "fallback_text": "hou.geometryViewportLayout", "fullpath": "/hom/hou/geometryViewportLayout", "scheme": "Hom", "type": "link"}, " enum value.  When specifying a layout\n    of hou.geometryViewportLayout.Single, the ", {"text": ["single"], "type": "code"}, " parameter takes an\n    integer argument specifying which viewport to use.  A value of -1 (the\n    default) specifies the current viewport, 0 specifies the quad-view\u2019s\n    top left viewport, 1 specifies the quad-view\u2019s top-right viewport,\n    2 specifies the quad-views bottom-left viewport, and 3 specifies the\n    quad-views bottom right viewport."]}], "indent": 0, "text": [{"text": ["setViewportLayout(self, layout, single)"], "type": "code"}], "role": "item", "attrs": {"cppname": "HOM_SceneViewer::setViewportLayout"}, "type": "methods_item", "id": "setViewportLayout"}, {"body": [], "indent": 0, "text": [{"text": ["appliesToAllSplitViews(self)"], "type": "code"}], "role": "item", "attrs": {"status": "ni", "cppname": "HOM_SceneViewer::appliesToAllSplitViews"}, "type": "methods_item", "id": "appliesToAllSplitViews"}, {"body": [], "indent": 0, "text": [{"text": ["setApplyToAllSplitViews(self, on)"], "type": "code"}], "role": "item", "attrs": {"status": "ni", "cppname": "HOM_SceneViewer::setApplyToAllSplitViews"}, "type": "methods_item", "id": "setApplyToAllSplitViews"}], "container": true, "role": "item_group", "type": "methods_item_group"}], "indent": 0, "level": 2, "text": ["Split views"], "container": true, "type": "h", "id": null}, {"body": [{"body": [{"body": [], "indent": 0, "text": [{"text": ["snappingMode(self)"], "type": "code"}], "role": "item", "attrs": {"status": "nd", "cppname": "HOM_SceneViewer::snappingMode"}, "type": "methods_item", "id": "snappingMode"}, {"body": [], "indent": 0, "text": [{"text": ["setSnappingMode(self, snapping_mode)"], "type": "code"}], "role": "item", "attrs": {"status": "nd", "cppname": "HOM_SceneViewer::setSnappingMode"}, "type": "methods_item", "id": "setSnappingMode"}, {"body": [], "indent": 0, "text": [{"text": ["isSnappingToTemplates(self)"], "type": "code"}], "role": "item", "attrs": {"status": "nd", "cppname": "HOM_SceneViewer::isSnappingToTemplates"}, "type": "methods_item", "id": "isSnappingToTemplates"}, {"body": [], "indent": 0, "text": [{"text": ["setSnapToTemplates(self, on)"], "type": "code"}], "role": "item", "attrs": {"status": "nd", "cppname": "HOM_SceneViewer::setSnapToTemplates"}, "type": "methods_item", "id": "setSnapToTemplates"}, {"body": [], "indent": 0, "text": [{"text": ["isSnappingToOtherObjects(self)"], "type": "code"}], "role": "item", "attrs": {"status": "nd", "cppname": "HOM_SceneViewer::isSnappingToOtherObjects"}, "type": "methods_item", "id": "isSnappingToOtherObjects"}, {"body": [], "indent": 0, "text": [{"text": ["setSnapToOtherObjects(self, on)"], "type": "code"}], "role": "item", "attrs": {"status": "nd", "cppname": "HOM_SceneViewer::setSnapToOtherObjects"}, "type": "methods_item", "id": "setSnapToOtherObjects"}, {"body": [], "indent": 0, "text": [{"text": ["isDepthSnapping(self)"], "type": "code"}], "role": "item", "attrs": {"status": "nd", "cppname": "HOM_SceneViewer::isDepthSnapping"}, "type": "methods_item", "id": "isDepthSnapping"}, {"body": [], "indent": 0, "text": [{"text": ["setDepthSnapping(self, on)"], "type": "code"}], "role": "item", "attrs": {"status": "nd", "cppname": "HOM_SceneViewer::setDepthSnapping"}, "type": "methods_item", "id": "setDepthSnapping"}, {"body": [], "indent": 0, "text": [{"text": ["isOrientingOnSnap(self)"], "type": "code"}], "role": "item", "attrs": {"status": "nd", "cppname": "HOM_SceneViewer::isOrientingOnSnap"}, "type": "methods_item", "id": "isOrientingOnSnap"}, {"body": [], "indent": 0, "text": [{"text": ["setOrientOnSnap(self, on)"], "type": "code"}], "role": "item", "attrs": {"status": "nd", "cppname": "HOM_SceneViewer::setOrientOnSnap"}, "type": "methods_item", "id": "setOrientOnSnap"}], "container": true, "role": "item_group", "type": "methods_item_group"}], "indent": 0, "level": 2, "text": ["Snapping"], "container": true, "type": "h", "id": null}, {"body": [{"body": [{"body": [{"indent": 4, "type": "para", "text": ["Returns true if the viewer is configured to only pick visible components\n    when performing an area-based selection. This option corresponds to the\n    matching check box in the component selection button\u2019s context menu."]}], "indent": 0, "text": [{"text": ["isPickingVisibleGeometry(self)"], "type": "code"}], "role": "item", "attrs": {"cppname": "HOM_SceneViewer::isPickingVisibleGeometry"}, "type": "methods_item", "id": "isPickingVisibleGeometry"}, {"body": [{"indent": 4, "type": "para", "text": ["Turns on or off the option to select only visible components when\n    performing area-based selections such as box or brush picking."]}], "indent": 0, "text": [{"text": ["setPickingVisibleGeometry(self, on)"], "type": "code"}], "role": "item", "attrs": {"cppname": "HOM_SceneViewer::setPickingVisibleGeometry"}, "type": "methods_item", "id": "setPickingVisibleGeometry"}, {"body": [{"indent": 4, "type": "para", "text": ["Returns true if the viewer is configured to only pick fully contained\n    components when performing an area-based selection. This option corresponds\n    to the matching check box in the component selection button\u2019s context menu."]}], "indent": 0, "text": [{"text": ["isPickingContainedGeometry(self)"], "type": "code"}], "role": "item", "attrs": {"cppname": "HOM_SceneViewer::isPickingContainedGeometry"}, "type": "methods_item", "id": "isPickingContainedGeometry"}, {"body": [{"indent": 4, "type": "para", "text": ["Turns on or off the option to select only fully contained components when\n    performing area-based selections such as box or brush picking."]}], "indent": 0, "text": [{"text": ["setPickingContainedGeometry(self, on)"], "type": "code"}], "role": "item", "attrs": {"cppname": "HOM_SceneViewer::setPickingContainedGeometry"}, "type": "methods_item", "id": "setPickingContainedGeometry"}, {"body": [{"indent": 4, "type": "para", "text": ["Returns the selection mode of the viewer of type ", {"_hs_sc": true, "text": "", "value": "/hom/hou/selectionMode", "fallback_text": "hou.selectionMode", "fullpath": "/hom/hou/selectionMode", "scheme": "Hom", "type": "link"}, "."]}], "indent": 0, "text": [{"text": ["selectionMode(self)"], "type": "code"}], "role": "item", "attrs": {"cppname": "HOM_SceneViewer::selectionMode"}, "type": "methods_item", "id": "selectionMode"}, {"body": [{"indent": 4, "type": "para", "text": ["Sets the selection mode of this view.\n    The value for 'selection_mode' must be from ", {"_hs_sc": true, "text": "", "value": "/hom/hou/selectionMode", "fallback_text": "hou.selectionMode", "fullpath": "/hom/hou/selectionMode", "scheme": "Hom", "type": "link"}, "."]}], "indent": 0, "text": [{"text": ["setSelectionMode(self, selection_mode)"], "type": "code"}], "role": "item", "attrs": {"cppname": "HOM_SceneViewer::setSelectionMode"}, "type": "methods_item", "id": "setSelectionMode"}, {"body": [{"indent": 4, "type": "para", "text": ["Returns true if group, attribute, or connectivity information will be used\n    to automatically expand selections made in this viewer. This option\n    corresponds to the matching check box in the component selection\n    button\u2019s context menu."]}], "indent": 0, "text": [{"text": ["isGroupPicking(self)"], "type": "code"}], "role": "item", "attrs": {"cppname": "HOM_SceneViewer::isGroupPicking"}, "type": "methods_item", "id": "isGroupPicking"}, {"body": [{"indent": 4, "type": "para", "text": ["Turns on or off the group, attribute, or connectivity based picking. When\n    turned on, the group list gadget is automatically made visible."]}], "indent": 0, "text": [{"text": ["setGroupPicking(self, on)"], "type": "code"}], "role": "item", "attrs": {"cppname": "HOM_SceneViewer::setGroupPicking"}, "type": "methods_item", "id": "setGroupPicking"}, {"body": [{"indent": 4, "type": "para", "text": ["Returns true if selections made in this viewer will automatically expand\n    to include the whole geometry. This option corresponds to the matching\n    check box in the component selection button\u2019s context menu."]}], "indent": 0, "text": [{"text": ["isWholeGeometryPicking(self)"], "type": "code"}], "role": "item", "attrs": {"cppname": "HOM_SceneViewer::isWholeGeometryPicking"}, "type": "methods_item", "id": "isWholeGeometryPicking"}, {"body": [{"indent": 4, "type": "para", "text": ["Turns on or off the option to expand selections made in this viewer to\n    include the entire geometry."]}], "indent": 0, "text": [{"text": ["setWholeGeometryPicking(self, on)"], "type": "code"}], "role": "item", "attrs": {"cppname": "HOM_SceneViewer::setWholeGeometryPicking"}, "type": "methods_item", "id": "setWholeGeometryPicking"}, {"body": [{"indent": 4, "type": "para", "text": ["Returns true if secure selection is turned on in this viewer. This option\n    corresponds to the secure selection option in the select tool\u2019s context\n    menu."]}], "indent": 0, "text": [{"text": ["isSecureSelection(self)"], "type": "code"}], "role": "item", "attrs": {"cppname": "HOM_SceneViewer::isSecureSelection"}, "type": "methods_item", "id": "isSecureSelection"}, {"body": [{"indent": 4, "type": "para", "text": ["Turns on or off the secure selection option in this viewer."]}], "indent": 0, "text": [{"text": ["setSecureSelection(self, on)"], "type": "code"}], "role": "item", "attrs": {"cppname": "HOM_SceneViewer::setSecureSelection"}, "type": "methods_item", "id": "setSecureSelection"}, {"body": [{"indent": 4, "type": "para", "text": ["Returns true if selections made in this viewer will pick from the Current\n    SOP. If not, the pick occurs on the Display SOP. This option corresponds\n    to the current/display option in the component selection button\u2019s context\n    menu."]}], "indent": 0, "text": [{"text": ["isPickingCurrentNode(self)"], "type": "code"}], "role": "item", "attrs": {"cppname": "HOM_SceneViewer::isPickingCurrentNode"}, "type": "methods_item", "id": "isPickingCurrentNode"}, {"body": [{"indent": 4, "type": "para", "text": ["Tells this viewer whether picks should be made on the Current SOP or\n    on the Display SOP."]}], "indent": 0, "text": [{"text": ["setPickingCurrentNode(self, on)"], "type": "code"}], "role": "item", "attrs": {"cppname": "HOM_SceneViewer::setPickingCurrentNode"}, "type": "methods_item", "id": "setPickingCurrentNode"}, {"body": [{"indent": 4, "type": "para", "text": ["Returns the type of geometry that will be picked in this viewer. This\n    option corresponds to the component types selectable in the component\n    selection button\u2019s context menu."]}], "indent": 0, "text": [{"text": ["pickGeometryType(self)"], "type": "code"}], "role": "item", "attrs": {"cppname": "HOM_SceneViewer::pickGeometryType"}, "type": "methods_item", "id": "pickGeometryType"}, {"body": [{"indent": 4, "type": "para", "text": ["Sets the type of geometry that will be picked in this viewer. This\n    value can be changed at any time by the user, or when a selector is\n    invoked."]}], "indent": 0, "text": [{"text": ["setPickGeometryType(self, geometry_type)"], "type": "code"}], "role": "item", "attrs": {"cppname": "HOM_SceneViewer::setPickGeometryType"}, "type": "methods_item", "id": "setPickGeometryType"}, {"body": [{"indent": 4, "type": "para", "text": ["Returns the style of area picking currently being used by this viewer.\n    This option corresponds to the picking style specified in the select\n    tool\u2019s context menu."]}], "indent": 0, "text": [{"text": ["pickStyle(self)"], "type": "code"}], "role": "item", "attrs": {"cppname": "HOM_SceneViewer::pickStyle"}, "type": "methods_item", "id": "pickStyle"}, {"body": [{"indent": 4, "type": "para", "text": ["Sets the style of area picking to be used by this viewer."]}], "indent": 0, "text": [{"text": ["setPickStyle(self, style)"], "type": "code"}], "role": "item", "attrs": {"cppname": "HOM_SceneViewer::setPickStyle"}, "type": "methods_item", "id": "setPickStyle"}, {"body": [{"indent": 4, "type": "para", "text": ["Returns the manner in which additional selection are combined with the\n    existing selection. This option corresponds to the picking modifier\n    in the select tool context menu."]}], "indent": 0, "text": [{"text": ["pickModifier(self)"], "type": "code"}], "role": "item", "attrs": {"cppname": "HOM_SceneViewer::pickModifier"}, "type": "methods_item", "id": "pickModifier"}, {"body": [{"indent": 4, "type": "para", "text": ["Sets the method used to modify the existing selection when a new selection\n    is made. Modifier keys can still be used to alter this behavior. Only the\n    default operation (with no modifier keys) is affected by this setting."]}], "indent": 0, "text": [{"text": ["setPickModifier(self, modifier)"], "type": "code"}], "role": "item", "attrs": {"cppname": "HOM_SceneViewer::setPickModifier"}, "type": "methods_item", "id": "setPickModifier"}, {"body": [{"indent": 4, "type": "para", "text": ["Returns a value indicating whether the user is able to pick front facing\n    components, back facing components, or both. This option corresponds to\n    the frant and back facing options in the component selection button\u2019s\n    context menu."]}], "indent": 0, "text": [{"text": ["pickFacing(self)"], "type": "code"}], "role": "item", "attrs": {"cppname": "HOM_SceneViewer::pickFacing"}, "type": "methods_item", "id": "pickFacing"}, {"body": [{"indent": 4, "type": "para", "text": ["Sets the option of whether to restrict selection to front facing, back\n    facing, or either type of components."]}], "indent": 0, "text": [{"text": ["setPickFacing(self, facing)"], "type": "code"}], "role": "item", "attrs": {"cppname": "HOM_SceneViewer::setPickFacing"}, "type": "methods_item", "id": "setPickFacing"}, {"body": [], "indent": 0, "text": [{"text": ["isShowingObjectsAtSopLevel(self)"], "type": "code"}], "role": "item", "attrs": {"status": "ni", "cppname": "HOM_SceneViewer::isShowingObjectsAtSopLevel"}, "type": "methods_item", "id": "isShowingObjectsAtSopLevel"}, {"body": [], "indent": 0, "text": [{"text": ["setShowObjectsAtSopLevel(self, on)"], "type": "code"}], "role": "item", "attrs": {"status": "ni", "cppname": "HOM_SceneViewer::setShowObjectsAtSopLevel"}, "type": "methods_item", "id": "setShowObjectsAtSopLevel"}, {"body": [], "indent": 0, "text": [{"text": ["isCreateInContext(self) -> bool"], "type": "code"}], "role": "item", "attrs": {"status": "nd", "cppname": "HOM_SceneViewer::isCreateInContext"}, "type": "methods_item", "id": "isCreateInContext"}, {"body": [], "indent": 0, "text": [{"text": ["displayedNodeBehaviour(self)"], "type": "code"}], "role": "item", "attrs": {"status": "ni", "cppname": "HOM_SceneViewer::displayedNodeBehaviour"}, "type": "methods_item", "id": "displayedNodeBehaviour"}, {"body": [], "indent": 0, "text": [{"text": ["setDisplayedNodeBehaviour(self, behaviour)"], "type": "code"}], "role": "item", "attrs": {"status": "ni", "cppname": "HOM_SceneViewer::setDisplayedNodeBehaviour"}, "type": "methods_item", "id": "setDisplayedNodeBehaviour"}], "container": true, "role": "item_group", "type": "methods_item_group"}], "indent": 0, "level": 2, "text": ["View options"], "container": true, "type": "h", "id": null}, {"body": [{"body": [{"body": [{"indent": 4, "type": "para", "text": ["Returns true if the group list gadget has been turned on for this viewer.\n    This function only refers to the option to show the group list when not\n    selecting groups in the viewer. In that case the group list will be\n    visible, but this function may still return False."]}], "indent": 0, "text": [{"text": ["isGroupListVisible(self)"], "type": "code"}], "role": "item", "attrs": {"cppname": "HOM_SceneViewer::isGroupListVisible"}, "type": "methods_item", "id": "isGroupListVisible"}, {"body": [{"indent": 4, "type": "para", "text": ["Turns on or off the group list gadget for this viewer."]}], "indent": 0, "text": [{"text": ["setGroupListVisible(self, on)"], "type": "code"}], "role": "item", "attrs": {"cppname": "HOM_SceneViewer::setGroupListVisible"}, "type": "methods_item", "id": "setGroupListVisible"}, {"body": [{"indent": 4, "type": "para", "text": ["Returns true if the group list gadget is configured to color geometry in\n    the viewer based on group membership or attribute value."]}], "indent": 0, "text": [{"text": ["isGroupListColoringGeometry(self)"], "type": "code"}], "role": "item", "attrs": {"cppname": "HOM_SceneViewer::isGroupListColoringGeometry"}, "type": "methods_item", "id": "isGroupListColoringGeometry"}, {"body": [{"indent": 4, "type": "para", "text": ["Turns on or off the group list gadget to coloring of geometry in\n    the viewer based on group membership or attribute value."]}], "indent": 0, "text": [{"text": ["setGroupListColoringGeometry(self, on)"], "type": "code"}], "role": "item", "attrs": {"cppname": "HOM_SceneViewer::setGroupListColoringGeometry"}, "type": "methods_item", "id": "setGroupListColoringGeometry"}, {"body": [{"indent": 4, "type": "para", "text": ["Returns true if the group list gadget is including empty groups in its\n    list."]}], "indent": 0, "text": [{"text": ["isGroupListShowingEmptyGroups(self)"], "type": "code"}], "role": "item", "attrs": {"cppname": "HOM_SceneViewer::isGroupListShowingEmptyGroups"}, "type": "methods_item", "id": "isGroupListShowingEmptyGroups"}, {"body": [{"indent": 4, "type": "para", "text": ["Turns on or off the display of empty groups in the group list gadget."]}], "indent": 0, "text": [{"text": ["setGroupListShowingEmptyGroups(self, on)"], "type": "code"}], "role": "item", "attrs": {"cppname": "HOM_SceneViewer::setGroupListShowingEmptyGroups"}, "type": "methods_item", "id": "setGroupListShowingEmptyGroups"}, {"body": [{"indent": 4, "type": "para", "text": ["Returns true if the group list is showing only groups that contain one or\n    more selected or pre-selected components."]}], "indent": 0, "text": [{"text": ["isGroupListShowingOnlyPreSelectedGroups(self)"], "type": "code"}], "role": "item", "attrs": {"cppname": "HOM_SceneViewer::isGroupListShowingOnlyPreSelectedGroups"}, "type": "methods_item", "id": "isGroupListShowingOnlyPreSelectedGroups"}, {"body": [{"indent": 4, "type": "para", "text": ["Turns on or off the trimming of the group list to show only groups that\n    contain one or more selected or pre-selected components."]}], "indent": 0, "text": [{"text": ["setGroupListShowingOnlyPreSelectedGroups(self, on)"], "type": "code"}], "role": "item", "attrs": {"cppname": "HOM_SceneViewer::setGroupListShowingOnlyPreSelectedGroups"}, "type": "methods_item", "id": "setGroupListShowingOnlyPreSelectedGroups"}, {"body": [{"indent": 4, "type": "para", "text": ["Returns true if the group list will condense the hierarchy of groups\n    defined by a string attribute representing a path."]}], "indent": 0, "text": [{"text": ["isGroupListCondensingPathHierarchies(self)"], "type": "code"}], "role": "item", "attrs": {"cppname": "HOM_SceneViewer::isGroupListCondensingPathHierarchies"}, "type": "methods_item", "id": "isGroupListCondensingPathHierarchies"}, {"body": [{"indent": 4, "type": "para", "text": ["Turns on or off the condensing of the hierarchy in the group list.\n    This applies to components grouped by string attributes representing\n    a path. Turning this option on can fit more information into the\n    list, but can make it harder to distinguish levels in the hierarchy."]}], "indent": 0, "text": [{"text": ["setGroupListCondensingPathHierarchies(self, on)"], "type": "code"}], "role": "item", "attrs": {"cppname": "HOM_SceneViewer::setGroupListCondensingPathHierarchies"}, "type": "methods_item", "id": "setGroupListCondensingPathHierarchies"}, {"body": [{"indent": 4, "type": "para", "text": ["Returns the width and height in inches of the group list gadget."]}], "indent": 0, "text": [{"text": ["groupListSize(self)"], "type": "code"}], "role": "item", "attrs": {"cppname": "HOM_SceneViewer::groupListSize"}, "type": "methods_item", "id": "groupListSize"}, {"body": [{"indent": 4, "type": "para", "text": ["Sets the size in inches of the group list gadget."]}], "indent": 0, "text": [{"text": ["setGroupListSize(self, width, height)"], "type": "code"}], "role": "item", "attrs": {"cppname": "HOM_SceneViewer::setGroupListSize"}, "type": "methods_item", "id": "setGroupListSize"}, {"body": [{"indent": 4, "type": "para", "text": ["Returns the type of component listed in the group list gadget."]}], "indent": 0, "text": [{"text": ["groupListType(self)"], "type": "code"}], "role": "item", "attrs": {"cppname": "HOM_SceneViewer::groupListType"}, "type": "methods_item", "id": "groupListType"}, {"body": [{"indent": 4, "type": "para", "text": ["Sets the type of component listed in the group list gadget. This can\n    be set to a specific component type or to follow the current component\n    selection type."]}], "indent": 0, "text": [{"text": ["setGroupListType(self, group_list_type)"], "type": "code"}], "role": "item", "attrs": {"cppname": "HOM_SceneViewer::setGroupListType"}, "type": "methods_item", "id": "setGroupListType"}, {"body": [{"indent": 4, "type": "para", "text": ["Returns true if the group list gadget has been turned on for this viewer."]}], "indent": 0, "text": [{"text": ["groupListMask(self)"], "type": "code"}], "role": "item", "attrs": {"cppname": "HOM_SceneViewer::groupListMask"}, "type": "methods_item", "id": "groupListMask"}, {"body": [{"indent": 4, "type": "para", "text": ["Sets the mask value in the group list gadget for this viewer. This can\n    be a filter applied to the comonent groups, or an attribute name (starting\n    with an @ charater), or a connectivity type."]}], "indent": 0, "text": [{"text": ["setGroupListMask(self, mask)"], "type": "code"}], "role": "item", "attrs": {"cppname": "HOM_SceneViewer::setGroupListMask"}, "type": "methods_item", "id": "setGroupListMask"}], "container": true, "role": "item_group", "type": "methods_item_group"}], "indent": 0, "level": 2, "text": ["Group list"], "container": true, "type": "h", "id": null}, {"body": [{"body": [{"body": [], "indent": 0, "text": [{"text": ["memories(self)"], "type": "code"}, "  \u2192 dict of ints to GeometryViewportSettings"], "role": "item", "attrs": {"status": "ni", "cppname": "HOM_SceneViewer::memories"}, "type": "methods_item", "id": "memories"}, {"body": [], "indent": 0, "text": [{"text": ["createMemoryFromViewport(self, viewport, number)"], "type": "code"}, "  \u2192 GeometryViewportSettings"], "role": "item", "attrs": {"status": "ni", "cppname": "HOM_SceneViewer::createMemoryFromViewport"}, "type": "methods_item", "id": "createMemoryFromViewport"}, {"body": [], "indent": 0, "text": [{"text": ["loadFromMemoryToViewport(self, viewport, number)"], "type": "code"}], "role": "item", "attrs": {"status": "ni", "cppname": "HOM_SceneViewer::loadFromMemoryToViewport"}, "type": "methods_item", "id": "loadFromMemoryToViewport"}, {"body": [], "indent": 0, "text": [{"text": ["deleteAllMemories(self)"], "type": "code"}], "role": "item", "attrs": {"status": "ni", "cppname": "HOM_SceneViewer::deleteAllMemories"}, "type": "methods_item", "id": "deleteAllMemories"}, {"body": [], "indent": 0, "text": [{"text": ["showsMemoriesAtBottom(self)"], "type": "code"}], "role": "item", "attrs": {"status": "ni", "cppname": "HOM_SceneViewer::showsMemoriesAtBottom"}, "type": "methods_item", "id": "showsMemoriesAtBottom"}, {"body": [], "indent": 0, "text": [{"text": ["setShowMemoriesAtBottom(self, on)"], "type": "code"}], "role": "item", "attrs": {"status": "ni", "cppname": "HOM_SceneViewer::setShowMemoriesAtBottom"}, "type": "methods_item", "id": "setShowMemoriesAtBottom"}, {"body": [], "indent": 0, "text": [{"text": ["createSnapshotFromViewport(self, viewport, number)"], "type": "code"}], "role": "item", "attrs": {"status": "ni", "cppname": "HOM_SceneViewer::createSnapshotFromViewport"}, "type": "methods_item", "id": "createSnapshotFromViewport"}, {"body": [], "indent": 0, "text": [{"text": ["showSnapshot(self, number)"], "type": "code"}], "role": "item", "attrs": {"status": "ni", "cppname": "HOM_SceneViewer::showSnapshot"}, "type": "methods_item", "id": "showSnapshot"}, {"body": [], "indent": 0, "text": [{"text": ["hideSnapshot(self, number)"], "type": "code"}], "role": "item", "attrs": {"status": "ni", "cppname": "HOM_SceneViewer::hideSnapshot"}, "type": "methods_item", "id": "hideSnapshot"}, {"body": [], "indent": 0, "text": [{"text": ["showsSnapshotsAtSourceFrame(self)"], "type": "code"}], "role": "item", "attrs": {"status": "ni", "cppname": "HOM_SceneViewer::showsSnapshotsAtSourceFrame"}, "type": "methods_item", "id": "showsSnapshotsAtSourceFrame"}, {"body": [], "indent": 0, "text": [{"text": ["setShowSnapshotsAtSourceFrame(self, on)"], "type": "code"}], "role": "item", "attrs": {"status": "ni", "cppname": "HOM_SceneViewer::setShowSnapshotsAtSourceFrame"}, "type": "methods_item", "id": "setShowSnapshotsAtSourceFrame"}, {"body": [], "indent": 0, "text": [{"text": ["snapshotAlphaBlend(self)"], "type": "code"}], "role": "item", "attrs": {"status": "ni", "cppname": "HOM_SceneViewer::snapshotAlphaBlend"}, "type": "methods_item", "id": "snapshotAlphaBlend"}, {"body": [], "indent": 0, "text": [{"text": ["setSnapshotAlphaBlend(self, alpha)"], "type": "code"}], "role": "item", "attrs": {"status": "ni", "cppname": "HOM_SceneViewer::setSnapshotAlphaBlend"}, "type": "methods_item", "id": "setSnapshotAlphaBlend"}, {"body": [], "indent": 0, "text": [{"text": ["snapshotObjectMask(self)"], "type": "code"}], "role": "item", "attrs": {"status": "ni", "cppname": "HOM_SceneViewer::snapshotObjectMask"}, "type": "methods_item", "id": "snapshotObjectMask"}, {"body": [], "indent": 0, "text": [{"text": ["setSnapshotObjectMask(self, mask)"], "type": "code"}], "role": "item", "attrs": {"status": "ni", "cppname": "HOM_SceneViewer::setSnapshotObjectMask"}, "type": "methods_item", "id": "setSnapshotObjectMask"}, {"body": [], "indent": 0, "text": [{"text": ["showsHandlesInSnapshots(self)"], "type": "code"}], "role": "item", "attrs": {"status": "ni", "cppname": "HOM_SceneViewer::showsHandlesInSnapshots"}, "type": "methods_item", "id": "showsHandlesInSnapshots"}, {"body": [], "indent": 0, "text": [{"text": ["setShowHandlesInSnapshots(self, on)"], "type": "code"}], "role": "item", "attrs": {"status": "ni", "cppname": "HOM_SceneViewer::setShowHandlesInSnapshots"}, "type": "methods_item", "id": "setShowHandlesInSnapshots"}], "container": true, "role": "item_group", "type": "methods_item_group"}], "indent": 0, "level": 2, "text": ["Memories and snapshots"], "container": true, "type": "h", "id": null}, {"body": [{"body": [{"body": [], "indent": 0, "text": [{"text": ["render(self)"], "type": "code"}], "role": "item", "attrs": {"status": "ni", "cppname": "HOM_SceneViewer::render"}, "type": "methods_item", "id": "render"}, {"body": [], "indent": 0, "text": [{"text": ["renderOutput(self)"], "type": "code"}], "role": "item", "attrs": {"status": "ni", "cppname": "HOM_SceneViewer::renderOutput"}, "type": "methods_item", "id": "renderOutput"}, {"body": [], "indent": 0, "text": [{"text": ["setRenderOutputToBuiltIn(self, renderer)"], "type": "code"}], "role": "item", "attrs": {"status": "ni", "cppname": "HOM_SceneViewer::setRenderOutputToBuiltIn"}, "type": "methods_item", "id": "setRenderOutputToBuiltIn"}, {"body": [], "indent": 0, "text": [{"text": ["setRenderOutputToRop(self, rop_node)"], "type": "code"}], "role": "item", "attrs": {"status": "ni", "cppname": "HOM_SceneViewer::setRenderOutputToRop"}, "type": "methods_item", "id": "setRenderOutputToRop"}, {"body": [], "indent": 0, "text": [{"text": ["setFlipbookOptions(self, options)"], "type": "code"}], "role": "item", "attrs": {"status": "ni", "cppname": "HOM_SceneViewer::setFlipbookOptions"}, "type": "methods_item", "id": "setFlipbookOptions"}, {"body": [{"indent": 4, "type": "para", "text": ["Access to the flipbook dialog settings, which can be queried, set, or \n    copied."]}], "indent": 0, "text": [{"text": ["flipbookSettings(self)"], "type": "code"}, "  \u2192 ", {"text": ["FlipbookSettings"], "type": "code"}], "role": "item", "attrs": {"cppname": "HOM_SceneViewer::flipbookSettings"}, "type": "methods_item", "id": "flipbookSettings"}, {"body": [{"indent": 4, "type": "para", "text": ["Launch a flipbook for ", {"text": ["viewport"], "type": "code"}, " if specified or the current viewport if\n    ", {"text": ["viewport"], "type": "code"}, " is not. Optionally a FlipbookSettings object can be passed to\n    ", {"text": ["settings"], "type": "code"}, " which will override the current settings. This override will\n    only affect the current flipbook and not change the dialog settings.\n    If ", {"text": ["open_dialog"], "type": "code"}, " is True, the flipbook dialog is presented to the user,\n    otherwise a flipbook is launched immediately."]}], "indent": 0, "text": [{"text": ["flipbook(self, viewport=None, settings=None, open_dialog=False)"], "type": "code"}], "role": "item", "attrs": {"cppname": "HOM_SceneViewer::flipbook"}, "type": "methods_item", "id": "flipbook"}], "container": true, "role": "item_group", "type": "methods_item_group"}], "indent": 0, "level": 2, "text": ["Quick renders and flipbooks"], "container": true, "type": "h", "id": null}, {"body": [{"body": [{"body": [], "indent": 0, "text": [{"text": ["showsNodeToolbarAtTop(self)"], "type": "code"}], "role": "item", "attrs": {"status": "ni", "cppname": "HOM_SceneViewer::showsNodeToolbarAtTop"}, "type": "methods_item", "id": "showsNodeToolbarAtTop"}, {"body": [], "indent": 0, "text": [{"text": ["setShowNodeToolbarAtTop(self, on)"], "type": "code"}], "role": "item", "attrs": {"status": "ni", "cppname": "HOM_SceneViewer::setShowNodeToolbarAtTop"}, "type": "methods_item", "id": "setShowNodeToolbarAtTop"}, {"body": [], "indent": 0, "text": [{"text": ["showsPathAtTop(self)"], "type": "code"}], "role": "item", "attrs": {"status": "ni", "cppname": "HOM_SceneViewer::showsPathAtTop"}, "type": "methods_item", "id": "showsPathAtTop"}, {"body": [], "indent": 0, "text": [{"text": ["setShowPathAtTop(self, on)"], "type": "code"}], "role": "item", "attrs": {"status": "ni", "cppname": "HOM_SceneViewer::setShowPathAtTop"}, "type": "methods_item", "id": "setShowPathAtTop"}, {"body": [], "indent": 0, "text": [{"text": ["showsToolsAtBottom(self)"], "type": "code"}], "role": "item", "attrs": {"status": "ni", "cppname": "HOM_SceneViewer::showsToolsAtBottom"}, "type": "methods_item", "id": "showsToolsAtBottom"}, {"body": [], "indent": 0, "text": [{"text": ["setShowToolsAtBottom(self, on)"], "type": "code"}], "role": "item", "attrs": {"status": "ni", "cppname": "HOM_SceneViewer::setShowToolsAtBottom"}, "type": "methods_item", "id": "setShowToolsAtBottom"}, {"body": [], "indent": 0, "text": [{"text": ["showsDisplayToolsAtRight(self)"], "type": "code"}], "role": "item", "attrs": {"status": "ni", "cppname": "HOM_SceneViewer::showsDisplayToolsAtRight"}, "type": "methods_item", "id": "showsDisplayToolsAtRight"}, {"body": [], "indent": 0, "text": [{"text": ["setShowDisplayToolsAtRight(self, on)"], "type": "code"}], "role": "item", "attrs": {"status": "ni", "cppname": "HOM_SceneViewer::setShowDisplayToolsAtRight"}, "type": "methods_item", "id": "setShowDisplayToolsAtRight"}, {"body": [], "indent": 0, "text": [{"text": ["showsSelectionToolsAtLeft(self)"], "type": "code"}], "role": "item", "attrs": {"status": "ni", "cppname": "HOM_SceneViewer::showsSelectionToolsAtLeft"}, "type": "methods_item", "id": "showsSelectionToolsAtLeft"}, {"body": [], "indent": 0, "text": [{"text": ["setShowSelectionToolsAtLeft(self, on)"], "type": "code"}], "role": "item", "attrs": {"status": "ni", "cppname": "HOM_SceneViewer::setShowSelectionToolsAtLeft"}, "type": "methods_item", "id": "setShowSelectionToolsAtLeft"}], "container": true, "role": "item_group", "type": "methods_item_group"}], "indent": 0, "level": 2, "text": ["Toolbars"], "container": true, "type": "h", "id": null}, {"body": [{"body": [{"body": [{"indent": 4, "type": "para", "text": ["Run the named shelf tool in the current viewport."]}], "indent": 0, "text": [{"text": ["runShelfTool(self, tool_name)"], "type": "code"}], "role": "item", "attrs": {"cppname": "HOM_SceneViewer::runShelfTool"}, "type": "methods_item", "id": "runShelfTool"}, {"body": [{"indent": 4, "type": "para", "text": ["Launch the named radial menu in the current viewport."]}], "indent": 0, "text": [{"text": ["displayRadialMenu(self, name)"], "type": "code"}], "role": "item", "attrs": {"cppname": "HOM_SceneViewer::popupRadialMenu"}, "type": "methods_item", "id": "displayRadialMenu"}], "container": true, "role": "item_group", "type": "methods_item_group"}], "indent": 0, "level": 2, "text": ["Interaction"], "container": true, "type": "h", "id": null}, {"body": [{"body": [{"body": [{"indent": 4, "type": "para", "text": [""]}], "indent": 0, "text": [{"text": ["isOpen(self)"], "type": "code"}, "  \u2192 bool"], "role": "item", "attrs": {"status": "ni", "cppname": "HOM_SceneViewer::isOpen"}, "type": "methods_item", "id": "isOpen"}, {"body": [], "indent": 0, "text": [{"text": ["viewerType(self)"], "type": "code"}, "  \u2192 hou.viewerType enum value"], "role": "item", "attrs": {"status": "ni", "cppname": "HOM_SceneViewer::viewerType"}, "type": "methods_item", "id": "viewerType"}], "container": true, "role": "item_group", "type": "methods_item_group"}], "indent": 0, "level": 2, "text": ["Metadata"], "container": true, "type": "h", "id": null}], "indent": 0, "level": 1, "text": "Methods", "role": "section", "container": true, "type": "methods_section", "id": "methods"}, {"body": [{"body": [{"indent": 0, "blevel": 2, "type": "bullet", "text": [{"_hs_sc": true, "text": "", "value": "/commands/vieweroption", "fallback_text": "vieweroption", "fullpath": "/commands/vieweroption", "scheme": "Cmd", "type": "link"}]}, {"indent": 0, "blevel": 2, "type": "bullet", "text": [{"_hs_sc": true, "text": "", "value": "/commands/viewlayout", "fallback_text": "viewlayout", "fullpath": "/commands/viewlayout", "scheme": "Cmd", "type": "link"}]}, {"indent": 0, "blevel": 2, "type": "bullet", "text": [{"_hs_sc": true, "text": "", "value": "/commands/viewls", "fallback_text": "viewls", "fullpath": "/commands/viewls", "scheme": "Cmd", "type": "link"}]}, {"indent": 0, "blevel": 2, "type": "bullet", "text": [{"_hs_sc": true, "text": "", "value": "/commands/viewsnapshot", "fallback_text": "viewsnapshot", "fullpath": "/commands/viewsnapshot", "scheme": "Cmd", "type": "link"}]}, {"indent": 0, "blevel": 2, "type": "bullet", "text": [{"_hs_sc": true, "text": "", "value": "/commands/viewsnapshotoption", "fallback_text": "viewsnapshotoption", "fullpath": "/commands/viewsnapshotoption", "scheme": "Cmd", "type": "link"}]}], "container": true, "type": "bullet_group"}], "indent": 0, "level": 1, "text": "Replaces", "role": "section", "container": true, "type": "replaces_section", "id": "replaces"}], "replaces": "/commands/vieweroption /commands/viewlayout /commands/viewls /commands/viewsnapshot /commands/viewsnapshotoption", "type": "root", "attrs": {"status": "nd", "cppname": "HOM_SceneViewer", "type": "homclass", "superclass": "hou.PathBasedPaneTab", "group": "view"}, "title": [{"text": "hou.", "type": "supertitle"}, "SceneViewer"]}