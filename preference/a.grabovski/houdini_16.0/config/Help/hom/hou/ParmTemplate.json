{"body": [{"indent": 0, "text": [{"text": "hou.", "type": "supertitle"}, "ParmTemplate"], "type": "title", "level": 0}, {"indent": 0, "type": "summary", "text": ["Describes a parameter tuple (its name, type, etc.).  This is base class for\nall parameter templates."]}, {"indent": 0, "type": "para", "text": ["ParmTemplates are most often used when describing a parameter in a digital\nasset definition\u2019s parameter interface or when describing an individual\nnode\u2019s parameter layout (including its spare parameters).  A ParmTemplate\ndescribes a parameter and the type of data it holds, but it does not store the\ncurrent value of a parameter; only ", {"_hs_sc": true, "text": "", "value": "/hom/hou/Parm", "fallback_text": "hou.Parm", "fullpath": "/hom/hou/Parm", "scheme": "Hom", "type": "link"}, " objects inside\n", {"_hs_sc": true, "text": "", "value": "/hom/hou/ParmTuple", "fallback_text": "hou.ParmTuple", "fullpath": "/hom/hou/ParmTuple", "scheme": "Hom", "type": "link"}, " objects actually store parameter values.  You can think of\na ", {"_hs_sc": true, "text": "", "value": "/hom/hou/ParmTuple", "fallback_text": "hou.ParmTuple", "fullpath": "/hom/hou/ParmTuple", "scheme": "Hom", "type": "link"}, " as an instance of a ParmTemplate.  For example,\nthe ", {"text": ["\"t\""], "type": "code"}, " parm tuple on geometry objects can be described by a\n", {"_hs_sc": true, "text": "", "value": "/hom/hou/FloatParmTemplate", "fallback_text": "hou.FloatParmTemplate", "fullpath": "/hom/hou/FloatParmTemplate", "scheme": "Hom", "type": "link"}, " \u2013 it has a label of ", {"text": ["\"Transform\""], "type": "code"}, ", a data type of\n", {"_hs_sc": true, "fragment": "#Float", "text": "", "value": "/hom/hou/parmData#Float", "fallback_text": "hou.parmData.Float", "fullpath": "/hom/hou/parmData#Float", "scheme": "Hom", "type": "link"}, ", 3 components, a naming scheme of\n", {"_hs_sc": true, "fragment": "#XYZW", "text": "", "value": "/hom/hou/parmNamingScheme#XYZW", "fallback_text": "hou.parmNamingScheme.XYZW", "fullpath": "/hom/hou/parmNamingScheme#XYZW", "scheme": "Hom", "type": "link"}, ", etc.  Each geometry object node has a\n", {"_hs_sc": true, "text": "", "value": "/hom/hou/ParmTuple", "fallback_text": "hou.ParmTuple", "fullpath": "/hom/hou/ParmTuple", "scheme": "Hom", "type": "link"}, " named ", {"text": ["\"t\""], "type": "code"}, " that uses this ParmTemplate."]}, {"indent": 0, "type": "para", "text": ["Note that ParmTemplate objects are just data containers, and they have no\nlive relationship with objects in Houdini.  For example, a ", {"_hs_sc": true, "text": "", "value": "/hom/hou/Node", "fallback_text": "hou.Node", "fullpath": "/hom/hou/Node", "scheme": "Hom", "type": "link"}, "\nobject corresponds directly to a node in Houdini, and if the node is renamed\nin Houdini ", {"_hs_sc": true, "fragment": "#name", "text": "", "value": "/hom/hou/Node#name", "fallback_text": "hou.Node.name", "fullpath": "/hom/hou/Node#name", "scheme": "Hom", "type": "link"}, " will return the new name.  ParmTemplates,\non the other hand, do not have a live relationship.  Creating a ParmTemplate\nbased on a spare parameter or asset definition parameter will simply copy the\ninformation into the ParmTemplate object, and modifying the object will\nnot affect the spare parameter/asset parameter."]}, {"indent": 0, "type": "para", "text": ["Note also that ParmTemplate objects are always instances of a subclass of this\nclass, so you cannot construct an instance of this class directly."]}, {"indent": 0, "type": "para", "text": ["To manipulate the parameters of a digital asset, you can retrieve the asset\u2019s\ncurrent set of ParmTemplates into a ", {"_hs_sc": true, "text": "", "value": "/hom/hou/ParmTemplateGroup", "fallback_text": "hou.ParmTemplateGroup", "fullpath": "/hom/hou/ParmTemplateGroup", "scheme": "Hom", "type": "link"}, " using\n", {"_hs_sc": true, "fragment": "#parmTemplateGroup", "text": "", "value": "/hom/hou/HDADefinition#parmTemplateGroup", "fallback_text": "hou.HDADefinition.parmTemplateGroup", "fullpath": "/hom/hou/HDADefinition#parmTemplateGroup", "scheme": "Hom", "type": "link"}, ".  You can then modify the group,\nadding parameters to it and replacing parameters in it, and save the group\nback to the asset definition with ", {"_hs_sc": true, "fragment": "#setParmTemplateGroup", "text": "", "value": "/hom/hou/HDADefinition#setParmTemplateGroup", "fallback_text": "hou.HDADefinition.setParmTemplateGroup", "fullpath": "/hom/hou/HDADefinition#setParmTemplateGroup", "scheme": "Hom", "type": "link"}, ".\nSimilarly, you can change a node\u2019s parameter layout with\n", {"_hs_sc": true, "fragment": "#parmTemplateGroup", "text": "", "value": "/hom/hou/Node#parmTemplateGroup", "fallback_text": "hou.Node.parmTemplateGroup", "fullpath": "/hom/hou/Node#parmTemplateGroup", "scheme": "Hom", "type": "link"}, " and ", {"_hs_sc": true, "fragment": "#setParmTemplateGroup", "text": "", "value": "/hom/hou/Node#setParmTemplateGroup", "fallback_text": "hou.Node.setParmTemplateGroup", "fullpath": "/hom/hou/Node#setParmTemplateGroup", "scheme": "Hom", "type": "link"}, "."]}, {"indent": 0, "type": "para", "text": ["You can also ask a ", {"_hs_sc": true, "text": "", "value": "/hom/hou/ParmTuple", "fallback_text": "hou.ParmTuple", "fullpath": "/hom/hou/ParmTuple", "scheme": "Hom", "type": "link"}, " for its ParmTemplate in order to find\nout information about the parameter, such as allowed ranges of values, the\nlabel displayed to the user in the parameter pane, the parameter\u2019s popup\nhelp, etc."]}, {"body": [{"body": [{"body": [{"indent": 4, "type": "para", "text": ["Return a copy of this parm template."]}, {"indent": 4, "type": "para", "text": ["This method can be called on an instance of a ParmTemplate subclass and an\n    instance of the subclass is properly returned."]}], "indent": 0, "text": [{"text": ["clone(self)"], "type": "code"}, "  \u2192 ", {"_hs_sc": true, "text": "", "value": "/hom/hou/ParmTemplate", "fallback_text": "hou.ParmTemplate", "fullpath": "/hom/hou/ParmTemplate", "scheme": "Hom", "type": "link"}], "role": "item", "attrs": {"cppname": "HOM_ParmTemplate::clone"}, "type": "methods_item", "id": "clone"}, {"body": [{"indent": 4, "type": "para", "text": ["Return the internal name of the parm template.  This is the name that\n    ", {"_hs_sc": true, "text": "", "value": "/hom/hou/ParmTuple", "fallback_text": "hou.ParmTuple", "fullpath": "/hom/hou/ParmTuple", "scheme": "Hom", "type": "link"}, " objects created from this parm template will have."]}, {"indent": 4, "type": "para", "text": ["Note that the names of ", {"_hs_sc": true, "text": "", "value": "/hom/hou/Parm", "fallback_text": "hou.Parm", "fullpath": "/hom/hou/Parm", "scheme": "Hom", "type": "link"}, " objects inside ParmTuples based\n    off this ParmTemplate are determined by this name, the number of components\n    in this parm template, and the naming scheme.  See the\n    ", {"_hs_sc": true, "fragment": "#namingScheme", "text": ["namingScheme"], "value": "/hom/hou/ParmTemplate#namingScheme", "fullpath": "/hom/hou/ParmTemplate#namingScheme", "scheme": "Hom", "type": "link"}, " method for more\n    information."]}], "indent": 0, "text": [{"text": ["name(self)"], "type": "code"}, "  \u2192 string"], "role": "item", "attrs": {"cppname": "HOM_ParmTemplate::name"}, "type": "methods_item", "id": "name"}, {"body": [{"indent": 4, "type": "para", "text": ["Change the internal name of this parm template.  Remember that\n    ParmTemplates just store data, so the name change will not have any effect\n    unless this parm template is later used to modify a parameter layout in\n    Houdini."]}], "indent": 0, "text": [{"text": ["setName(self, name)"], "type": "code"}], "role": "item", "attrs": {"cppname": "HOM_ParmTemplate::setName"}, "type": "methods_item", "id": "setName"}, {"body": [{"indent": 4, "type": "para", "text": ["Return the name of the parameter tuple that is displayed in the parameter\n    pane."]}], "indent": 0, "text": [{"text": ["label(self)"], "type": "code"}, "  \u2192 string"], "role": "item", "attrs": {"cppname": "HOM_ParmTemplate::label"}, "type": "methods_item", "id": "label"}, {"body": [{"indent": 4, "type": "para", "text": ["Change the name of the label that is displayed in the parameter pane."]}], "indent": 0, "text": [{"text": ["setLabel(self, label)"], "type": "code"}], "role": "item", "attrs": {"cppname": "HOM_ParmTemplate::setLabel"}, "type": "methods_item", "id": "setLabel"}, {"body": [{"indent": 4, "type": "para", "text": ["Return the enumerated value identifying the type of this parameter."]}, {"indent": 4, "type": "para", "text": ["Remember that ParmTemplate objects are always instances of a subclass of\n    this class.  The following table shows the mapping between\n    ", {"_hs_sc": true, "text": "", "value": "/hom/hou/parmTemplateType", "fallback_text": "hou.parmTemplateType", "fullpath": "/hom/hou/parmTemplateType", "scheme": "Hom", "type": "link"}, " enumeration values and ParmTemplate subclasses:"]}, {"body": [{"body": [{"indent": 8, "type": "para", "text": ["ParmTemplate Subclass"]}], "indent": 4, "type": "dt", "text": ["Enumerated Value"]}, {"body": [{"indent": 8, "type": "para", "text": [{"_hs_sc": true, "text": "", "value": "/hom/hou/IntParmTemplate", "fallback_text": "hou.IntParmTemplate", "fullpath": "/hom/hou/IntParmTemplate", "scheme": "Hom", "type": "link"}]}], "indent": 4, "type": "dt", "text": [{"_hs_sc": true, "text": ["hou.parmTemplateType.Int"], "value": "/hom/hou/parmTemplateType", "fullpath": "/hom/hou/parmTemplateType", "scheme": "Hom", "type": "link"}]}, {"body": [{"indent": 8, "type": "para", "text": [{"_hs_sc": true, "text": "", "value": "/hom/hou/FloatParmTemplate", "fallback_text": "hou.FloatParmTemplate", "fullpath": "/hom/hou/FloatParmTemplate", "scheme": "Hom", "type": "link"}]}], "indent": 4, "type": "dt", "text": [{"_hs_sc": true, "text": ["hou.parmTemplateType.Float"], "value": "/hom/hou/parmTemplateType", "fullpath": "/hom/hou/parmTemplateType", "scheme": "Hom", "type": "link"}]}, {"body": [{"indent": 8, "type": "para", "text": [{"_hs_sc": true, "text": "", "value": "/hom/hou/StringParmTemplate", "fallback_text": "hou.StringParmTemplate", "fullpath": "/hom/hou/StringParmTemplate", "scheme": "Hom", "type": "link"}]}], "indent": 4, "type": "dt", "text": [{"_hs_sc": true, "text": ["hou.parmTemplateType.String"], "value": "/hom/hou/parmTemplateType", "fullpath": "/hom/hou/parmTemplateType", "scheme": "Hom", "type": "link"}]}, {"body": [{"indent": 8, "type": "para", "text": [{"_hs_sc": true, "text": "", "value": "/hom/hou/ToggleParmTemplate", "fallback_text": "hou.ToggleParmTemplate", "fullpath": "/hom/hou/ToggleParmTemplate", "scheme": "Hom", "type": "link"}]}], "indent": 4, "type": "dt", "text": [{"_hs_sc": true, "text": ["hou.parmTemplateType.Toggle"], "value": "/hom/hou/parmTemplateType", "fullpath": "/hom/hou/parmTemplateType", "scheme": "Hom", "type": "link"}]}, {"body": [{"indent": 8, "type": "para", "text": [{"_hs_sc": true, "text": "", "value": "/hom/hou/MenuParmTemplate", "fallback_text": "hou.MenuParmTemplate", "fullpath": "/hom/hou/MenuParmTemplate", "scheme": "Hom", "type": "link"}]}], "indent": 4, "type": "dt", "text": [{"_hs_sc": true, "text": ["hou.parmTemplateType.Menu"], "value": "/hom/hou/parmTemplateType", "fullpath": "/hom/hou/parmTemplateType", "scheme": "Hom", "type": "link"}]}, {"body": [{"indent": 8, "type": "para", "text": [{"_hs_sc": true, "text": "", "value": "/hom/hou/ButtonParmTemplate", "fallback_text": "hou.ButtonParmTemplate", "fullpath": "/hom/hou/ButtonParmTemplate", "scheme": "Hom", "type": "link"}]}], "indent": 4, "type": "dt", "text": [{"_hs_sc": true, "text": ["hou.parmTemplateType.Button"], "value": "/hom/hou/parmTemplateType", "fullpath": "/hom/hou/parmTemplateType", "scheme": "Hom", "type": "link"}]}, {"body": [{"indent": 8, "type": "para", "text": [{"_hs_sc": true, "text": "", "value": "/hom/hou/FolderSetParmTemplate", "fallback_text": "hou.FolderSetParmTemplate", "fullpath": "/hom/hou/FolderSetParmTemplate", "scheme": "Hom", "type": "link"}]}], "indent": 4, "type": "dt", "text": [{"_hs_sc": true, "text": ["hou.parmTemplateType.FolderSet"], "value": "/hom/hou/parmTemplateType", "fullpath": "/hom/hou/parmTemplateType", "scheme": "Hom", "type": "link"}]}, {"body": [{"indent": 8, "type": "para", "text": [{"_hs_sc": true, "text": "", "value": "/hom/hou/FolderParmTemplate", "fallback_text": "hou.FolderParmTemplate", "fullpath": "/hom/hou/FolderParmTemplate", "scheme": "Hom", "type": "link"}]}], "indent": 4, "type": "dt", "text": [{"_hs_sc": true, "text": ["hou.parmTemplateType.Folder"], "value": "/hom/hou/parmTemplateType", "fullpath": "/hom/hou/parmTemplateType", "scheme": "Hom", "type": "link"}]}, {"body": [{"indent": 8, "type": "para", "text": [{"_hs_sc": true, "text": "", "value": "/hom/hou/SeparatorParmTemplate", "fallback_text": "hou.SeparatorParmTemplate", "fullpath": "/hom/hou/SeparatorParmTemplate", "scheme": "Hom", "type": "link"}]}], "indent": 4, "type": "dt", "text": [{"_hs_sc": true, "text": ["hou.parmTemplateType.Separator"], "value": "/hom/hou/parmTemplateType", "fullpath": "/hom/hou/parmTemplateType", "scheme": "Hom", "type": "link"}]}, {"body": [{"indent": 8, "type": "para", "text": [{"_hs_sc": true, "text": "", "value": "/hom/hou/LabelParmTemplate", "fallback_text": "hou.LabelParmTemplate", "fullpath": "/hom/hou/LabelParmTemplate", "scheme": "Hom", "type": "link"}]}], "indent": 4, "type": "dt", "text": [{"_hs_sc": true, "text": ["hou.parmTemplateType.Label"], "value": "/hom/hou/parmTemplateType", "fullpath": "/hom/hou/parmTemplateType", "scheme": "Hom", "type": "link"}]}, {"body": [{"indent": 8, "type": "para", "text": [{"_hs_sc": true, "text": "", "value": "/hom/hou/RampParmTemplate", "fallback_text": "hou.RampParmTemplate", "fullpath": "/hom/hou/RampParmTemplate", "scheme": "Hom", "type": "link"}]}], "indent": 4, "type": "dt", "text": [{"_hs_sc": true, "text": ["hou.parmTemplateType.Ramp"], "value": "/hom/hou/parmTemplateType", "fullpath": "/hom/hou/parmTemplateType", "scheme": "Hom", "type": "link"}]}], "container": true, "type": "dt_group"}], "indent": 0, "text": [{"text": ["type(self)"], "type": "code"}, "  \u2192 ", {"_hs_sc": true, "text": "", "value": "/hom/hou/parmTemplateType", "fallback_text": "hou.parmTemplateType", "fullpath": "/hom/hou/parmTemplateType", "scheme": "Hom", "type": "link"}, " enum value"], "role": "item", "attrs": {"cppname": "HOM_ParmTemplate::type"}, "type": "methods_item", "id": "type"}, {"body": [{"indent": 4, "type": "para", "text": ["Return the data type stored in ", {"_hs_sc": true, "text": "", "value": "/hom/hou/Parm", "fallback_text": "hou.Parm", "fullpath": "/hom/hou/Parm", "scheme": "Hom", "type": "link"}, " instances inside\n    ", {"_hs_sc": true, "text": "", "value": "/hom/hou/ParmTuple", "fallback_text": "hou.ParmTuple", "fullpath": "/hom/hou/ParmTuple", "scheme": "Hom", "type": "link"}, " instances corresponding to this ParmTemplate."]}, {"indent": 4, "type": "para", "text": ["For example, suppose this parm tuple is a ", {"_hs_sc": true, "text": "", "value": "/hom/hou/FloatParmTemplate", "fallback_text": "hou.FloatParmTemplate", "fullpath": "/hom/hou/FloatParmTemplate", "scheme": "Hom", "type": "link"}, "\n    with 3 components.  The corresponding ", {"_hs_sc": true, "text": "", "value": "/hom/hou/ParmTuple", "fallback_text": "hou.ParmTuple", "fullpath": "/hom/hou/ParmTuple", "scheme": "Hom", "type": "link"}, " will have 3\n    ", {"_hs_sc": true, "text": "", "value": "/hom/hou/Parm", "fallback_text": "hou.Parm", "fullpath": "/hom/hou/Parm", "scheme": "Hom", "type": "link"}, " objects inside it, and each will store a floating point\n    value.  In this example, this method would return\n    ", {"_hs_sc": true, "text": ["hou.parmData.Float"], "value": "/hom/hou/parmData", "fullpath": "/hom/hou/parmData", "scheme": "Hom", "type": "link"}, "."]}], "indent": 0, "text": [{"text": ["dataType(self)"], "type": "code"}, "  \u2192 ", {"_hs_sc": true, "text": "", "value": "/hom/hou/parmData", "fallback_text": "hou.parmData", "fullpath": "/hom/hou/parmData", "scheme": "Hom", "type": "link"}, " enum value"], "role": "item", "attrs": {"cppname": "HOM_ParmTemplate::dataType"}, "type": "methods_item", "id": "dataType"}, {"body": [{"indent": 4, "type": "para", "text": ["Return the number of values stored inside ", {"_hs_sc": true, "text": "", "value": "/hom/hou/ParmTuple", "fallback_text": "hou.ParmTuple", "fullpath": "/hom/hou/ParmTuple", "scheme": "Hom", "type": "link"}, " instances\n    of this ParmTemplate."]}, {"indent": 4, "type": "para", "text": ["For example, if this parm template has 3 components, there will be\n    3 parameter fields displayed in the parameter pane and there will be\n    3 ", {"_hs_sc": true, "text": "", "value": "/hom/hou/Parm", "fallback_text": "hou.Parm", "fullpath": "/hom/hou/Parm", "scheme": "Hom", "type": "link"}, " objects inside a ", {"_hs_sc": true, "text": "", "value": "/hom/hou/ParmTuple", "fallback_text": "hou.ParmTuple", "fullpath": "/hom/hou/ParmTuple", "scheme": "Hom", "type": "link"}, " based off this parm\n    template."]}], "indent": 0, "text": [{"text": ["numComponents(self)"], "type": "code"}, "  \u2192 int"], "role": "item", "attrs": {"cppname": "HOM_ParmTemplate::numComponents"}, "type": "methods_item", "id": "numComponents"}, {"body": [{"indent": 4, "type": "para", "text": ["Set the number of values stored inside ", {"_hs_sc": true, "text": "", "value": "/hom/hou/ParmTuple", "fallback_text": "hou.ParmTuple", "fullpath": "/hom/hou/ParmTuple", "scheme": "Hom", "type": "link"}, " instances of\n    this ParmTemplate."]}, {"indent": 4, "type": "para", "text": ["Note that some ParmTemplate subclasses only support one component, so\n    calling this method with a value other than 1 may raise a\n    ", {"_hs_sc": true, "text": "", "value": "/hom/hou/OperationFailed", "fallback_text": "hou.OperationFailed", "fullpath": "/hom/hou/OperationFailed", "scheme": "Hom", "type": "link"}, " exception.  Also, changing the number of\n    components may automatically change the size of the tuple of default values\n    for some ParmTemplate subclasses."]}], "indent": 0, "text": [{"text": ["setNumComponents(self, num_components)"], "type": "code"}, "  \u2192 int"], "role": "item", "attrs": {"cppname": "HOM_ParmTemplate::setNumComponents"}, "type": "methods_item", "id": "setNumComponents"}, {"body": [{"indent": 4, "type": "para", "text": ["Return the naming scheme used to name parameters inside the parm tuple for\n    this ParmTemplate."]}, {"indent": 4, "type": "para", "text": ["For example, if the naming scheme is\n    ", {"_hs_sc": true, "text": ["hou.parmNamingScheme.XYZW"], "value": "/hom/hou/parmNamingScheme", "fullpath": "/hom/hou/parmNamingScheme", "scheme": "Hom", "type": "link"}, " and the parm template\n    is named ", {"text": ["\"foo\""], "type": "code"}, " and has 3 components, the parameters will be named\n    ", {"text": ["\"foox\""], "type": "code"}, ", ", {"text": ["\"fooy\""], "type": "code"}, ", and ", {"text": ["\"fooz\""], "type": "code"}, ".  On the other hand, if the naming scheme\n    was ", {"_hs_sc": true, "text": ["hou.parmNamingScheme.Base1"], "value": "/hom/hou/parmNamingScheme", "fullpath": "/hom/hou/parmNamingScheme", "scheme": "Hom", "type": "link"}, ", the parameters\n    would be named ", {"text": ["\"foo1\""], "type": "code"}, ", ", {"text": ["\"foo2\""], "type": "code"}, ", and ", {"text": ["\"foo3\""], "type": "code"}, "."]}, {"indent": 4, "type": "para", "text": ["Note that when the parm template only has 1 component, the parm name is\n    the same as the parm tuple name."]}, {"indent": 4, "type": "para", "text": ["See ", {"_hs_sc": true, "text": "", "value": "/hom/hou/parmNamingScheme", "fallback_text": "hou.parmNamingScheme", "fullpath": "/hom/hou/parmNamingScheme", "scheme": "Hom", "type": "link"}, " for more information."]}], "indent": 0, "text": [{"text": ["namingScheme(self)"], "type": "code"}, "  \u2192 ", {"_hs_sc": true, "text": "", "value": "/hom/hou/parmNamingScheme", "fallback_text": "hou.parmNamingScheme", "fullpath": "/hom/hou/parmNamingScheme", "scheme": "Hom", "type": "link"}, " enum value"], "role": "item", "attrs": {"cppname": "HOM_ParmTemplate::namingScheme"}, "type": "methods_item", "id": "namingScheme"}, {"body": [{"indent": 4, "type": "para", "text": ["Set the naming scheme used to name parameters inside the parm tuple for\n    this ParmTemplate to a ", {"_hs_sc": true, "text": "", "value": "/hom/hou/parmNamingScheme", "fallback_text": "hou.parmNamingScheme", "fullpath": "/hom/hou/parmNamingScheme", "scheme": "Hom", "type": "link"}, " enum value."]}, {"indent": 4, "type": "para", "text": ["See the ", {"text": ["namingScheme"], "type": "code"}, " method for more information."]}], "indent": 0, "text": [{"text": ["setNamingScheme(self, naming_scheme)"], "type": "code"}], "role": "item", "attrs": {"cppname": "HOM_ParmTemplate::setNamingScheme"}, "type": "methods_item", "id": "setNamingScheme"}, {"body": [{"indent": 4, "type": "para", "text": ["Return the look of this parameter in the parameter pane.  For example,\n    a tuple of 3 floats can be displayed as a 3D vector or as an RGB color."]}, {"indent": 4, "type": "para", "text": ["See ", {"_hs_sc": true, "text": "", "value": "/hom/hou/parmLook", "fallback_text": "hou.parmLook", "fullpath": "/hom/hou/parmLook", "scheme": "Hom", "type": "link"}, " for more information."]}], "indent": 0, "text": [{"text": ["look(self)"], "type": "code"}, "  \u2192 ", {"_hs_sc": true, "text": "", "value": "/hom/hou/parmLook", "fallback_text": "hou.parmLook", "fullpath": "/hom/hou/parmLook", "scheme": "Hom", "type": "link"}, " enum value"], "role": "item", "attrs": {"cppname": "HOM_ParmTemplate::look"}, "type": "methods_item", "id": "look"}, {"body": [{"indent": 4, "type": "para", "text": ["Set the look of this parameter to a ", {"_hs_sc": true, "text": "", "value": "/hom/hou/parmLook", "fallback_text": "hou.parmLook", "fullpath": "/hom/hou/parmLook", "scheme": "Hom", "type": "link"}, " enum value."]}, {"indent": 4, "type": "para", "text": ["See the ", {"text": ["look"], "type": "code"}, " method for more information."]}], "indent": 0, "text": [{"text": ["setLook(self, look)"], "type": "code"}], "role": "item", "attrs": {"cppname": "HOM_ParmTemplate::setLook"}, "type": "methods_item", "id": "setLook"}, {"body": [{"indent": 4, "type": "para", "text": ["Return the help that Houdini displays when you hover over the parameter\n    label in the parameter pane."]}], "indent": 0, "text": [{"text": ["help(self)"], "type": "code"}, "  \u2192 ", {"text": ["str"], "type": "code"}], "role": "item", "attrs": {"cppname": "HOM_ParmTemplate::help"}, "type": "methods_item", "id": "help"}, {"body": [{"indent": 4, "type": "para", "text": ["Set the help that Houdini displays when you hover over the parameter\n    label in the parameter pane."]}], "indent": 0, "text": [{"text": ["setHelp(self, help)"], "type": "code"}], "role": "item", "attrs": {"cppname": "HOM_ParmTemplate::setHelp"}, "type": "methods_item", "id": "setHelp"}, {"body": [{"indent": 4, "type": "para", "text": ["Return whether this parameter is hidden in the parameter pane."]}], "indent": 0, "text": [{"text": ["isHidden(self)"], "type": "code"}, "  \u2192 ", {"text": ["bool"], "type": "code"}], "role": "item", "attrs": {"cppname": "HOM_ParmTemplate::isHidden"}, "type": "methods_item", "id": "isHidden"}, {"body": [{"indent": 4, "type": "para", "text": ["Marks this parameter as visible or invisible in the parameter pane."]}, {"indent": 4, "type": "para", "text": ["Note that hidden parameters still exist, and can be evaluated,\n    channel-referenced, etc.  They simply will not be displayed in the\n    parameter pane."]}], "indent": 0, "text": [{"text": ["hide(self, on)"], "type": "code"}], "role": "item", "attrs": {"cppname": "HOM_ParmTemplate::hide"}, "type": "methods_item", "id": "hide"}, {"body": [{"indent": 4, "type": "para", "text": ["Return whether the label for this parameter is hidden in the parameter\n    pane."]}], "indent": 0, "text": [{"text": ["isLabelHidden(self)"], "type": "code"}, "  \u2192 ", {"text": ["bool"], "type": "code"}], "role": "item", "attrs": {"cppname": "HOM_ParmTemplate::isLabelHidden"}, "type": "methods_item", "id": "isLabelHidden"}, {"body": [{"indent": 4, "type": "para", "text": ["Hide or show the label for this parameter in the parameter pane."]}], "indent": 0, "text": [{"text": ["hideLabel(self, on)"], "type": "code"}], "role": "item", "attrs": {"cppname": "HOM_ParmTemplate::hideLabel"}, "type": "methods_item", "id": "hideLabel"}, {"body": [{"indent": 4, "type": "para", "text": ["Return whether this parameter is displayed on the same line as the next\n    parameter in the parameter pane."]}], "indent": 0, "text": [{"text": ["joinsWithNext(self)"], "type": "code"}, "  \u2192 ", {"text": ["bool"], "type": "code"}], "role": "item", "attrs": {"cppname": "HOM_ParmTemplate::joinsWithNext"}, "type": "methods_item", "id": "joinsWithNext"}, {"body": [{"indent": 4, "type": "para", "text": ["This method is deprecated in favor of the\n    ", {"_hs_sc": true, "fragment": "#joinsWithNext", "text": ["joinsWithNext"], "value": "/hom/hou/ParmTemplate#joinsWithNext", "fullpath": "/hom/hou/ParmTemplate#joinsWithNext", "scheme": "Hom", "type": "link"}, " method."]}], "indent": 0, "text": [{"text": ["joinWithNext(self)"], "type": "code"}, "  \u2192 ", {"text": ["bool"], "type": "code"}], "role": "item", "attrs": {"cppname": "HOM_ParmTemplate::joinWithNext"}, "type": "methods_item", "id": "joinWithNext"}, {"body": [{"indent": 4, "type": "para", "text": ["Sets whether this parameter is displayed on the same line as the next\n    parameter in the parameter pane."]}], "indent": 0, "text": [{"text": ["setJoinWithNext(self, on)"], "type": "code"}], "role": "item", "attrs": {"cppname": "HOM_ParmTemplate::setJoinWithNext"}, "type": "methods_item", "id": "setJoinWithNext"}, {"body": [{"indent": 4, "type": "para", "text": ["This method is deprecated in favor of the\n    ", {"_hs_sc": true, "fragment": "#conditionals", "text": ["conditionals"], "value": "/hom/hou/ParmTemplate#conditionals", "fullpath": "/hom/hou/ParmTemplate#conditionals", "scheme": "Hom", "type": "link"}, " method."]}], "indent": 0, "text": [{"text": ["disableWhen(self)"], "type": "code"}, "  \u2192 ", {"text": ["str"], "type": "code"}], "role": "item", "attrs": {"cppname": "HOM_ParmTemplate::disableWhen"}, "type": "methods_item", "id": "disableWhen"}, {"body": [{"indent": 4, "type": "para", "text": ["This method is deprecated in favor of the\n    ", {"_hs_sc": true, "fragment": "#setConditional", "text": ["setConditional"], "value": "/hom/hou/ParmTemplate#setConditional", "fullpath": "/hom/hou/ParmTemplate#setConditional", "scheme": "Hom", "type": "link"}, " method."]}], "indent": 0, "text": [{"text": ["setDisableWhen(self, disable_when)"], "type": "code"}], "role": "item", "attrs": {"cppname": "HOM_ParmTemplate::setDisableWhen"}, "type": "methods_item", "id": "setDisableWhen"}, {"body": [{"indent": 4, "type": "para", "text": ["Returns the set of conditionals currently affecting this parameter."]}, {"indent": 4, "type": "para", "text": ["See the ", {"_hs_sc": true, "fragment": "#conditionals", "text": ["Conditionals"], "value": "/ref/windows/optype#conditionals", "fullpath": "/ref/windows/optype#conditionals", "scheme": null, "type": "link"}, " section of the\n    ", {"text": ["Operator Type Properties window"], "type": "var"}, " help for more information on this\n    string."]}], "indent": 0, "text": [{"text": ["conditionals(self)"], "type": "code"}, "  \u2192 ", {"text": ["dict of [Hom:hou.parmCondType] enum value to string"], "type": "code"}], "role": "item", "attrs": {"cppname": "HOM_ParmTemplate::conditionals"}, "type": "methods_item", "id": "conditionals"}, {"body": [{"indent": 4, "type": "para", "text": ["Set a conditional string of the given ", {"_hs_sc": true, "text": "", "value": "/hom/hou/parmCondType", "fallback_text": "hou.parmCondType", "fullpath": "/hom/hou/parmCondType", "scheme": "Hom", "type": "link"}, " type for this \n    parameter. This string consists of rules on how this parameter\u2019s display \n    behaves when other parameters change. "]}, {"indent": 4, "type": "para", "text": ["See the ", {"_hs_sc": true, "fragment": "#conditionals", "text": ["Conditionals"], "value": "/ref/windows/optype#conditionals", "fullpath": "/ref/windows/optype#conditionals", "scheme": null, "type": "link"}, " section of the\n    ", {"text": ["Operator Type Properties window"], "type": "var"}, " help for more information on this\n    string."]}], "indent": 0, "text": [{"text": ["setConditional(self, type, conditional)"], "type": "code"}], "role": "item", "attrs": {"cppname": "HOM_ParmTemplate::setConditional"}, "type": "methods_item", "id": "setConditional"}, {"body": [{"indent": 4, "type": "para", "text": ["Return a dictionary of extra data stored in the parm template."]}, {"indent": 4, "type": "para", "text": ["Houdini uses this dictionary to attach arbitrary data to parm templates.\n    The keys in this dictionary vary depending on the ParmTemplate type\n    and its use."]}], "indent": 0, "text": [{"text": ["tags(self) -> dict of string to string"], "type": "code"}], "role": "item", "attrs": {"cppname": "HOM_ParmTemplate::tags"}, "type": "methods_item", "id": "tags"}, {"body": [{"indent": 4, "type": "para", "text": ["Return the contents of the script that Houdini runs when this parameter\n    changes.  This script is most commonly used in ", {"_hs_sc": true, "text": "", "value": "/hom/hou/ButtonParmTemplate", "fallback_text": "hou.ButtonParmTemplate", "fullpath": "/hom/hou/ButtonParmTemplate", "scheme": "Hom", "type": "link"}, "\n    objects to respond to the button being pressed."]}, {"indent": 4, "type": "para", "text": ["Note that Houdini uses the tags dictionary to store the script callback\n    information."]}], "indent": 0, "text": [{"text": ["scriptCallback(self)"], "type": "code"}, "  \u2192 ", {"text": ["str"], "type": "code"}], "role": "item", "attrs": {"cppname": "HOM_ParmTemplate::scriptCallback"}, "type": "methods_item", "id": "scriptCallback"}, {"body": [{"indent": 4, "type": "para", "text": ["Set the callback script to the given string.  This script runs in response\n    to a parameter change."]}, {"indent": 4, "type": "para", "text": ["See the ", {"_hs_sc": true, "fragment": "#scriptCallback", "text": ["scriptCallback"], "value": "/hom/hou/ParmTemplate#scriptCallback", "fullpath": "/hom/hou/ParmTemplate#scriptCallback", "scheme": "Hom", "type": "link"}, " method for\n    more information."]}], "indent": 0, "text": [{"text": ["setScriptCallback(self, script_callback)"], "type": "code"}], "role": "item", "attrs": {"cppname": "HOM_ParmTemplate::setScriptCallback"}, "type": "methods_item", "id": "setScriptCallback"}, {"body": [{"indent": 4, "type": "para", "text": ["Return the language of the script that Houdini runs when this parameter\n    changes."]}, {"indent": 4, "type": "para", "text": ["Note that Houdini uses the tags dictionary to store the script callback\n    information."]}, {"indent": 4, "type": "para", "text": ["See also the ", {"_hs_sc": true, "fragment": "#scriptCallback", "text": ["scriptCallback"], "value": "/hom/hou/ParmTemplate#scriptCallback", "fullpath": "/hom/hou/ParmTemplate#scriptCallback", "scheme": "Hom", "type": "link"}, " method."]}], "indent": 0, "text": [{"text": ["scriptCallbackLanguage(self)"], "type": "code"}, "  \u2192 ", {"_hs_sc": true, "text": "", "value": "/hom/hou/scriptLanguage", "fallback_text": "hou.scriptLanguage", "fullpath": "/hom/hou/scriptLanguage", "scheme": "Hom", "type": "link"}, " enum value"], "role": "item", "attrs": {"cppname": "HOM_ParmTemplate::scriptCallbackLanguage"}, "type": "methods_item", "id": "scriptCallbackLanguage"}, {"body": [{"indent": 4, "type": "para", "text": ["Set the script callback language to a ", {"_hs_sc": true, "text": "", "value": "/hom/hou/scriptLanguage", "fallback_text": "hou.scriptLanguage", "fullpath": "/hom/hou/scriptLanguage", "scheme": "Hom", "type": "link"}, " enum value."]}, {"indent": 4, "type": "para", "text": ["See the ", {"_hs_sc": true, "fragment": "#scriptCallbackLanguage", "text": ["scriptCallbackLanguage"], "value": "/hom/hou/ParmTemplate#scriptCallbackLanguage", "fullpath": "/hom/hou/ParmTemplate#scriptCallbackLanguage", "scheme": "Hom", "type": "link"}, "\n    method for more information."]}], "indent": 0, "text": [{"text": ["setScriptCallbackLanguage(self, script_callback_language)"], "type": "code"}], "role": "item", "attrs": {"cppname": "HOM_ParmTemplate::setScriptCallbackLanguage"}, "type": "methods_item", "id": "setScriptCallbackLanguage"}, {"body": [{"indent": 4, "type": "para", "text": ["Set the dictionary of extra data stored in this parm template."]}, {"indent": 4, "type": "para", "text": ["See the ", {"_hs_sc": true, "fragment": "#tags", "text": ["tags"], "value": "/hom/hou/ParmTemplate#tags", "fullpath": "/hom/hou/ParmTemplate#tags", "scheme": "Hom", "type": "link"}, " method for more information."]}], "indent": 0, "text": [{"text": ["setTags(self, tags)"], "type": "code"}], "role": "item", "attrs": {"cppname": "HOM_ParmTemplate::setTags"}, "type": "methods_item", "id": "setTags"}, {"body": [{"indent": 4, "type": "para", "text": ["Return a string containing Python statements that can be executed to\n    recreate the parameter template.  To run the string, use Python\u2019s\n    ", {"text": ["compile"], "type": "code"}, ", or ", {"text": ["execfile"], "type": "code"}, " functions or the ", {"text": ["exec"], "type": "code"}, " statement."]}, {"body": [{"body": [{"indent": 8, "type": "para", "text": ["If ", {"text": ["function_name"], "type": "var"}, " is specified, then the code returned creates a\n        Python function with the given name.  ", {"text": ["function_name"], "type": "var"}, " must be a\n        non-zero length string consisting of only alphanumeric and underscore\n        characters.  Any invalid characters are internally converted to\n        underscores."]}, {"indent": 8, "type": "para", "text": ["The function returns a reference to the newly created parameter\n        template object."]}], "indent": 4, "type": "dt", "text": [{"text": ["function_name"], "type": "code"}]}, {"body": [{"indent": 8, "type": "para", "text": ["The name of a Python variable that the result code will assign to.\n        If ", {"text": ["None"], "type": "code"}, ", Houdini uses the variable name ", {"text": ["\"hou_parm_template\""], "type": "code"}, "."]}], "indent": 4, "type": "dt", "text": [{"text": ["variable_name"], "type": "code"}]}], "container": true, "type": "dt_group"}, {"indent": 4, "type": "para", "text": ["Here is an example of saving the output to a file and then loading \n    it back into Houdini:"]}, {"lang": "python", "indent": 4, "type": "pre", "text": ["\n    # Get a reference to the target parameter template.\n    node = hou.node(\"/obj/geo1\")\n    parm_template = node.parm(\"tx\").parmTemplate()\n\n    # Execute asCode and write the output script to a file.\n    code = parm_template.asCode()\n    source_file = open(\"create_parm_template.py\", \"w\")\n    source_file.write(code)\n    source_file.close()\n\n    # Execute the script.  The new parameter template will be stored \n    # in the 'hou_parm_template' variable.\n    execfile(\"create_parm_template.py\")\n\n    # Add a spare parameter to the node using the saved parameter\n    # template.\n    node.addSpareParmTuple(hou_parm_template)\n    "]}, {"indent": 4, "type": "para", "text": ["Here is an example of saving the output into a function in a file and then\n    calling it from Houdini:"]}, {"lang": "python", "indent": 4, "type": "pre", "text": ["\n    # Get a reference to the target parameter template.\n    node = hou.node(\"/obj/geo1\")\n    parm_template = node.parm(\"tx\").parmTemplate()\n\n    # Execute asCode and write the function definition to a file.\n    code = parm_template.asCode(function_name=\"createParmTemplate\")\n    source_file = open(\"parmtemplatelib.py\", \"w\")\n    source_file.write(code)\n    source_file.close()\n\n    # Call the function definition.\n    import parmtemplatelib\n    hou_parm_template = parmtemplatelib.createParmTemplate()\n\n    # Add a spare parameter to the node using the saved parameter\n    # template.\n    node.addSpareParmTuple(hou_parm_template)\n    "]}], "indent": 0, "text": [{"text": ["asCode(self, function_name=None, variable_name=None)"], "type": "code"}, "  \u2192 ", {"text": ["str"], "type": "code"}], "role": "item", "attrs": {"cppname": "HOM_ParmTemplate::asCode"}, "type": "methods_item", "id": "asCode"}], "container": true, "role": "item_group", "type": "methods_item_group"}], "indent": 0, "level": 1, "text": "Methods", "role": "section", "container": true, "type": "methods_section", "id": "methods"}], "summary": ["Describes a parameter tuple (its name, type, etc.).  This is base class for\nall parameter templates."], "type": "root", "attrs": {"status": "nd", "cppname": "HOM_ParmTemplate", "type": "homclass", "group": "parmtemplates"}, "title": [{"text": "hou.", "type": "supertitle"}, "ParmTemplate"]}