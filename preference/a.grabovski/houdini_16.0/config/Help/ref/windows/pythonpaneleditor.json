{"body": [{"indent": 0, "text": ["Python Panel Editor"], "type": "title", "level": 0}, {"body": [{"indent": 0, "type": "para", "text": ["The Python Panel Editor window lets you create, edit and delete PySide2 or PyQt5 interfaces that can be displayed in Python Panel panes.  The editor also lets you manage the entries in the Python Panel interfaces menu as well as the entries in the Houdini pane tab menu."]}, {"body": [{"indent": 0, "type": "para", "text": ["There are no requirements when building PySide2 interfaces.  Houdini ships with PySide2 modules out-of-the-box."]}, {"indent": 0, "type": "para", "text": ["To build interfaces with PyQt5, install the PyQt5 modules on your system.  Houdini does its best to find the PyQt5 modules automatically however, if the modules cannot be found then add the installed location to the Python search path."]}, {"indent": 0, "type": "para", "text": ["For example, if PyQt5 is installed at ", {"text": ["/path/to/site-packages/PyQt5"], "type": "code"}, ", then set ", {"text": ["PYTHONPATH=/path/to/site-packages"], "type": "code"}, " in your environment before starting Houdini.  Alternatively, append ", {"text": ["/path/to/site-packages"], "type": "code"}, " to the search path through Python code like so:"]}, {"lang": "python", "indent": 0, "type": "pre", "text": ["\n\n# Modify search path\nimport sys\nsys.path.append(\"/path/to/site-packages\")\n\n# Now you can import PyQt5\nfrom PyQt5 import QtWidgets\n"]}], "indent": 0, "level": 3, "text": ["Requirements"], "container": true, "type": "h", "id": null}, {"body": [{"indent": 0, "type": "para", "text": ["Houdini 16 is built with Qt5 so only PySide2 and PyQt5 are supported in Python Panels.  "]}, {"body": [{"body": [{"indent": 4, "type": "para", "text": ["If you want to continue using PySide or PyQt4 then you must install a\n    Houdini Qt4 build."]}], "indent": 0, "role": "item", "type": "tip"}], "container": true, "role": "item_group", "type": "tip_group"}, {"indent": 0, "type": "para", "text": ["Here are a few tips when porting your Python Panel code from PySide to PySide2 and similarly from PyQt4 to PyQt5:"]}, {"body": [{"indent": 0, "blevel": 2, "type": "bullet", "text": ["Import modules from ", {"text": ["PySide2"], "type": "code"}, " instead of ", {"text": ["PySide"], "type": "code"}, ".  Similarly, import modules\n  from ", {"text": ["PyQt5"], "type": "code"}, " instead of ", {"text": ["PyQt4"], "type": "code"}, "."]}, {"indent": 0, "blevel": 2, "type": "bullet", "text": ["Additionally import the ", {"text": ["QtWidgets"], "type": "code"}, " module because all widget classes have been\n  moved out of ", {"text": ["QtGui"], "type": "code"}, " and into ", {"text": ["QtWidgets"], "type": "code"}, "."]}, {"indent": 0, "blevel": 2, "type": "bullet", "text": ["Call ", {"text": [".setProperty(\"houdiniStyle\", True)"], "type": "code"}, " on top-level widget to restore\n  Houdini styling.  With PySide2 and PyQt5, Houdini does not automatically\n  apply Houdini styling to custom widget classes."]}, {"indent": 0, "blevel": 2, "type": "bullet", "text": ["When creating a ", {"text": ["QMenuBar"], "type": "code"}, " widget call ", {"text": [".setNativeMenuBar(False)"], "type": "code"}, " to prevent the\n  menu bar from populating the system\u2019s main menu bar on MacOS.  The native\n  menu bar default setting changed between Qt4 and Qt5.  Alternatively call\n  ", {"_hs_sc": true, "fragment": "#createMenuBar", "text": "", "value": "/hom/hou/qt#createMenuBar", "fallback_text": "hou.qt.createMenuBar", "fullpath": "/hom/hou/qt#createMenuBar", "scheme": "Hom", "type": "link"}, " to create a ", {"text": ["QMenuBar"], "type": "code"}, " widget that works across\n  all platforms."]}], "container": true, "type": "bullet_group"}, {"body": [{"body": [{"indent": 4, "type": "para", "text": [{"_hs_sc": true, "text": "", "value": "/hom/hou/qt", "fallback_text": "hou.qt", "fullpath": "/hom/hou/qt", "scheme": "Hom", "type": "link"}, " has a collection of methods for creating common widgets with\n    the Houdini look and feel.  The module also has methods for retrieving\n    Houdini icons and colors."]}], "indent": 0, "role": "item", "type": "tip"}], "container": true, "role": "item_group", "type": "tip_group"}, {"indent": 0, "type": "para", "text": ["For example, this code in PySide:"]}, {"lang": "python", "indent": 0, "type": "pre", "text": ["\nfrom PySide import QtGui\n\nclass MyCustomWidget(QtGui.QWidget):\n    \"\"\"A custom widget class that contains a label.\"\"\"\n    def __init__(self):\n        QtGui.QWidget.__init__(self)\n\n        label1 = QtGui.QLabel(\"Hello World\")\n\n        layout = QtGui.QVBoxLayout()\n        layout.addWidget(label1)\n        self.setLayout(layout)\n"]}, {"indent": 0, "type": "para", "text": ["Becomes this code in PySide2:"]}, {"lang": "python", "indent": 0, "type": "pre", "text": ["\nfrom PySide2 import QtWidgets\n\nclass MyCustomWidget(QtWidgets.QWidget):\n    \"\"\"A custom widget class that contains a label.\"\"\"\n    def __init__(self):\n        QtWidgets.QWidget.__init__(self)\n\n        label1 = QtWidgets.QLabel(\"Hello World\")\n\n        layout = QtWidgets.QVBoxLayout()\n        layout.addWidget(label1)\n        self.setLayout(layout)\n\n        # Apply Houdini styling to the main widget.\n        self.setProperty(\"houdiniStyle\", True)\n"]}], "indent": 0, "level": 3, "text": ["New to Houdini 16"], "container": true, "type": "h", "id": null}, {"body": [{"body": [{"indent": 0, "blevel": 2, "type": "ord", "text": ["Open the Python Panel Editor from the Windows menu or from the ", {"_hs_sc": true, "text": "", "value": "BUTTONS/gear", "fullpath": "/ref/windows/BUTTONS/gear", "scheme": "Icon", "type": "link"}, " toolbar button in a Python Panel pane tab."]}, {"indent": 0, "blevel": 2, "type": "ord", "text": ["To create a new interface definition, choose the ", {"text": ["Interfaces"], "type": "ui"}, " tab and click the ", {"text": ["New Interface"], "type": "ui"}, " button. The interface will be loaded in the editor and added to the menu list."]}, {"indent": 0, "blevel": 2, "type": "ord", "text": ["To edit an existing interface, select the interface from the drop down menu on the ", {"text": ["Interfaces"], "type": "ui"}, " tab."]}, {"indent": 0, "blevel": 2, "type": "ord", "text": ["Edit the name, label, icon using the interface editor."]}, {"indent": 0, "blevel": 2, "type": "ord", "text": ["Write Python code in the script text area which builds the interface.  A ", {"text": ["createInterface()"], "type": "code"}, " function must be defined which returns the root widget of your interface.  The returned root widget is embedded in the Python Panel."]}, {"indent": 0, "blevel": 2, "type": "ord", "text": ["Save changes by pressing the Accept or Apply button."]}], "container": true, "type": "ord_group"}], "indent": 0, "level": 3, "text": ["Creating and Editing Interfaces"], "container": true, "type": "h", "id": null}], "indent": 0, "level": 2, "text": ["Overview"], "container": true, "type": "h", "id": null}, {"body": [{"body": [{"indent": 0, "blevel": 2, "type": "ord", "text": ["Open the Python Panel Editor from the ", {"text": ["Windows"], "type": "ui"}, " menu or from the ", {"_hs_sc": true, "text": "", "value": "BUTTONS/gear", "fullpath": "/ref/windows/BUTTONS/gear", "scheme": "Icon", "type": "link"}, " toolbar button in a Python Panel pane tab."]}, {"indent": 0, "blevel": 2, "type": "ord", "text": ["Select the ", {"text": ["Edit Menu"], "type": "ui"}, " tab in the editor."]}, {"indent": 0, "blevel": 2, "type": "ord", "text": ["Drag and drop available interface definitions from the list on the left and into the menu list on the right. Entries in the menu list can also be reordered using drag and drop.  You can alternatively use the ", {"_hs_sc": true, "text": "", "value": "BUTTONS/move_to_right", "fullpath": "/ref/windows/BUTTONS/move_to_right", "scheme": "Icon", "type": "link"}, " button to add entries to the menu and the ", {"_hs_sc": true, "text": "", "value": "BUTTONS/move_to_left", "fullpath": "/ref/windows/BUTTONS/move_to_left", "scheme": "Icon", "type": "link"}, " button to remove entries. Multiple entries can be moved at the same time."]}], "container": true, "type": "ord_group"}], "indent": 0, "level": 2, "text": ["Editing the Interface Menu"], "container": true, "type": "h", "id": null}, {"body": [{"body": [{"indent": 0, "blevel": 2, "type": "ord", "text": ["Open the Delete Interfaces dialog from the Python Panel Editor or from the ", {"_hs_sc": true, "text": "", "value": "BUTTONS/gear", "fullpath": "/ref/windows/BUTTONS/gear", "scheme": "Icon", "type": "link"}, " toolbar button in a Python Panel pane tab."]}, {"indent": 0, "blevel": 2, "type": "ord", "text": ["In the dialog, select the interfaces to delete from the list. Multiple interfaces can be selected by holding the ", {"keys": ["Ctrl"], "text": null, "type": "keys"}, " key during selection."]}, {"indent": 0, "blevel": 2, "type": "ord", "text": ["Press the ", {"text": ["Delete"], "type": "ui"}, " button to the delete the selected entries. A confirmation dialog will display before entries are deleted."]}], "container": true, "type": "ord_group"}, {"body": [{"body": [{"indent": 4, "type": "para", "text": ["The deletion process is irreversible since interface definitions are also deleted from disk. To remove entries from the interface menu without deleting the definitions, please refer to the Editing the Interface Menu section above."]}], "indent": 0, "role": "item", "type": "warning"}], "container": true, "role": "item_group", "type": "warning_group"}], "indent": 0, "level": 2, "text": ["Deleting Interfaces"], "container": true, "type": "h", "id": null}, {"body": [{"indent": 0, "type": "para", "text": ["The interfaces tab is used to create and edit Python interfaces. The drop down\nmenu at the top can be used to select which interface to edit. ", {"text": ["New\nInterface"], "type": "ui"}, " creates a new interface and loads it into the editor. ", {"text": ["Delete\nInterface"], "type": "ui"}, " displays a dialog with a list of all interfaces that can be\ndeleted."]}, {"body": [{"body": [{"indent": 4, "type": "para", "text": ["The file path that the interface definition is saved to. The file\n    must be writeable by Houdini for changes to be saved correctly. If the path\n    is not writeable then an error message is displayed when attempting to\n    apply changes to the interface. The file path can be typed manually or\n    selected using the file browser on the right of the field."]}], "indent": 0, "type": "dt", "attrs": {"id": "saveto"}, "text": ["Save To"]}, {"body": [{"indent": 4, "type": "para", "text": ["The internal name of the interface.  This must be unique across all loaded\n    Python interfaces.  That is, at most one interface is loaded into for a\n    given internal name.  The name must start with a letter and can contain\n    letters, numbers, and/or underscores."]}], "indent": 0, "type": "dt", "attrs": {"id": "name"}, "text": ["Name"]}, {"body": [{"indent": 4, "type": "para", "text": ["The human-readable name of the interface. The label is used in the Python\n    Panel pane tab and in the menu interfaces menu.  Multiple interfaces may\n    share the same Label."]}], "indent": 0, "type": "dt", "attrs": {"id": "label"}, "text": ["Label"]}, {"body": [{"indent": 4, "type": "para", "text": ["Internal name, file path, or URL of the icon to use for the interface."]}, {"indent": 4, "type": "para", "text": ["Click the chooser button at the right end of the field to choose a file.\n    Note that you can choose a file contained in a digital asset (click\n    ", {"text": ["opdef:"], "type": "code"}, " on the left side of the file chooser)."]}, {"indent": 4, "type": "para", "text": ["If you don\u2019t supply an absolute path or URL, Houdini will look for the\n    icon using the path in the ", {"text": ["$HOUDINI_UI_ICON_PATH"], "type": "code"}, " environment variable."]}, {"indent": 4, "type": "para", "text": ["You can use an SVG file or any image format Houdini supports (such\n    as PNG or ", {"text": [".pic"], "type": "code"}, "). The icon image should be square."]}, {"indent": 4, "type": "para", "text": ["Houdini ships with a number of stock SVG icons. You can see bitmap\n    representations of these icons in ", {"text": ["$HFS/houdini/help/icons/large"], "type": "code"}, ". To specify a\n    stock icon, use the form ", {"text": [{"text": ["dirname"], "type": "var"}, "_", {"text": ["filename"], "type": "var"}], "type": "code"}, ", where\u2026"]}, {"body": [{"indent": 4, "blevel": 6, "type": "bullet", "text": [{"text": ["dirname"], "type": "var"}, " is the directory name under ", {"text": ["$HFS/houdini/help/icons/large"], "type": "code"}, ", such as ", {"text": ["OBJ"], "type": "code"}, ", ", {"text": ["SHELF"], "type": "code"}, ", or ", {"text": ["MISC"], "type": "code"}, ", and"]}, {"indent": 4, "blevel": 6, "type": "bullet", "text": [{"text": ["filename"], "type": "var"}, " is the icon\u2019s filename minus any extension. For example, ", {"text": ["OBJ_sticky"], "type": "code"}, " specifies the standard icon for the Sticky object."]}], "container": true, "type": "bullet_group"}], "indent": 0, "type": "dt", "attrs": {"id": "icon"}, "text": ["Icon"]}, {"body": [{"indent": 4, "type": "para", "text": ["The script definition for the Python interface. This is where any PySide2 or\n    PyQt5 code should be written to build the interface itself. When the\n    interface is loaded in a Python Panel, the script is run and the root\n    widget returned by the ", {"text": ["createInterface()"], "type": "code"}, " function is embedded into the\n    panel."]}, {"body": [{"body": [{"indent": 8, "type": "para", "text": ["The kwargs dictionary is available in the interface script.  The dictionary contains the following entries:"]}, {"body": [{"indent": 8, "blevel": 10, "type": "bullet", "text": [{"text": ["paneTab"], "type": "em"}, " - The pane tab (", {"_hs_sc": true, "text": "", "value": "/hom/hou/PaneTab", "fallback_text": "hou.PaneTab", "fullpath": "/hom/hou/PaneTab", "scheme": "Hom", "type": "link"}, ") that contains the interface."]}], "container": true, "type": "bullet_group"}, {"indent": 8, "type": "para", "text": ["Here is an example of using kwargs in the script:"]}, {"lang": "python", "indent": 8, "type": "pre", "text": ["\n        from PySide2 import QtWidgets\n\n        def createInterface():\n            panetab = kwargs[\"paneTab\"]\n\n            label = QtWidgets.QLabel()\n            label.setText(\"Running in pane tab '%s'\" % panetab.name())\n            return label\n        "]}], "indent": 4, "role": "item", "type": "note"}], "container": true, "role": "item_group", "type": "note_group"}], "indent": 0, "type": "dt", "attrs": {"id": "script"}, "text": ["Script"]}], "container": true, "type": "dt_group"}], "indent": 0, "level": 2, "text": ["Interfaces tab"], "container": true, "type": "h", "id": null}, {"body": [{"indent": 0, "type": "para", "text": ["The menu tab can be used to reorder the entries in the interface drop down menu\nand to add separators between entries. Only entries in the menu are \ndisplayed when selecting an interface from within a Python Panel."]}, {"indent": 0, "type": "para", "text": ["On the left of the menu tab is a list of all interfaces currently loaded into\nHoudini. The list on the right displays the current state of the Python Panel\nmenu. Entries can be added and removed from the Menu Entries list using drag\nand drop actions or by clicking the arrows between the lists."]}, {"indent": 0, "type": "para", "text": ["Only a single copy of an interface can be in the menu at a given time, so\nAvailable Interfaces entries are disabled once they have been added to the\nmenu. An unlimited number of separators can be added to the Menu Entries list."]}, {"indent": 0, "type": "para", "text": ["The ", {"text": ["Save To"], "type": "ui"}, " field indicates which file the menu is saved to. This file must\nbe writeable by Houdini."]}], "indent": 0, "level": 2, "text": ["Menu tab"], "container": true, "type": "h", "id": null}, {"body": [{"indent": 0, "type": "para", "text": ["Python Panel menu and interface definitions are stored in ", {"text": [".pypanel"], "type": "code"}, " files on disk."]}, {"indent": 0, "type": "para", "text": ["When Houdini starts up, it searches for ", {"text": [".pypanel"], "type": "code"}, " files in ", {"text": ["$HFS/houdini/python_panels"], "type": "code"}, " and then in ", {"text": ["$HOUDINI_USER_PREF_DIR/python_panels"], "type": "code"}, " by default and loads the definitions stored in those files."]}, {"indent": 0, "type": "para", "text": ["If ", {"text": ["$HOUDINI_PATH"], "type": "code"}, " is set, then Houdini instead searches for files in the ", {"text": ["python_panels"], "type": "code"}, " subdirectory for each path listed in ", {"text": ["$HOUDINI_PATH"], "type": "code"}, "."]}, {"indent": 0, "type": "para", "text": ["You can override the search path by setting ", {"text": ["$HOUDINI_PYTHON_PANEL_PATH"], "type": "code"}, "."]}, {"body": [{"body": [{"indent": 4, "type": "para", "text": ["Houdini loads ", {"text": [".pypanel"], "type": "code"}, " files in the order of the directories specified by\n    ", {"text": ["$HOUDINI_PYTHON_PANEL_PATH"], "type": "code"}, " and then in alphabetcial order by filename."]}, {"indent": 4, "type": "para", "text": ["If multiple Python Panel interfaces with the same internal name are found\n    on disk, then Houdini uses the last interface definition that it\n    loaded.  "]}, {"indent": 4, "type": "para", "text": ["Similarly, Houdini uses the last interfaces menu definition that it loaded."]}], "indent": 0, "role": "item", "type": "note"}], "container": true, "role": "item_group", "type": "note_group"}], "indent": 0, "level": 2, "text": ["Python Panel files"], "container": true, "type": "h", "id": null}, {"body": [{"text": ["\n", {"text": ["\n    ", {"text": ["\n        ", {"text": ["Example name"], "tag": "th", "type": "xml", "attrs": {}}, "\n        ", {"text": [], "tag": "th", "type": "xml", "attrs": {}}, "\n    "], "tag": "tr", "type": "xml", "attrs": {}}, "\n    ", {"text": ["\n        ", {"text": ["Linked Parameters"], "tag": "td", "type": "xml", "attrs": {"class": "examplelink"}}, "\n        ", {"text": [{"text": [{"text": ["Load"], "tag": "a", "type": "xml", "attrs": {"href": "javascript:loadExample('/examples/python_panels/linkedparameters.pypanel', false)"}}], "tag": "strong", "type": "xml", "attrs": {}}, "\n        "], "tag": "td", "type": "xml", "attrs": {"class": "exampleload"}}, "\n    "], "tag": "tr", "type": "xml", "attrs": {}}, "\n    ", {"text": ["\n        ", {"text": ["\n        ", {"text": ["This example demonstrates how to link PySide2 parameter widgets (i.e. text fields and sliders) to Houdini node parameters and vice versa."], "tag": "p", "type": "xml", "attrs": {}}, "\n        "], "tag": "td", "type": "xml", "attrs": {"colspan": "2", "class": "exampletext"}}, "\n    "], "tag": "tr", "type": "xml", "attrs": {}}, "\n    ", {"text": ["\n        ", {"text": ["Drag and Drop"], "tag": "td", "type": "xml", "attrs": {"class": "examplelink"}}, "\n        ", {"text": [{"text": [{"text": ["Load"], "tag": "a", "type": "xml", "attrs": {"href": "javascript:loadExample('/examples/python_panels/dragdrop.pypanel', false)"}}], "tag": "strong", "type": "xml", "attrs": {}}, "\n        "], "tag": "td", "type": "xml", "attrs": {"class": "exampleload"}}, "\n    "], "tag": "tr", "type": "xml", "attrs": {}}, "\n    ", {"text": ["\n        ", {"text": ["\n        ", {"text": ["This example demonstrates how to respond to drag and drop events from Houdini."], "tag": "p", "type": "xml", "attrs": {}}, "\n        "], "tag": "td", "type": "xml", "attrs": {"colspan": "2", "class": "exampletext"}}, "\n    "], "tag": "tr", "type": "xml", "attrs": {}}, "\n    ", {"text": ["\n        ", {"text": ["Custom Graphics Scene"], "tag": "td", "type": "xml", "attrs": {"class": "examplelink"}}, "\n        ", {"text": [{"text": [{"text": ["Load"], "tag": "a", "type": "xml", "attrs": {"href": "javascript:loadExample('/examples/python_panels/customgraphicsscene.pypanel', false)"}}], "tag": "strong", "type": "xml", "attrs": {}}, "\n        "], "tag": "td", "type": "xml", "attrs": {"class": "exampleload"}}, "\n    "], "tag": "tr", "type": "xml", "attrs": {}}, "\n    ", {"text": ["\n        ", {"text": ["\n        ", {"text": ["This example demonstrates how to use a custom GraphicsScene subclass in a Python panel to make OpenGL calls."], "tag": "p", "type": "xml", "attrs": {}}, "\n        "], "tag": "td", "type": "xml", "attrs": {"colspan": "2", "class": "exampletext"}}, "\n    "], "tag": "tr", "type": "xml", "attrs": {}}, "\n\n    ", {"text": ["\n        ", {"text": ["Qt Events"], "tag": "td", "type": "xml", "attrs": {"class": "examplelink"}}, "\n        ", {"text": [{"text": [{"text": ["Load"], "tag": "a", "type": "xml", "attrs": {"href": "javascript:loadExample('/examples/python_panels/qtevents.pypanel', false)"}}], "tag": "strong", "type": "xml", "attrs": {}}, "\n        "], "tag": "td", "type": "xml", "attrs": {"class": "exampleload"}}, "\n    "], "tag": "tr", "type": "xml", "attrs": {}}, "\n    ", {"text": ["\n        ", {"text": ["\n        ", {"text": ["This example demonstrates how to handle widget events in a Python Panel."], "tag": "p", "type": "xml", "attrs": {}}, "\n        "], "tag": "td", "type": "xml", "attrs": {"colspan": "2", "class": "exampletext"}}, "\n    "], "tag": "tr", "type": "xml", "attrs": {}}, "\n    ", {"text": ["\n        ", {"text": ["Qt Designer"], "tag": "td", "type": "xml", "attrs": {"class": "examplelink"}}, "\n        ", {"text": [{"text": [{"text": ["Load"], "tag": "a", "type": "xml", "attrs": {"href": "javascript:loadExample('/examples/python_panels/qtdesigner.pypanel', false)"}}], "tag": "strong", "type": "xml", "attrs": {}}, "\n        "], "tag": "td", "type": "xml", "attrs": {"class": "exampleload"}}, "\n    "], "tag": "tr", "type": "xml", "attrs": {}}, "\n    ", {"text": ["\n        ", {"text": ["\n        ", {"text": ["This example demonstrates how to load an interface created by ", {"text": ["Qt Designer"], "tag": "a", "type": "xml", "attrs": {"href": "http://qt-project.org/doc/qt-4.8/designer-manual.html"}}, "."], "tag": "p", "type": "xml", "attrs": {}}, "\n        "], "tag": "td", "type": "xml", "attrs": {"colspan": "2", "class": "exampletext"}}, "\n    "], "tag": "tr", "type": "xml", "attrs": {}}, "\n    ", {"text": ["\n        ", {"text": ["Viewport Color Editor"], "tag": "td", "type": "xml", "attrs": {"class": "examplelink"}}, "\n        ", {"text": [{"text": [{"text": ["Load"], "tag": "a", "type": "xml", "attrs": {"href": "javascript:loadExample('/examples/python_panels/viewportcoloreditor.pypanel', false)"}}], "tag": "strong", "type": "xml", "attrs": {}}, "\n        "], "tag": "td", "type": "xml", "attrs": {"class": "exampleload"}}, "\n    "], "tag": "tr", "type": "xml", "attrs": {}}, "\n    ", {"text": ["\n        ", {"text": ["\n        ", {"text": ["This example provides a PySide2 interface for editing viewport colors."], "tag": "p", "type": "xml", "attrs": {}}, "\n        "], "tag": "td", "type": "xml", "attrs": {"colspan": "2", "class": "exampletext"}}, "\n    "], "tag": "tr", "type": "xml", "attrs": {}}, "\n"], "tag": "tbody", "type": "xml", "attrs": {}}, "\n"], "tag": "table", "type": "xml", "attrs": {"class": "examplestable"}}, {"body": [{"body": [], "indent": 0, "text": ["Viewport color editor"], "role": "item", "attrs": {"path": "/examples/python_panels/viewportcoloreditor", "examplefile": "/examples/python_panels/viewportcoloreditor.pypanel"}, "type": "load_example"}], "container": true, "role": "item_group", "type": "load_example_group"}], "indent": 0, "level": 2, "text": ["Examples"], "container": true, "type": "h", "id": null}, {"body": [{"body": [{"indent": 0, "blevel": 2, "type": "bullet", "text": [{"_hs_sc": true, "text": ["Python Panel"], "value": "/ref/panes/pythonpanel", "fullpath": "/ref/panes/pythonpanel", "scheme": null, "type": "link"}]}], "container": true, "type": "bullet_group"}], "indent": 0, "level": 1, "text": "Related", "role": "section", "container": true, "type": "related_section", "id": "related"}], "type": "root", "attrs": {"helpid": "h.pythonpanel.editor"}, "title": ["Python Panel Editor"]}