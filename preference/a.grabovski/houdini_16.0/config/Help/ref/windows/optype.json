{"body": [{"indent": 0, "text": ["Operator Type Properties window"], "type": "title", "level": 0}, {"indent": 0, "type": "para", "text": ["The type properties window lets you set up the options and parameters of\na ", {"_hs_sc": true, "text": ["digital asset"], "value": "/assets", "fullpath": "/assets", "scheme": null, "type": "link"}, "  (see ", {"_hs_sc": true, "text": ["how to create a digital\nasset"], "value": "/assets/create", "fullpath": "/assets/create", "scheme": null, "type": "link"}, " ). As you develop an asset, you will use the\ncontrols in this window a great deal, mostly as you ", {"_hs_sc": true, "text": ["refine the\ninterface"], "value": "/assets/asset_ui", "fullpath": "/assets/asset_ui", "scheme": null, "type": "link"}, "  using the ", {"text": ["Parameters"], "type": "ui"}, " tab."]}, {"body": [{"body": [{"body": [{"indent": 4, "blevel": 6, "type": "bullet", "text": ["In a  ", {"_hs_sc": true, "text": ["network editor"], "value": "/ref/panes/network", "fullpath": "/ref/panes/network", "scheme": null, "type": "link"}, "  or\n      ", {"_hs_sc": true, "text": ["tree view"], "value": "/ref/panes/treeview", "fullpath": "/ref/panes/treeview", "scheme": null, "type": "link"}, " , press ", {"keys": ["RMB"], "text": null, "type": "keys"}, " on\n      a digital asset node and choose ", {"text": ["Type Properties"], "type": "ui"}, "."]}, {"indent": 4, "blevel": 6, "type": "bullet", "text": ["In the  ", {"_hs_sc": true, "text": ["operator type manager\n      window"], "value": "/ref/windows/optypemanager", "fullpath": "/ref/windows/optypemanager", "scheme": null, "type": "link"}, " , press ", {"keys": ["RMB"], "text": null, "type": "keys"}, " on\n      the digital asset definition and choose ", {"text": ["Type Properties"], "type": "ui"}, ".\n      In this case you are accessing the stored definition, which\n      will not show any unaccepted changes you may have made to\n      asset instances you have placed in your scene."]}], "container": true, "type": "bullet_group"}], "indent": 0, "role": "item", "type": "task", "text": ["Open the type properties window"]}, {"body": [{"indent": 4, "type": "para", "text": ["See ", {"_hs_sc": true, "fragment": "#import", "text": ["importing parameters"], "value": "#import", "fullpath": "/ref/windows/optype#import", "scheme": null, "type": "link"}, " below."]}], "indent": 0, "role": "item", "type": "task", "text": ["Import/promote parameters from another node onto this node\u2019s UI"]}, {"body": [{"body": [{"indent": 4, "blevel": 6, "type": "bullet", "text": ["Click ", {"text": ["Apply"], "type": "ui"}, " to save all the current changes into the\n      operator type library specified in the Save To Library field."]}, {"indent": 4, "blevel": 6, "type": "bullet", "text": ["Click ", {"text": ["Accept"], "type": "ui"}, " to save the operator definition to the\n      library and close the window."]}], "container": true, "type": "bullet_group"}], "indent": 0, "role": "item", "type": "task", "text": ["Save changes to the asset definition"]}, {"body": [{"body": [{"indent": 4, "blevel": 6, "type": "bullet", "text": ["Click ", {"text": ["Discard"], "type": "ui"}, " to undo any changes you have made."]}, {"indent": 4, "blevel": 6, "type": "bullet", "text": ["Click ", {"text": ["Cancel"], "type": "ui"}, " to undo any changes and close the window."]}], "container": true, "type": "bullet_group"}], "indent": 0, "role": "item", "type": "task", "text": ["Discard any changes since the last apply"]}], "container": true, "role": "item_group", "type": "task_group"}, {"body": [{"body": [{"indent": 4, "type": "para", "text": ["This window must be open to accept or apply any changes you have\n    made to an asset. Even if you add an operator or make a new network\n    connection, you must open up the Operator Type Properties panel and\n    click ", {"text": ["Accept"], "type": "ui"}, " or ", {"text": ["Apply"], "type": "ui"}, " to update the asset\u2019s definition."]}], "indent": 0, "role": "item", "type": "note"}], "container": true, "role": "item_group", "type": "note_group"}, {"body": [{"indent": 0, "type": "para", "text": ["You can build the UI of your asset by promoting parameters\nfrom nodes inside the asset\u2019s network."]}, {"body": [{"body": [{"body": [{"body": [{"indent": 6, "type": "para", "text": ["or"]}], "indent": 4, "blevel": 6, "type": "bullet", "text": ["Drag the parameter from a parameter showing the other\n      node\u2019s parameters into the ", {"text": ["Existing Parameters"], "type": "ui"}, " tree\n      (on the ", {"text": ["Parameters"], "type": "ui"}, " tab) of the type properties window."]}, {"indent": 4, "blevel": 6, "type": "bullet", "text": ["On the ", {"text": ["Parameters"], "type": "ui"}, " tab, under ", {"text": ["Create Parameters"], "type": "ui"}, ",\n      click ", {"text": ["From nodes"], "type": "ui"}, ". Find the parameter(s) in the\n      tree and drag them into the ", {"text": ["Existing Parameters"], "type": "ui"}, " tree."]}], "container": true, "type": "bullet_group"}], "indent": 0, "role": "item", "type": "task", "text": ["Promote individual or small groups of parameters"]}], "container": true, "role": "item_group", "type": "task_group"}], "indent": 0, "level": 2, "text": ["How to import parameters from another node"], "container": true, "type": "h", "id": "import"}, {"body": [{"body": [{"body": [{"indent": 4, "type": "para", "text": ["The ", {"text": ["Name"], "type": "ui"}, ", ", {"text": ["Label"], "type": "ui"}, ", ", {"text": ["Min inputs"], "type": "ui"}, ", ", {"text": ["Max inputs"], "type": "ui"}, ", and\n    ", {"text": ["Install library to"], "type": "ui"}, " controls are the same as in the  ", {"_hs_sc": true, "text": ["create\n    digital asset dialog"], "value": "createtype", "fullpath": "/ref/windows/createtype", "scheme": null, "type": "link"}, " used to\n    create the digital asset."]}], "indent": 0, "role": "item", "type": "note"}], "container": true, "role": "item_group", "type": "note_group"}, {"body": [{"body": [{"indent": 4, "type": "para", "text": ["The operator type version string. This can be any text string. You can use\n    a simple incrementing integer like \"016\" or more point number strings like\n    \"1.0.23\". When a node is saved, its operator type version string is saved\n    along with it. Then when it is loaded again, the saved version is compared\n    with the current operator type\u2019s version. If they are different, then the\n    ", {"_hs_sc": true, "fragment": "#events", "text": ["Upgrade Loaded Parameters"], "value": "/ref/windows/optype#events", "fullpath": "/ref/windows/optype#events", "scheme": null, "type": "link"}, " event\n    handler script is invoked. See the event handler description for more\n    details."]}], "indent": 0, "type": "dt", "text": ["Version"]}, {"body": [{"indent": 4, "type": "para", "text": ["Internal name, file path, or URL of the icon to use for the shelf item.\n    Click the chooser button at the right end of the field to choose a file.\n    Note that you can choose a file contained in a digital asset (click\n    ", {"text": ["opdef:"], "type": "code"}, " on the left side of the file chooser)."]}, {"indent": 4, "type": "para", "text": ["If you don\u2019t supply an absolute path or URL, Houdini will look for the\n    icon using the path in the ", {"text": ["$HOUDINI_UI_ICON_PATH"], "type": "code"}, " environment variable."]}, {"indent": 4, "type": "para", "text": ["You can use any an SVG file or any image format Houdini supports (such\n    as PNG or ", {"text": [".pic"], "type": "code"}, "). The icon image should be square."]}, {"indent": 4, "type": "para", "text": ["Houdini ships with a number of stock SVG icons. You can see bitmap representations of these icons in ", {"text": ["$HFS/mozilla/documents/icons/large"], "type": "code"}, ". To specify a stock icon, use the form ", {"text": [{"text": ["dirname"], "type": "var"}, "_", {"text": ["filename"], "type": "var"}], "type": "code"}, ", where\u2026"]}, {"body": [{"indent": 4, "blevel": 6, "type": "bullet", "text": [{"text": ["dirname"], "type": "var"}, " is the directory name under ", {"text": ["$HFS/mozilla/documents/icons/large"], "type": "code"}, ", such as ", {"text": ["OBJ"], "type": "code"}, ", ", {"text": ["SHELF"], "type": "code"}, ", or ", {"text": ["MISC"], "type": "code"}, ", and"]}, {"indent": 4, "blevel": 6, "type": "bullet", "text": [{"text": ["filename"], "type": "var"}, " is the icon\u2019s filename minus any extension. For example, ", {"text": ["OBJ_sticky"], "type": "code"}, " specifies the standard icon for the Sticky object."]}], "container": true, "type": "bullet_group"}, {"body": [{"body": [{"indent": 8, "type": "para", "text": ["All the icons are cached in memory once they've been loaded, so you have to restart Houdini to refresh them. "]}], "indent": 4, "role": "item", "type": "note"}], "container": true, "role": "item_group", "type": "note_group"}], "indent": 0, "type": "dt", "attrs": {"id": "icon"}, "text": ["Icon"]}, {"body": [{"indent": 4, "type": "para", "text": ["An option to save the icon inside the operator definition. With this option\n    turned on, the icon will be saved in the operator definition section.\n    If this option is turned off, no icon data is saved with the operator\n    and the icon file specified in the Icon filed will be used to find the\n    icon for the operator each time the operator is loaded into session."]}], "indent": 0, "type": "dt", "text": ["Embed Icon in Operator"]}], "container": true, "type": "dt_group"}], "indent": 0, "level": 2, "text": ["Basic tab"], "container": true, "type": "h", "id": "basic"}, {"body": [{"body": [{"indent": 0, "blevel": 2, "type": "bullet", "text": ["To promote parameters from inside the asset up to the asset\u2019s UI,\n  drag the parameter into the list on the left. Drag a node from the\n  network editor to add all its parameters."]}, {"indent": 0, "blevel": 2, "type": "bullet", "text": ["To create a new parameter from scratch, choose a parameter type\n  from the menu above the list on the left."]}, {"indent": 0, "blevel": 2, "type": "bullet", "text": ["To organize the parameters into tabs, use the menu above the list\n  on the left to create \"folders\"."]}, {"indent": 0, "blevel": 2, "type": "bullet", "text": ["Drag and drop parameters into the folders to reorder them and\n  organize them inside folders."]}], "container": true, "type": "bullet_group"}, {"body": [{"body": [{"body": [{"indent": 4, "type": "para", "text": ["Controls how the folder contents are\n    presented in the asset\u2019s parameter editor interface for parameter folders. The default is to show the folder as a tab."]}, {"indent": 4, "type": "para", "text": ["The ", {"text": ["Import block"], "type": "ui"}, " setting\n    displays the contents inline. This is useful when you want\n    to import a folder from a sub-node (see ", {"text": ["Import settings"], "type": "ui"}, "\n    below) but don\u2019t want the imported contents to appear in\n    their own tab."]}], "indent": 0, "type": "dt", "text": ["Folder type"]}, {"body": [{"indent": 4, "type": "para", "text": ["Internal name of the folder which cannot contain spaces."]}], "indent": 0, "type": "dt", "text": ["Name"]}, {"body": [{"indent": 4, "type": "para", "text": ["Readable label for the folder, displayed in the interface.\n    This name can contain spaces."]}], "indent": 0, "type": "dt", "text": ["Label"]}, {"body": [{"indent": 4, "type": "para", "text": ["Default values for multi-parms."]}], "indent": 0, "type": "dt", "text": ["Default"]}, {"body": [{"indent": 4, "type": "para", "text": ["This is useful when you are importing the node\u2019s parameters but\n    you want this folder to not be imported."]}], "indent": 0, "type": "dt", "text": ["Available for import"]}, {"body": [{"indent": 4, "type": "para", "text": ["This folder and its contents are not visible in the parameter\n    interface, they are only available for scripting."]}], "indent": 0, "type": "dt", "text": ["Invisible"]}, {"body": [{"indent": 4, "type": "para", "text": ["Consecutive folders of type ", {"text": ["Tabs"], "type": "ui"}, " are turned into a set\n    of tabs. If you want to separate a set of consecutive tab\n    folders into two or more sets of tabs, turn this option on\n    for the last tab of a set of tabs. The next folder of type\n    ", {"text": ["Tabs"], "type": "ui"}, " will start a new set of tabs."]}], "indent": 0, "type": "dt", "text": ["End tab group"]}, {"body": [{"indent": 4, "type": "para", "text": ["Specifies ", {"_hs_sc": true, "fragment": "#conditionals", "text": ["conditional rules"], "value": "/ref/windows/optype#conditionals", "fullpath": "/ref/windows/optype#conditionals", "scheme": null, "type": "link"}, " \n    for when to hide this tab or radio folder."]}], "indent": 0, "type": "dt", "text": ["Tab Hide When"]}, {"body": [{"indent": 4, "type": "para", "text": ["Specifies ", {"_hs_sc": true, "fragment": "#conditionals", "text": ["conditional rules"], "value": "/ref/windows/optype#conditionals", "fullpath": "/ref/windows/optype#conditionals", "scheme": null, "type": "link"}, " \n    for when to hide all tab or radio folders of the current group. \n    This setting can only be used on the first folder of the group."]}], "indent": 0, "type": "dt", "text": ["Group Hide When"]}, {"body": [{"indent": 4, "type": "para", "text": ["Turn this on have this folder import its contents from a\n    folder on a node inside this asset."]}, {"body": [{"body": [{"indent": 8, "type": "para", "text": ["You still need to open the operator type properties window\u2019s ", {"_hs_sc": true, "text": "", "value": "BUTTONS/gear", "fullpath": "/ref/windows/BUTTONS/gear", "scheme": "Icon", "type": "link"}, " Gear menu and choose ", {"text": ["Refresh imports"], "type": "ui"}, " to actually import or re-import the parameters."]}], "indent": 4, "role": "item", "type": "note"}], "container": true, "role": "item_group", "type": "note_group"}], "indent": 0, "type": "dt", "text": ["Import settings"]}, {"body": [{"indent": 4, "type": "para", "text": ["The source to import from.  The source can be either a\n    sub-node, specified using ", {"text": ["op:<node_path>"], "type": "code"}, ", or an external\n    dialog script, specified using ", {"text": ["file:<file_path>"], "type": "code"}, ".  For\n    example, to import parameters from a node named ", {"text": ["torus1"], "type": "code"}, "\n    inside the asset, use ", {"text": ["op:torus1"], "type": "code"}, ". To import from a node\n    named ", {"text": ["sphere1"], "type": "code"}, " inside an object named ", {"text": ["geo1"], "type": "code"}, " inside the\n    asset, use ", {"text": ["op:geo1/sphere1"], "type": "code"}, "."]}], "indent": 0, "type": "dt", "text": ["Source"]}, {"body": [{"indent": 4, "type": "para", "text": ["The entity to import from the source.  You can import either\n    a group of folders, a single folder, an import block, or all\n    the parameters from the source."]}, {"indent": 4, "type": "para", "text": ["To import a group of folders, use the ", {"text": ["Name"], "type": "ui"}, " of that set of\n    folders.  To import a single folder, use the ", {"text": ["Name"], "type": "ui"}, " of the\n    folder, followed by a colon (", {"text": [":"], "type": "code"}, "), followed by the ", {"text": ["Label"], "type": "ui"}, "\n    of the folder you want to import.  For example, to import a\n    folder named ", {"text": ["folder1"], "type": "code"}, " with the label ", {"text": ["Shading"], "type": "code"}, ", the token\n    would be ", {"text": ["folder1:Shading"], "type": "code"}, ".  To import an import block, use\n    the special token ", {"text": ["importblock"], "type": "code"}, ", followed by a colon (", {"text": [":"], "type": "code"}, "),\n    followed by the ", {"text": ["Label"], "type": "ui"}, " of the import block you want to\n    import.  Finally, to import all the parameters from the\n    source, leave the token blank."]}, {"indent": 4, "type": "para", "text": ["You can obtain the name of a folder by selecting the sub-node\n    and choosing ", {"text": ["Edit Parameter Interface"], "type": "ui"}, " from the\n    ", {"_hs_sc": true, "text": "", "value": "BUTTONS/gear", "fullpath": "/ref/windows/BUTTONS/gear", "scheme": "Icon", "type": "link"}, " Gear menu in the parameter editor.\n    Alternatively, you can also find the desired folder in the\n    ", {"text": ["From Nodes"], "type": "ui"}, " tree and MMB on it."]}], "indent": 0, "type": "dt", "text": ["Token"]}, {"body": [{"indent": 4, "type": "para", "text": ["Only import parameters matching this mask."]}, {"indent": 4, "type": "para", "text": ["Note that excluding a multiparm will not automatically exclude\n    any existing instances.  However, including a multiparm will\n    exclude these individual instances as they are represented by\n    templates of the multiparm."]}], "indent": 0, "type": "dt", "text": ["Mask"]}], "container": true, "type": "dt_group"}], "indent": 0, "level": 3, "text": ["Parameter Description: folders"], "container": true, "type": "h", "id": "importfolder"}, {"body": [{"body": [{"body": [{"indent": 4, "type": "para", "text": ["The internal name of the parameter. You will use this name\n    to refer to the parameter\u2019s value in expressions. It must be\n    unique within this operator type. This name cannot contain\n    spaces or slashes."]}], "indent": 0, "type": "dt", "text": ["Name"]}, {"body": [{"indent": 4, "type": "para", "text": ["A readable label for the parameter. This name can contain spaces."]}], "indent": 0, "type": "dt", "text": ["Label"]}, {"body": [{"indent": 4, "type": "para", "text": ["The data type this ramp parameter contains. This can either be RGB for\n    colors, or Float for scalar values."]}], "indent": 0, "type": "dt", "text": ["Ramp Type"]}, {"body": [{"indent": 4, "type": "para", "text": ["The initial number of ramp points when this parameter is created."]}], "indent": 0, "type": "dt", "text": ["Default Points"]}, {"body": [{"indent": 4, "type": "para", "text": ["The default interpolation type for ramp points."]}], "indent": 0, "type": "dt", "text": ["Def Interpolation"]}, {"body": [{"indent": 4, "type": "para", "text": ["Specifies the starting number associated with the first ramp point. This\n    only affects scripting, which refers to the internal names of the ramp\n    point parameters."]}], "indent": 0, "type": "dt", "text": ["First Instance"]}, {"body": [{"indent": 4, "type": "para", "text": ["Specifies ", {"_hs_sc": true, "fragment": "#conditionals", "text": ["conditional rules"], "value": "/ref/windows/optype#conditionals", "fullpath": "/ref/windows/optype#conditionals", "scheme": null, "type": "link"}, " for when \n    to disable the ramp parameter."]}], "indent": 0, "type": "dt", "text": ["Disable When"]}, {"body": [{"indent": 4, "type": "para", "text": ["Specifies ", {"_hs_sc": true, "fragment": "#conditionals", "text": ["conditional rules"], "value": "/ref/windows/optype#conditionals", "fullpath": "/ref/windows/optype#conditionals", "scheme": null, "type": "link"}, " for when \n    to hide the ramp parameter."]}], "indent": 0, "type": "dt", "text": ["Hide When"]}, {"body": [{"indent": 4, "type": "para", "text": ["The dialogs in which the parameter will appear."]}, {"body": [{"body": [{"indent": 8, "type": "para", "text": ["Parameter appears in the ", {"_hs_sc": true, "text": ["parameter editor"], "value": "/ref/panes/parms", "fullpath": "/ref/panes/parms", "scheme": null, "type": "link"}, " pane."]}], "indent": 4, "type": "dt", "text": ["Main dialog"]}, {"body": [{"indent": 8, "type": "para", "text": ["Parameter appears in:"]}, {"body": [{"indent": 8, "blevel": 10, "type": "bullet", "text": ["The ", {"_hs_sc": true, "text": ["parameter editor"], "value": "/ref/panes/parms", "fullpath": "/ref/panes/parms", "scheme": null, "type": "link"}, " pane."]}, {"indent": 8, "blevel": 10, "type": "bullet", "text": ["The mini-parameter editor that appears when the user\n          presses ", {"keys": ["P"], "text": null, "type": "keys"}, " while the operator is active."]}], "container": true, "type": "bullet_group"}], "indent": 4, "type": "dt", "text": ["Main & tool dialogs"]}, {"body": [{"indent": 8, "type": "para", "text": ["Parameter appears in:"]}, {"body": [{"indent": 8, "blevel": 10, "type": "bullet", "text": ["The ", {"_hs_sc": true, "text": ["parameter editor"], "value": "/ref/panes/parms", "fullpath": "/ref/panes/parms", "scheme": null, "type": "link"}, " pane."]}, {"indent": 8, "blevel": 10, "type": "bullet", "text": ["The mini-parameter editor that appears when the user\n          presses ", {"keys": ["P"], "text": null, "type": "keys"}, " while the operator is active."]}, {"indent": 8, "blevel": 10, "type": "bullet", "text": ["The operation controls toolbar (at the top of the\n          viewer pane) when the operator is active. ", {"text": ["Pane \u25b8 Toolbars and controls \u25b8 Operation controls"], "type": "ui"}, ")."]}], "container": true, "type": "bullet_group"}], "indent": 4, "type": "dt", "text": ["Main & tool dialogs + toolbox"]}], "container": true, "type": "dt_group"}], "indent": 0, "type": "dt", "text": ["Show Parm In"]}, {"body": [{"indent": 4, "type": "para", "text": ["If enabled, the ramp controls panel will be open by default in Parameter\n    dialogs."]}], "indent": 0, "type": "dt", "text": ["Show Controls By Default"]}, {"body": [{"indent": 4, "type": "para", "text": ["Whether this parameter is imported by import folders on a parent asset.\n    See about ", {"_hs_sc": true, "fragment": "#importfolder", "text": ["importing folders from a sub-node"], "value": "#importfolder", "fullpath": "/ref/windows/optype#importfolder", "scheme": null, "type": "link"}, " above."]}], "indent": 0, "type": "dt", "text": ["Available for import"]}, {"body": [{"indent": 4, "type": "para", "text": ["Specifies the VEX variable names when used in a shader for the basis,\n    keys, and values parameters."]}], "indent": 0, "type": "dt", "text": ["VEX Ramp Variables"]}, {"body": [{"indent": 4, "type": "para", "text": ["Specifies options to control the look and behaviour of key-value dictionary\n    parameters."]}, {"body": [{"body": [{"indent": 8, "type": "para", "text": ["The key column label.  If left empty, then the key column\u2019s label is set to \"Key\"."]}], "indent": 4, "type": "dt", "text": ["Key Label"]}, {"body": [{"indent": 8, "type": "para", "text": ["The value column label.  If left empty, then the value column\u2019s label\n        is set to \"Value\"."]}], "indent": 4, "type": "dt", "text": ["Value Label"]}, {"body": [{"indent": 8, "type": "para", "text": ["Turn on the checkbox to add a button for choosing a key-value pair from\n        a pre-defined list."]}], "indent": 4, "type": "dt", "text": ["Add Chooser"]}, {"body": [{"indent": 8, "type": "para", "text": ["The label of the chooser button."]}, {"indent": 8, "type": "para", "text": ["This option only applies if Add Chooser is checked on."]}], "indent": 4, "type": "dt", "text": ["Chooser Label"]}, {"body": [{"indent": 8, "type": "para", "text": ["The Python callback script that is invoked when the chooser button is\n        clicked.  The script is responsible for providing the user with a list\n        of key-value pair options to select from.  The script must return a\n        2-tuple containing the selected key and its corresponding value.  If no\n        key-value pair is selected then the script must return a 2-tuple of\n        empty strings."]}, {"indent": 8, "type": "para", "text": ["This option only applies if Add Chooser is checked on."]}], "indent": 4, "type": "dt", "text": ["Chooser Callback"]}], "container": true, "type": "dt_group"}], "indent": 0, "type": "dt", "text": ["Key-Value Dictionary Options"]}], "container": true, "type": "dt_group"}], "indent": 0, "level": 3, "text": ["Parameter Description: ramps"], "container": true, "type": "h", "id": "ramps"}, {"body": [{"body": [{"body": [{"indent": 4, "type": "para", "text": ["The internal name of the parameter. You will use this name\n    to refer to the parameter\u2019s value in expressions. It must be\n    unique within this operator type. This name cannot contain\n    spaces or slashes."]}], "indent": 0, "type": "dt", "text": ["Name"]}, {"body": [{"indent": 4, "type": "para", "text": ["A readable label for the parameter. This name can\n    contain spaces."]}, {"indent": 4, "type": "para", "text": ["Turn off the associated checkbox to hide the label. This is\n    especially useful when you lay out parameters side-by-side\n    using the ", {"text": ["Horizontally join to next parameter"], "type": "ui"}, " option."]}], "indent": 0, "type": "dt", "text": ["Label"]}, {"body": [{"indent": 4, "type": "para", "text": ["The data type this parameter contains."]}, {"body": [{"body": [{"indent": 8, "type": "para", "text": ["A 2D angle (in degrees). You can increase the ", {"text": ["Size"], "type": "ui"}, "\n        to store up to four angles in a single parameter. Use\n        ", {"text": ["Direction vector"], "type": "ui"}, " for a 3D direction vector."]}, {"indent": 8, "type": "para", "text": ["If the parameter tuple-size is 2, the channels will be prefixed with begin and end\n        rather than suffixed with 1 and 2."]}], "indent": 4, "type": "dt", "text": ["Angle"]}, {"body": [{"indent": 8, "type": "para", "text": ["An action button. Clicking the button runs the\n        ", {"text": ["Callback script"], "type": "ui"}, " (see below)."]}], "indent": 4, "type": "dt", "text": ["Button"]}, {"body": [{"indent": 8, "type": "para", "text": ["A list of text buttons represented using an integer.\n        The strip can act as radio buttons or as toggle buttons based on the type of menu items.\n        The menu label defines the buttons labels."]}, {"indent": 8, "type": "para", "text": ["See the ", {"_hs_sc": true, "fragment": "#menu_tab", "text": ["menu subtab"], "value": "/ref/windows/optype#menu_tab", "fullpath": "/ref/windows/optype#menu_tab", "scheme": null, "type": "link"}, " for how to edit the menu items."]}, {"indent": 8, "type": "para", "text": ["See ", {"_hs_sc": true, "fragment": "#strip_callback", "text": ["a python script callback"], "value": "/ref/windows/optype#strip_callback", "fullpath": "/ref/windows/optype#strip_callback", "scheme": null, "type": "link"}, " for help on how to turn radio buttons into a list of buttons with an attached script callback."]}], "indent": 4, "type": "dt", "text": ["Button Strip"]}, {"body": [{"indent": 8, "type": "para", "text": ["An RGB color. Houdini provides a color swatch/picker\n        UI."]}, {"indent": 8, "type": "para", "text": ["The channels will use the suffixes r, g, b rather than 1, 2, 3."]}], "indent": 4, "type": "dt", "text": ["Color"]}, {"body": [{"indent": 8, "type": "para", "text": ["An RGBA color. Houdini provides a color swatch/picker\n        UI."]}, {"indent": 8, "type": "para", "text": ["The channels will use the suffixes r, g, b, a rather than 1, 2, 3, 4."]}], "indent": 4, "type": "dt", "text": ["Color and Alpha"]}, {"body": [{"indent": 8, "type": "para", "text": ["A vector that represents a direction in 3D space."]}, {"indent": 8, "type": "para", "text": ["The created channels will use the suffixes x, y and z rather\n        than 1, 2 and 3."]}], "indent": 4, "type": "dt", "text": ["Direction Vector"]}, {"body": [{"indent": 8, "type": "para", "text": ["A path to a file. Houdini provides a file picker UI for\n        the parameter. If this parameter specifies an image file\n        or geometry file, use the more specific datatypes below\n        to have the file picker only show the specific file\n        types."]}], "indent": 4, "type": "dt", "text": ["File"]}, {"body": [{"indent": 8, "type": "para", "text": ["A path to a geometry file. Houdini provides a file\n        picker UI that shows geometry files."]}], "indent": 4, "type": "dt", "text": ["File - Geometry"]}, {"body": [{"indent": 8, "type": "para", "text": ["A path to an image file. Houdini provides a file picker\n        UI that shows image files."]}], "indent": 4, "type": "dt", "text": ["File - Image"]}, {"body": [{"indent": 8, "type": "para", "text": ["A number with a decimal part."]}], "indent": 4, "type": "dt", "text": ["Float"]}, {"body": [{"indent": 8, "type": "para", "text": ["A float vector of two, three, or four components."]}, {"indent": 8, "type": "para", "text": ["Check the rest of the menu for more specific datatypes\n        that might match what you want to store in a vector\n        (such as an RGB color). The more specific datatypes\n        store their values as a vector, but provide extra UI for\n        setting the value (such as a color swatch and color\n        picker for colors)."]}, {"indent": 8, "type": "para", "text": ["The created channels will use the suffixes x, y, z and w rather\n        than 1, 2, 3 and 4."]}], "indent": 4, "type": "dt", "text": ["Float Vector 2, 3, 4"]}, {"body": [{"indent": 12, "type": "para", "text": ["A parameter for containing other parameters. See also the ", {"_hs_sc": true, "fragment": "#importfolder", "text": ["folder description below"], "value": "/ref/windows/optype#importfolder", "fullpath": "/ref/windows/optype#importfolder", "scheme": null, "type": "link"}, "."]}], "indent": 4, "type": "dt", "text": ["Folder"]}, {"body": [{"indent": 8, "type": "para", "text": ["An list of icon buttons represented using an integer.\n        The strip can act as radio buttons or as toggle buttons based on the type of menu items.\n        The menu token is used to set icon path and the menu label stores the tooltip."]}, {"indent": 8, "type": "para", "text": ["See the ", {"_hs_sc": true, "fragment": "#menu_tab", "text": ["menu subtab"], "value": "/ref/windows/optype#menu_tab", "fullpath": "/ref/windows/optype#menu_tab", "scheme": null, "type": "link"}, " for how to edit the menu items."]}, {"indent": 8, "type": "para", "text": ["See ", {"_hs_sc": true, "fragment": "#strip_callback", "text": ["a python script callback"], "value": "/ref/windows/optype#strip_callback", "fullpath": "/ref/windows/optype#strip_callback", "scheme": null, "type": "link"}, " for\n        how to turn radio buttons into a list a buttons with an attached script\n        callback."]}], "indent": 4, "type": "dt", "text": ["Icon Strip"]}, {"body": [{"indent": 8, "type": "para", "text": ["A map of key-value pairs."]}, {"indent": 8, "type": "para", "text": ["Keys must be unique.  If there are multiple entries with the same key\n        then the parameter\u2019s dictionary value arbitrarily contains one of the\n        entries and ignores the others."]}], "indent": 4, "type": "dt", "text": ["Key-Value Dictionary"]}, {"body": [{"indent": 8, "type": "para", "text": ["A whole number."]}], "indent": 4, "type": "dt", "text": ["Integer"]}, {"body": [{"indent": 8, "type": "para", "text": ["An integer vector of two, three, or four components.  The subchannels\n        will be suffixed x, y, z, w rather than 1, 2, 3, 4."]}], "indent": 4, "type": "dt", "text": ["Integer Vector 2, 3, 4"]}, {"body": [{"indent": 8, "type": "para", "text": ["A parameter for providing a read-only label."]}], "indent": 4, "type": "dt", "text": ["Label"]}, {"body": [{"indent": 8, "type": "para", "text": ["A pair of floats.  They will be suffixed min and max rather than\n        1 and 2."]}, {"body": [{"body": [{"indent": 14, "type": "para", "text": ["of Houdini prior to 16.0."]}], "indent": 8, "role": "item", "type": "note", "text": [" Operators with these parameters will not load in versions"]}], "container": true, "role": "item_group", "type": "note_group"}], "indent": 4, "type": "dt", "text": ["Min/Max Float"]}, {"body": [{"indent": 8, "type": "para", "text": ["A pair of floats.  They will be suffixed min and max rather than\n        1 and 2."]}, {"body": [{"body": [{"indent": 14, "type": "para", "text": ["of Houdini prior to 16.0."]}], "indent": 8, "role": "item", "type": "note", "text": [" Operators with these parameters will not load in versions"]}], "container": true, "role": "item_group", "type": "note_group"}], "indent": 4, "type": "dt", "text": ["Min/Max Integers"]}, {"body": [{"indent": 8, "type": "para", "text": ["A space-separated list of node paths. Houdini provides a\n        node picker UI that accepts multiple selections. Use the\n        ", {"text": ["Op filter"], "type": "ui"}, " option below to restrict this parameter to\n        show certain types of nodes."]}], "indent": 4, "type": "dt", "text": ["Operator List"]}, {"body": [{"indent": 8, "type": "para", "text": ["A path to a node. Houdini provides a node picker UI. Use\n        the ", {"text": ["Op filter"], "type": "ui"}, " option below to restrict this\n        parameter to show certain types of nodes."]}], "indent": 4, "type": "dt", "text": ["Operator Path"]}, {"body": [{"indent": 12, "type": "para", "text": ["A pop-up menu. See the ", {"_hs_sc": true, "fragment": "#menu_tab", "text": ["menu subtab"], "value": "/ref/windows/optype#menu_tab", "fullpath": "/ref/windows/optype#menu_tab", "scheme": null, "type": "link"}, " for how to edit the menu items."]}], "indent": 4, "type": "dt", "text": ["Ordered Menu"]}, {"body": [{"indent": 8, "type": "para", "text": ["A channel mask for an RGBA color. Houdini provides a UI\n        that lets you choose the Red, Green, Blue channels, all\n        Color channels (R, G, and B), and/or the Alpha channel."]}], "indent": 4, "type": "dt", "text": ["RGBA Mask"]}, {"body": [{"indent": 12, "type": "para", "text": ["A ramp parameter for editing curves.  To evaluate ramp parameters from scripting, see ", {"_hs_sc": true, "text": ["chramp()"], "value": "/expressions/chramp", "fullpath": "/expressions/chramp", "scheme": null, "type": "link"}, "."]}], "indent": 4, "type": "dt", "text": ["Ramp (Float)"]}, {"body": [{"indent": 12, "type": "para", "text": ["A ramp parameter for editing color values. To evaluate ramp parameters from scripting, see ", {"_hs_sc": true, "text": ["chramp()"], "value": "/expressions/chramp", "fullpath": "/expressions/chramp", "scheme": null, "type": "link"}, "."]}], "indent": 4, "type": "dt", "text": ["Ramp (RGB)"]}, {"body": [{"indent": 12, "type": "para", "text": ["A horizontal separator."]}], "indent": 4, "type": "dt", "text": ["Separator"]}, {"body": [{"indent": 8, "type": "para", "text": ["A text string."]}, {"indent": 8, "type": "para", "text": ["Check the rest of the menu for more specific datatypes\n        that might match what you want to store in a string\n        (such as an file path). The more specific datatypes\n        store their values as a string, but provide extra UI for\n        setting the value (such as a file picker for image\n        files)."]}], "indent": 4, "type": "dt", "text": ["String"]}, {"body": [{"indent": 8, "type": "para", "text": ["A checkbox. When you read the parameter with ", {"_hs_sc": true, "text": ["ch"], "value": "/expressions/ch", "fullpath": "/expressions/ch", "scheme": "Exp", "type": "link"}, "\n        this will return 0 for off and 1 for on."]}], "indent": 4, "type": "dt", "text": ["Toggle"]}, {"body": [{"indent": 8, "type": "para", "text": ["UV or UVW texture coordinates."]}, {"indent": 8, "type": "para", "text": ["The channels will use the suffixes u, v, w rather than 1, 2, 3."]}], "indent": 4, "type": "dt", "text": ["UV/UVW"]}], "container": true, "type": "dt_group"}], "indent": 0, "type": "dt", "text": ["Type"]}, {"body": [{"indent": 4, "type": "para", "text": ["When ", {"text": ["Type"], "type": "ui"}, " is ", {"text": ["Operator path"], "type": "ui"}, " or ", {"text": ["Operator list"], "type": "ui"}, ", this\n    option lets you restrict the types of nodes shown in the\n    picker UI. For example, if this parameter should contain a\n    surface shader, set ", {"text": ["Op filter"], "type": "ui"}, " to ", {"text": ["SHOP: Surface only"], "type": "ui"}, ".\n    This makes it easier for users to pick surface shader by\n    filtering out other node types from the picker."]}], "indent": 0, "type": "dt", "text": ["Op filter"]}, {"body": [{"indent": 4, "type": "para", "text": ["For RenderMan Shader assets, this lets you set the RenderMan\n    datatype to use for this parameter in the output."]}], "indent": 0, "type": "dt", "text": ["RMan type"]}, {"body": [{"body": [{"body": [{"indent": 8, "type": "para", "text": ["Opens the chooser in an intermediate mode, if possible."]}], "indent": 4, "type": "dt", "text": ["Read and Write"]}, {"body": [{"indent": 8, "type": "para", "text": ["Opens the chooser in the open file mode."]}], "indent": 4, "type": "dt", "text": ["Read Only"]}, {"body": [{"indent": 8, "type": "para", "text": ["Opens the chooser in save file mode."]}], "indent": 4, "type": "dt", "text": ["Write Only"]}], "container": true, "type": "dt_group"}, {"indent": 4, "type": "para", "text": ["Houdini\u2019s file chooser only recognizes the ", {"text": ["Read and Write"], "type": "ui"}, " mode and is used for opening files for all three options. "]}, {"indent": 4, "type": "para", "text": ["The OS X only recognizes the ", {"text": ["Read Only"], "type": "ui"}, " and ", {"text": ["Write Only"], "type": "ui"}, " modes, and fakes the ", {"text": ["Read and Write"], "type": "ui"}, " mode (needed by Data File DOP, for example) by using ", {"text": ["Write Only"], "type": "ui"}, " mode. In this mode you cannot create a new file; however, using ", {"text": ["Write Only"], "type": "ui"}, " mode is still better than ", {"text": ["Read Only"], "type": "ui"}, ", since ", {"text": ["Read Only"], "type": "ui"}, " mode presents existing files as not selectable."]}, {"indent": 4, "type": "para", "text": ["On Linux and Windows, you are limited to Houdini\u2019s browser."]}, {"body": [{"body": [{"indent": 8, "type": "para", "text": ["The environment variable ", {"text": ["HOUDINI_USE_NATIVE_FILE_CHOOSER"], "type": "code"}, " lets you customize Houdini to choose to use the native file browsers or to use Houdini\u2019s."]}], "indent": 4, "role": "item", "type": "note"}], "container": true, "role": "item_group", "type": "note_group"}], "indent": 0, "type": "dt", "text": ["Browse Mode"]}, {"body": [{"indent": 4, "type": "para", "text": ["Specifies a unit type for this parameter\u2019s value, using the format ", {"text": [{"text": ["m/kg/s"], "type": "var"}, {"text": ["exponent"], "type": "var"}, "[", {"text": ["m/kg/s"], "type": "var"}, {"text": ["exponent"], "type": "var"}, " ...]"], "type": "code"}, ". For example, length would be ", {"text": ["m1"], "type": "code"}, ". Acceleration would be ", {"text": ["m1s-2"], "type": "code"}, "  (that is, meters/seconds", {"text": ["2"], "tag": "sup", "type": "xml", "attrs": {}}, ", using a negative exponent instead of division). Leave the field blank if this parameter\u2019s default value should not be scaled according to the HIP file\u2019s units."]}, {"indent": 4, "type": "para", "text": ["This tells Houdini whether/how to scale the parameter\u2019s default value when the user changes the HIP file\u2019s units. For example, if the user changes the HIP file\u2019s units to ", {"text": ["cm"], "type": "code"}, ", it will use this parameter to scale any defaults that incorporate length, using the specified exponent."]}, {"indent": 4, "type": "para", "text": ["Here are some useful unit type specifications:"]}, {"body": [{"body": [{"indent": 12, "tag": "td", "type": "pxml", "attrs": {}, "text": ["Mass"]}, {"indent": 12, "tag": "td", "type": "pxml", "attrs": {}, "text": [{"text": ["kg1"], "type": "code"}]}], "indent": 8, "tag": "tr", "type": "pxml", "attrs": {}}, {"body": [{"indent": 12, "tag": "td", "type": "pxml", "attrs": {}, "text": ["Time"]}, {"indent": 12, "tag": "td", "type": "pxml", "attrs": {}, "text": [{"text": ["s1"], "type": "code"}]}], "indent": 8, "tag": "tr", "type": "pxml", "attrs": {}}, {"body": [{"indent": 12, "tag": "td", "type": "pxml", "attrs": {}, "text": ["Velocity"]}, {"indent": 12, "tag": "td", "type": "pxml", "attrs": {}, "text": [{"text": ["m1s-1"], "type": "code"}]}], "indent": 8, "tag": "tr", "type": "pxml", "attrs": {}}, {"body": [{"indent": 12, "tag": "td", "type": "pxml", "attrs": {}, "text": ["Angular velocity"]}, {"indent": 12, "tag": "td", "type": "pxml", "attrs": {}, "text": [{"text": ["s-1"], "type": "code"}]}], "indent": 8, "tag": "tr", "type": "pxml", "attrs": {}}, {"body": [{"indent": 12, "tag": "td", "type": "pxml", "attrs": {}, "text": ["Acceleration"]}, {"indent": 12, "tag": "td", "type": "pxml", "attrs": {}, "text": [{"text": ["m1s-2"], "type": "code"}]}], "indent": 8, "tag": "tr", "type": "pxml", "attrs": {}}, {"body": [{"indent": 12, "tag": "td", "type": "pxml", "attrs": {}, "text": ["Angular acceleration"]}, {"indent": 12, "tag": "td", "type": "pxml", "attrs": {}, "text": [{"text": ["s-2"], "type": "code"}]}], "indent": 8, "tag": "tr", "type": "pxml", "attrs": {}}, {"body": [{"indent": 12, "tag": "td", "type": "pxml", "attrs": {}, "text": ["Force"]}, {"indent": 12, "tag": "td", "type": "pxml", "attrs": {}, "text": [{"text": ["kg1m1s-2"], "type": "code"}]}], "indent": 8, "tag": "tr", "type": "pxml", "attrs": {}}, {"body": [{"indent": 12, "tag": "td", "type": "pxml", "attrs": {}, "text": ["Force density"]}, {"indent": 12, "tag": "td", "type": "pxml", "attrs": {}, "text": [{"text": ["kg1m-2s-2"], "type": "code"}]}], "indent": 8, "tag": "tr", "type": "pxml", "attrs": {}}, {"body": [{"indent": 12, "tag": "td", "type": "pxml", "attrs": {}, "text": ["Impulse"]}, {"indent": 12, "tag": "td", "type": "pxml", "attrs": {}, "text": [{"text": ["kg1m1s-1"], "type": "code"}]}], "indent": 8, "tag": "tr", "type": "pxml", "attrs": {}}, {"body": [{"indent": 12, "tag": "td", "type": "pxml", "attrs": {}, "text": ["Torque"]}, {"indent": 12, "tag": "td", "type": "pxml", "attrs": {}, "text": [{"text": ["kg1m2s-2"], "type": "code"}]}], "indent": 8, "tag": "tr", "type": "pxml", "attrs": {}}, {"body": [{"indent": 12, "tag": "td", "type": "pxml", "attrs": {}, "text": ["Drag"]}, {"indent": 12, "tag": "td", "type": "pxml", "attrs": {}, "text": [{"text": ["kg1s-1"], "type": "code"}]}], "indent": 8, "tag": "tr", "type": "pxml", "attrs": {}}, {"body": [{"indent": 12, "tag": "td", "type": "pxml", "attrs": {}, "text": ["Angular drag"]}, {"indent": 12, "tag": "td", "type": "pxml", "attrs": {}, "text": [{"text": ["kg1m2s-1"], "type": "code"}]}], "indent": 8, "tag": "tr", "type": "pxml", "attrs": {}}, {"body": [{"indent": 12, "tag": "td", "type": "pxml", "attrs": {}, "text": ["Pressure"]}, {"indent": 12, "tag": "td", "type": "pxml", "attrs": {}, "text": [{"text": ["kg1m-1s-2"], "type": "code"}]}], "indent": 8, "tag": "tr", "type": "pxml", "attrs": {}}, {"body": [{"indent": 12, "tag": "td", "type": "pxml", "attrs": {}, "text": ["Spring constant"]}, {"indent": 12, "tag": "td", "type": "pxml", "attrs": {}, "text": [{"text": ["kg1s-2"], "type": "code"}]}], "indent": 8, "tag": "tr", "type": "pxml", "attrs": {}}, {"body": [{"indent": 12, "tag": "td", "type": "pxml", "attrs": {}, "text": ["Linear density"]}, {"indent": 12, "tag": "td", "type": "pxml", "attrs": {}, "text": [{"text": ["kg1m-1"], "type": "code"}]}], "indent": 8, "tag": "tr", "type": "pxml", "attrs": {}}, {"body": [{"indent": 12, "tag": "td", "type": "pxml", "attrs": {}, "text": ["Area density"]}, {"indent": 12, "tag": "td", "type": "pxml", "attrs": {}, "text": [{"text": ["kg1m-2"], "type": "code"}]}], "indent": 8, "tag": "tr", "type": "pxml", "attrs": {}}, {"body": [{"indent": 12, "tag": "td", "type": "pxml", "attrs": {}, "text": ["Volume density"]}, {"indent": 12, "tag": "td", "type": "pxml", "attrs": {}, "text": [{"text": ["kg1m-3"], "type": "code"}]}], "indent": 8, "tag": "tr", "type": "pxml", "attrs": {}}], "indent": 4, "tag": "table", "type": "pxml", "attrs": {"class": "compact"}}], "indent": 0, "type": "dt", "text": ["Units"]}, {"body": [{"indent": 4, "type": "para", "text": ["When ", {"text": ["Type"], "type": "ui"}, " is ", {"text": ["String"], "type": "ui"}, ", you can change the string field from\n    a single-line field to a multi-line editor. This can be convenient, if the\n    field requires multiple lines of input, such as a Python script , so you don\u2019t need to go into the expression editor."]}], "indent": 0, "type": "dt", "text": ["Multi-line String"]}, {"body": [{"indent": 4, "type": "para", "text": ["How many lines (minimum and maximum) should be visible in the multi-line editor."]}, {"indent": 4, "type": "para", "text": ["The first value is the minimum number of lines.\n    The editor will be this number of lines tall even if the content is smaller.\n    The second value is the maximum number of lines.\n    As the user adds content, the editor will expand until it is this many lines tall."]}], "indent": 0, "type": "dt", "text": ["Lines to Show"]}, {"body": [{"indent": 4, "type": "para", "text": ["This menu can be used to set specific syntax highlighting and \n    auto-completion for the multi-line editor."]}], "indent": 0, "type": "dt", "text": ["Language"]}, {"body": [{"indent": 4, "type": "para", "text": ["When ", {"text": ["Type"], "type": "ui"}, " is ", {"text": ["Integer"], "type": "ui"}, ", ", {"text": ["Float"], "type": "ui"}, ", or ", {"text": ["Angle"], "type": "ui"}, ", sets the\n    number of components in the parameter (1 to 4)."]}], "indent": 0, "type": "dt", "text": ["Size"]}, {"body": [{"indent": 4, "type": "para", "text": ["The default value for the parameter. If ", {"text": ["Size"], "type": "ui"}, " is greater\n    than 1, a default can be specified for each component."]}], "indent": 0, "type": "dt", "text": ["Defaults"]}, {"body": [{"indent": 4, "type": "para", "text": ["Do not show this parameter in the asset\u2019s user interface."]}], "indent": 0, "type": "dt", "text": ["Invisible"]}, {"body": [{"indent": 4, "type": "para", "text": ["If there are two short, related parameters stacked in the\n    interface, this option can be turned on to lay out the\n    options side-by-side to save space and clarify their\n    relationship."]}], "indent": 0, "type": "dt", "attrs": {"id": "joinnext"}, "text": ["Horizontally join to next parameter"]}, {"body": [{"indent": 4, "type": "para", "text": ["For numeric datatypes, specifies the range for the slider in\n    the interface."]}, {"indent": 4, "type": "para", "text": ["Click the lock icons to lock/unlock the low and high limits.\n    When a limit is unlocked, the slider uses the limit, but the\n    user can enter values beyond the limit using the text entry\n    box. When a limit is locked, the slider uses the limit, and\n    Houdini prevents the user from entering values beyond the\n    limit."]}], "indent": 0, "type": "dt", "text": ["Range"]}, {"body": [{"indent": 4, "type": "para", "text": ["HScript or Python script to run when this parameter is changed by a UI\n    event (or when the button is clicked, if ", {"text": ["Type"], "type": "ui"}, " is ", {"text": ["Button"], "type": "ui"}, ")."]}, {"indent": 4, "type": "para", "text": ["If your script is written in HScript, the name of the changed parameter is\n    available in ", {"text": ["$script_parm"], "type": "code"}, ", and the value is in ", {"text": ["$script_value"], "type": "code"}, ". If the\n    parameter has multiple components, you can access them as ", {"text": ["$script_value0"], "type": "code"}, ",\n    ", {"text": ["$script_value1"], "type": "code"}, ", and so on."]}, {"indent": 4, "type": "para", "text": ["If your script is written in Python, the same variables are accessible via\n    a dictionary variable named ", {"text": ["kwargs"], "type": "code"}, ".\n    See ", {"_hs_sc": true, "fragment": "#parameter_callback_scripts", "text": ["Parameter callback scripts"], "value": "/hom/locations#parameter_callback_scripts", "fullpath": "/hom/locations#parameter_callback_scripts", "scheme": null, "type": "link"}, "\n    for more information."]}, {"indent": 4, "type": "para", "text": ["For example, this HScript callback command would open a small window\n    showing the path to the operator and the name of the parameter plus the new\n    value:"]}, {"lang": "hscript", "indent": 4, "type": "pre", "text": ["\n    message `oppwf()`/$script_parm = $script_value0\n    "]}, {"indent": 4, "type": "para", "text": ["Often, you will call a script stored as a section (an\n    embedded file) in a ", {"_hs_sc": true, "text": ["digital asset"], "value": "/assets", "fullpath": "/assets", "scheme": null, "type": "link"}, ". For an object type named\n    ", {"text": ["asset_name"], "type": "var"}, ", you can run the script in the section named\n    ", {"text": ["section_name"], "type": "var"}, " using the following command as the callback:"]}, {"indent": 4, "type": "para", "text": [{"text": ["source opdef:/Object/", {"text": ["asset_name"], "type": "var"}, "?", {"text": ["section_name"], "type": "var"}], "type": "code"}]}, {"indent": 4, "type": "para", "text": ["See\n    ", {"_hs_sc": true, "fragment": "#access_contents", "text": ["how to access the contents of an asset"], "value": "/ref/windows/optype#access_contents", "fullpath": "/ref/windows/optype#access_contents", "scheme": null, "type": "link"}, " and\n    the ", {"_hs_sc": true, "text": "", "value": "/commands/source", "fallback_text": "source", "fullpath": "/commands/source", "scheme": "Cmd", "type": "link"}, " command."]}], "indent": 0, "type": "dt", "attrs": {"id": "callback"}, "text": ["Callback script"]}, {"body": [{"indent": 4, "type": "para", "text": ["The scripting language to use to interpret the ", {"text": ["Callback script"], "type": "ui"}, ".\n    Change this language by clicking on the menu to the right of the callback\n    script text box."]}], "indent": 0, "type": "dt", "text": ["Script language"]}, {"body": [{"indent": 4, "type": "para", "text": ["Whether this parameter should be expanded without quotes within VOP code\n    blocks. A common use is to allow strings from menus to be placed verbatim\n    in a code block. Only available for string parameters in a VOP definition."]}], "indent": 0, "type": "dt", "text": ["Suppress Quotes in VOP Code Blocks"]}, {"body": [{"indent": 4, "type": "para", "text": ["Whether this parameter is imported by import folders on a parent asset.\n    See about ", {"_hs_sc": true, "fragment": "#importfolder", "text": ["importing folders from a sub-node"], "value": "#importfolder", "fullpath": "/ref/windows/optype#importfolder", "scheme": null, "type": "link"}, " above."]}], "indent": 0, "type": "dt", "text": ["Available for import"]}, {"body": [{"indent": 4, "type": "para", "text": ["The dialogs in which the parameter will appear."]}, {"body": [{"body": [{"indent": 8, "type": "para", "text": ["Parameter appears in the ", {"_hs_sc": true, "text": ["parameter editor"], "value": "/ref/panes/parms", "fullpath": "/ref/panes/parms", "scheme": null, "type": "link"}, " pane."]}], "indent": 4, "type": "dt", "text": ["Main dialog"]}, {"body": [{"indent": 8, "type": "para", "text": ["Parameter appears in:"]}, {"body": [{"indent": 8, "blevel": 10, "type": "bullet", "text": ["The ", {"_hs_sc": true, "text": ["parameter editor"], "value": "/ref/panes/parms", "fullpath": "/ref/panes/parms", "scheme": null, "type": "link"}, " pane."]}, {"indent": 8, "blevel": 10, "type": "bullet", "text": ["The mini-parameter editor that appears when the user\n          presses ", {"keys": ["P"], "text": null, "type": "keys"}, " while the operator is active."]}], "container": true, "type": "bullet_group"}], "indent": 4, "type": "dt", "text": ["Main & tool dialogs"]}, {"body": [{"indent": 8, "type": "para", "text": ["Parameter appears in:"]}, {"body": [{"indent": 8, "blevel": 10, "type": "bullet", "text": ["The ", {"_hs_sc": true, "text": ["parameter editor"], "value": "/ref/panes/parms", "fullpath": "/ref/panes/parms", "scheme": null, "type": "link"}, " pane."]}, {"indent": 8, "blevel": 10, "type": "bullet", "text": ["The mini-parameter editor that appears when the user\n          presses ", {"keys": ["P"], "text": null, "type": "keys"}, " while the operator is active."]}, {"indent": 8, "blevel": 10, "type": "bullet", "text": ["The operation controls toolbar (at the top of the\n          viewer pane) when the operator is active. ", {"text": ["Pane \u25b8 Toolbars and controls \u25b8 Operation controls"], "type": "ui"}, ")."]}], "container": true, "type": "bullet_group"}], "indent": 4, "type": "dt", "text": ["Main & tool dialogs + toolbox"]}], "container": true, "type": "dt_group"}], "indent": 0, "type": "dt", "text": ["Show parm in"]}, {"body": [{"indent": 4, "type": "para", "text": ["Specifies ", {"_hs_sc": true, "fragment": "#conditionals", "text": ["conditional rules"], "value": "/ref/windows/optype#conditionals", "fullpath": "/ref/windows/optype#conditionals", "scheme": null, "type": "link"}, " \n    for when to disable the parameter."]}], "indent": 0, "type": "dt", "attrs": {"id": "disablewhen"}, "text": ["Disable When"]}, {"body": [{"indent": 4, "type": "para", "text": ["Specifies ", {"_hs_sc": true, "fragment": "#conditionals", "text": ["conditional rules"], "value": "/ref/windows/optype#conditionals", "fullpath": "/ref/windows/optype#conditionals", "scheme": null, "type": "link"}, " \n    for when to hide the parameter."]}], "indent": 0, "type": "dt", "attrs": {"id": "hidewhen"}, "text": ["Hide When"]}, {"body": [{"indent": 4, "type": "para", "text": ["Specifies extra data to be attached to the parameter.  You can attach\n    custom tags to the parameter which can be accessed with the\n    ", {"_hs_sc": true, "fragment": "#tags", "text": "", "value": "/hom/hou/ParmTemplate#tags", "fallback_text": "hou.ParmTemplate.tags", "fullpath": "/hom/hou/ParmTemplate#tags", "scheme": "Hom", "type": "link"}, " HOM method."]}, {"indent": 4, "type": "para", "text": ["You can also choose built-in tags from the chooser dialog.  Built-in tags\n    are recognized by different components in Houdini.  For example, attaching\n    the OpenGL  \u2192 Diffuse tag to a parameter on a material node informs the\n    viewport to render the material with a diffuse color specified by the\n    parameter\u2019s value.  In general attaching OpenGL tags to material node\n    parameters marks the parameters for use in viewport OpenGL rendering."]}, {"indent": 4, "type": "para", "text": ["Some parameters may have internal tags attached to them which store options\n    that define the parameter\u2019s look and behavior.  These internal tags are not\n    modifiable and appear disabled in the tag editor list."]}, {"indent": 4, "type": "para", "text": ["Note that tags have unique names.  If multiple tags with the same name are\n    specified in the tag editor list then one of the tags is arbitrarily\n    attached to the parameter and the other tags ignored."]}], "indent": 0, "type": "dt", "attrs": {"id": "tags"}, "text": ["Tags"]}, {"body": [{"indent": 4, "type": "para", "text": ["Help string for the parameter. This is displayed in the tool\n    tip when the user hovers over this parameter in the\n    parameter editor."]}], "indent": 0, "type": "dt", "attrs": {"id": "help"}, "text": ["Help"]}], "container": true, "type": "dt_group"}], "indent": 0, "level": 3, "text": ["Parameter Description: Parameter subtab"], "container": true, "type": "h", "id": "parms_tab"}, {"body": [{"indent": 0, "type": "para", "text": ["This subtab lists the parameter\u2019s ", {"text": ["channels"], "type": "em"}, " (that is, the\nanimatable components of the parameter). For example, the\n", {"text": ["Translate"], "type": "ui"}, " parameter of an object (internal name ", {"text": ["t"], "type": "code"}, ") has\nthree animatable components (representing X, Y, and Z)."]}, {"indent": 0, "type": "para", "text": ["For numeric components, you can turn on ", {"_hs_sc": true, "text": "", "value": "BUTTONS/scope", "fullpath": "/ref/windows/BUTTONS/scope", "scheme": "Icon", "type": "link"}, "\n", {"text": ["auto-scope"], "type": "ui"}, ". Then this option is enabled for a component, that\ncomponent is automatically ", {"_hs_sc": true, "text": ["scoped"], "value": "/anim/scope", "fullpath": "/anim/scope", "scheme": null, "type": "link"}, " (displayed in\nthe ", {"_hs_sc": true, "text": ["animation editor"], "value": "/ref/panes/animeditor", "fullpath": "/ref/panes/animeditor", "scheme": null, "type": "link"}, ") when the parent node\nis selected. Turn this option on for all commonly animated values\nto make them easier to work with in the\n", {"_hs_sc": true, "text": ["channel list"], "value": "/ref/panes/chanlist", "fullpath": "/ref/panes/chanlist", "scheme": null, "type": "link"}, "."]}, {"indent": 0, "type": "para", "text": ["If you imported or promoted parameters from another node (by dragging\nthem into the type properties window from a parameter editor, or by\nusing the ", {"text": ["Create parameters"], "type": "ui"}, " ", {"text": ["From Nodes"], "type": "ui"}, " subtab), the right\nhand column shows which channel each channel is linked to on the\nother node. When the ", {"_hs_sc": true, "text": "", "value": "BUTTONS/link", "fullpath": "/ref/windows/BUTTONS/link", "scheme": "Icon", "type": "link"}, " Enable linking button is on,\nthe channel gets its value from the linked channel."]}], "indent": 0, "level": 3, "text": ["Parameter Description: Channels subtab"], "container": true, "type": "h", "id": "channels_tab"}, {"body": [{"indent": 0, "type": "para", "text": ["The controls on this subtab let you create a menu to set the\nvalue of the parameter. You can also use the ", {"text": ["Callback script"], "type": "ui"}, "\nto take actions based on menu choices."]}, {"indent": 0, "type": "para", "text": ["Each menu item has a ", {"text": ["token"], "type": "em"}, " and a ", {"text": ["label"], "type": "em"}, ". The token is the\nvalue that gets put into the parameter when the user selects the\nmenu item. The label is the human-readable label Houdini uses\nfor the menu item in the interface."]}, {"body": [{"body": [{"indent": 4, "type": "para", "text": ["Turn on the checkbox to make this parameter into a menu. Use\n    the pop-up menu to choose the type of menu to create."]}, {"body": [{"body": [{"indent": 8, "type": "para", "text": ["A pop-up menu that lets the user choose one value from a\n        list."]}], "indent": 4, "type": "dt", "text": ["Normal"]}, {"body": [{"indent": 8, "type": "para", "text": ["A text box with a menu button that lets the user fill in\n        preset values."]}], "indent": 4, "type": "dt", "text": ["Replace"]}, {"body": [{"indent": 8, "type": "para", "text": ["A text box with a menu button that lets the user add\n        and remove preset values to/from the current contents."]}], "indent": 4, "type": "dt", "text": ["Toggle"]}], "container": true, "type": "dt_group"}], "indent": 0, "type": "dt", "text": ["Use menu"]}, {"body": [{"indent": 4, "type": "para", "text": ["Choose \"Menu items\" to specify a list of static token/label\n    pairs to populate the list. Use this option if the list does\n    not need to change based on runtime conditions."]}, {"indent": 4, "type": "para", "text": ["Choose \"Menu script\" to specify the list of token/value\n    pairs using a script. Use this option if the contents of the\n    list change based on the current conditions in Houdini (for\n    example, a menu that lets you choose from the currently\n    selected objects)."]}], "indent": 0, "type": "dt", "text": ["Menu items/Menu script"]}, {"body": [{"indent": 4, "type": "para", "text": ["Click a row in the list to select it."]}, {"indent": 4, "type": "para", "text": ["Use the two text boxes above the list to edit the token and\n    label of the currently selected row."]}, {"indent": 4, "type": "para", "text": ["Use the arrow buttons to reorder the list, and the X buttons\n    to delete rows."]}], "indent": 0, "type": "dt", "text": ["Menu items list"]}, {"body": [{"indent": 4, "type": "para", "text": ["Enter a script here whose output populates the menu. You can write the script in HScript or Python. We highly recommend using Python."]}, {"indent": 4, "type": "para", "text": ["A Python script should generate a list (or tuple) of strings where the odd items are values and the even items are labels, for example:"]}, {"lang": "python", "indent": 4, "type": "pre", "text": ["\n    [\"10\", \"Light\", \"50\", \"Medium\", \"100\", \"Heavy\"]\n    "]}, {"indent": 4, "type": "para", "text": ["Houdini handles the Python script in an odd way: if the script field contains a ", {"text": ["single line"], "type": "em"}, ", Houdini treats it as an ", {"text": ["expression"], "type": "em"}, " and expects it to evaluate to a list. If it has ", {"text": ["multiple lines"], "type": "em"}, ", Houdini treats it as a ", {"text": ["function body"], "type": "em"}, " and it must end with a ", {"text": ["return"], "type": "code"}, " statement:"]}, {"lang": "python", "indent": 4, "type": "pre", "text": ["\n    result = []\n    for input_node in hou.pwd().inputs():\n        result += [input_node.path(), input_node.name()]\n    return result\n    "]}, {"indent": 4, "type": "para", "text": ["See ", {"_hs_sc": true, "fragment": "#parameter_menu_scripts", "text": ["Parameter Menu Scripts"], "value": "/hom/locations#parameter_menu_scripts", "fullpath": "/hom/locations#parameter_menu_scripts", "scheme": null, "type": "link"}, " for more information on menu scripts written in Python."]}, {"indent": 4, "type": "para", "text": ["For Hscript, the script should print a space-separated list of the form:"]}, {"lang": null, "indent": 4, "type": "pre", "text": ["\n    echo token \"label\" token \"label\" ...\n    "]}, {"body": [{"body": [{"indent": 8, "type": "para", "text": ["Houdini runs this script whenever the user opens the menu, and when the parameter is evaluated, so make it as simple and fast as possible."]}], "indent": 4, "role": "item", "type": "tip"}], "container": true, "role": "item_group", "type": "tip_group"}], "indent": 0, "type": "dt", "text": ["Menu script field"]}], "container": true, "type": "dt_group"}], "indent": 0, "level": 3, "text": ["Parameter Description: Menu subtab"], "container": true, "type": "h", "id": "menu_tab"}, {"body": [{"indent": 0, "type": "para", "text": ["Placeholder for information about where imported parameters\ncame from. See information about\n", {"_hs_sc": true, "fragment": "#importfolder", "text": ["importing folders from a sub-node"], "value": "#importfolder", "fullpath": "/ref/windows/optype#importfolder", "scheme": null, "type": "link"}, " above."]}, {"indent": 0, "type": "para", "text": ["You should only turn on ", {"text": ["Save import information"], "type": "ui"}, " if you have\nsome reason for wanting to save the import source of a parameter\nnot in an imported folder."]}], "indent": 0, "level": 3, "text": ["Parameter Description: Import subtab"], "container": true, "type": "h", "id": null}, {"body": [{"indent": 0, "type": "para", "text": ["Certain parameter types can have one or mode conditionals set on them.\nThese conditionals can specify, for example, when a parameter is disabled,\nor when it is hidden."]}, {"indent": 0, "type": "para", "text": ["The syntax of the conditional is:"]}, {"lang": null, "indent": 0, "type": "pre", "text": ["\n{ parm_name operator value ...} ...\n"]}, {"indent": 0, "type": "para", "text": ["That is, one or more sets of comparisons inside curly\nbraces. Inside the curly braces are one or more comparisons\nbetween a parameter and a value, where the\noperator is one of:"]}, {"body": [{"body": [{"indent": 8, "tag": "td", "type": "pxml", "attrs": {}, "text": [" ", {"text": ["=="], "type": "code"}]}, {"indent": 8, "tag": "td", "type": "pxml", "attrs": {}, "text": [" equal"]}], "indent": 4, "tag": "tr", "type": "pxml", "attrs": {}}, {"body": [{"indent": 8, "tag": "td", "type": "pxml", "attrs": {}, "text": [" ", {"text": ["!="], "type": "code"}]}, {"indent": 8, "tag": "td", "type": "pxml", "attrs": {}, "text": [" not equal"]}], "indent": 4, "tag": "tr", "type": "pxml", "attrs": {}}, {"body": [{"indent": 8, "tag": "td", "type": "pxml", "attrs": {}, "text": [" ", {"text": ["<"], "type": "code"}]}, {"indent": 8, "tag": "td", "type": "pxml", "attrs": {}, "text": [" less than"]}], "indent": 4, "text": [" "], "tag": "tr", "attrs": {}, "type": "pxml"}, {"body": [{"indent": 8, "tag": "td", "type": "pxml", "attrs": {}, "text": [" ", {"text": [">"], "type": "code"}]}, {"indent": 8, "tag": "td", "type": "pxml", "attrs": {}, "text": [" greater than"]}], "indent": 4, "tag": "tr", "type": "pxml", "attrs": {}}, {"body": [{"indent": 8, "tag": "td", "type": "pxml", "attrs": {}, "text": [" ", {"text": [">="], "type": "code"}]}, {"indent": 8, "tag": "td", "type": "pxml", "attrs": {}, "text": [" greater than or equal"]}], "indent": 4, "tag": "tr", "type": "pxml", "attrs": {}}, {"body": [{"indent": 8, "tag": "td", "type": "pxml", "attrs": {}, "text": [" ", {"text": ["<="], "type": "code"}]}, {"indent": 8, "tag": "td", "type": "pxml", "attrs": {}, "text": [" less than or equal"]}], "indent": 4, "tag": "tr", "type": "pxml", "attrs": {}}], "indent": 0, "tag": "table", "type": "pxml", "attrs": {}}, {"indent": 0, "type": "para", "text": ["If ", {"text": ["all of the conditions"], "type": "em"}, " are true inside ", {"text": ["any"], "type": "em"}, " of the curly\nbrace lists, the entire conditional applies and the parameter \nis either disabled or hidden, depending on application."]}, {"body": [{"body": [{"indent": 4, "type": "para", "text": ["It\u2019s important to ensure that there\u2019s space before and after the\n    operator. Otherwise, the conditional is rejected."]}], "indent": 0, "role": "item", "type": "note"}], "container": true, "role": "item_group", "type": "note_group"}, {"indent": 0, "type": "para", "text": ["Example conditional with multiple brace lists:"]}, {"lang": null, "indent": 0, "type": "pre", "text": ["\n{ type == 1 count > 10 } { tolerance < 0.1 }\n"]}, {"indent": 0, "type": "para", "text": ["The conditional will apply to the parameter if\u2026"]}, {"body": [{"body": [{"indent": 4, "type": "para", "text": ["greater than 10"]}, {"indent": 4, "type": "para", "text": ["or"]}], "indent": 0, "blevel": 2, "type": "bullet", "text": ["The ", {"text": ["type"], "type": "code"}, " parameter equals 1 and the ", {"text": ["count"], "type": "code"}, " parameter is"]}, {"indent": 0, "blevel": 2, "type": "bullet", "text": ["The ", {"text": ["tolerance"], "type": "code"}, " parameter is less than ", {"text": ["0.1"], "type": "code"}, "."]}], "container": true, "type": "bullet_group"}, {"indent": 0, "type": "para", "text": ["You can omit the operator, in which case it\u2019s assumed to be\n", {"text": ["=="], "type": "code"}, " (equals). For example,"]}, {"lang": null, "indent": 0, "type": "pre", "text": ["\n{ type 1 } { type 2 }\n"]}, {"indent": 0, "type": "para", "text": ["will apply the conditional to the parameter if ", {"text": ["type"], "type": "code"}, " equals 1 or 2.\nIt is recommended you always use an operator, however."]}, {"indent": 0, "type": "para", "text": ["It\u2019s not possible to use generic expressions in the conditional rules.\nA workaround is to create an invisible parameter containing the \nexpression needed, and reference it in the appropriate conditional rule."]}, {"indent": 0, "type": "para", "text": ["Several functions are available for use instead of the parameter name."]}, {"body": [{"body": [{"indent": 8, "type": "para", "text": ["These cannot be used as values to compare against.  Additionally, no spaces may be present in these functions."]}], "indent": 0, "role": "item", "type": "note"}], "container": true, "role": "item_group", "type": "note_group"}, {"body": [{"body": [{"indent": 8, "tag": "td", "type": "pxml", "attrs": {}, "text": [" ", {"text": ["ninputs()"], "type": "code"}]}, {"indent": 8, "tag": "td", "type": "pxml", "attrs": {}, "text": [" Highest wired input number. This may be more than the number of wires if there are holes. It also counts subnet inputs that may not be wired in the parent node."]}], "indent": 4, "tag": "tr", "type": "pxml", "attrs": {}}, {"body": [{"indent": 8, "tag": "td", "type": "pxml", "attrs": {}, "text": [" ", {"text": ["hasinput(0)"], "type": "code"}]}, {"indent": 8, "tag": "td", "type": "pxml", "attrs": {}, "text": [" Returns ", {"text": ["1"], "type": "code"}, " if a node is wired into this input. This does not count an input wired into a subnet input if that input is not also wired in the parent node.  ", {"text": ["0"], "type": "code"}, " can be replaced with the desired input number."]}], "indent": 4, "tag": "tr", "type": "pxml", "attrs": {}}, {"body": [{"indent": 8, "tag": "td", "type": "pxml", "attrs": {}, "text": [" ", {"text": ["isparm(parmname)"], "type": "code"}]}, {"indent": 8, "tag": "td", "type": "pxml", "attrs": {}, "text": [" Returns ", {"text": ["1"], "type": "code"}, " if the current parameter name equals parmname. This is meant to control multi parameter instances."]}], "indent": 4, "tag": "tr", "type": "pxml", "attrs": {}}], "indent": 0, "tag": "table", "type": "pxml", "attrs": {}}, {"indent": 0, "type": "para", "text": ["For example,"]}, {"lang": null, "indent": 0, "type": "pre", "text": ["\n{ ninputs() > 0 }\n"]}, {"indent": 0, "type": "para", "text": ["will apply the conditional if any wires are connected to the operator."]}, {"lang": null, "indent": 0, "type": "pre", "text": ["\n{ hasinput(1) == 1 }\n"]}, {"indent": 0, "type": "para", "text": ["will apply the conditional if a wire is connected to the second input."]}, {"lang": null, "indent": 0, "type": "pre", "text": ["\n{ isparm(blend0) == 1 }\n"]}, {"indent": 0, "type": "para", "text": ["will apply the conditional if the parameter is named ", {"text": ["blend0"], "type": "code"}, " in a multi. Other parameters such as ", {"text": ["blend1"], "type": "code"}, ", ", {"text": ["blend2"], "type": "code"}, " won\u2019t be affected."]}], "indent": 0, "level": 3, "text": ["Parameter Description: Conditionals"], "container": true, "type": "h", "id": "conditionals"}], "indent": 0, "level": 2, "text": ["Parameters tab"], "container": true, "type": "h", "id": "parms"}, {"body": [{"body": [{"body": [{"indent": 4, "type": "para", "text": ["For object assets, this lets you choose a node from inside the\n    asset that represents the general type of node you want the\n    asset to be."]}, {"indent": 4, "type": "para", "text": ["For example, if you are making a camera asset, choose a camera\n    node inside your asset to indicate that the asset acts like a\n    camera. Similarly, if you are making a light asset, choose a\n    light node."]}, {"indent": 4, "type": "para", "text": ["Houdini may use this information to filter and categorize your\n    asset in the interface, such as in the  ", {"_hs_sc": true, "text": ["link\n    editor"], "value": "/ref/panes/linker", "fullpath": "/ref/panes/linker", "scheme": null, "type": "link"}, ". "]}], "indent": 0, "type": "dt", "text": ["Representative Node"]}, {"body": [{"indent": 4, "type": "para", "text": ["SOP nodes will cook this and use it for guide geometry.  This\n    allows for custom guide geometry not on the main cook path\n    of the network."]}], "indent": 0, "type": "dt", "text": ["Guide Geometry"]}, {"body": [{"indent": 4, "type": "para", "text": ["Nodes in this field can be edited even if the digital asset is locked. You\n    can drag and drop a node into this field; however, if you want to add more\n    than one, you must type them in and separate them by spaces or commas."]}], "indent": 0, "type": "dt", "text": ["Editable Nodes"]}, {"body": [{"indent": 4, "type": "para", "text": ["Any messages or warnings posted on these nodes will be propagated to the\n    top level node."]}], "indent": 0, "type": "dt", "text": ["Message Nodes"]}, {"body": [{"indent": 4, "type": "para", "text": ["If there are editable nodes, then you may want the end user to jump\n    directly inside one of those nodes.  This specifies which node to jump\n    directly inside of when the asset is locked, which makes it feel like the\n    node directly contains the dive target.  "]}, {"body": [{"body": [{"indent": 8, "type": "para", "text": ["Users can still get to the sibling nodes using tree views, etc.  Only the enter/up commands are affected."]}], "indent": 4, "role": "item", "type": "note"}], "container": true, "role": "item_group", "type": "note_group"}], "indent": 0, "type": "dt", "text": ["Dive Target"]}, {"body": [{"indent": 4, "type": "para", "text": ["If this is non-empty, the named parameter\u2019s value will be drawn beside\n    the node name in the network view."]}], "indent": 0, "type": "dt", "text": ["Descriptive Parm"]}, {"body": [{"indent": 4, "type": "para", "text": ["(SHOPs only) The name of the shader."]}], "indent": 0, "type": "dt", "text": ["Shader Name"]}, {"body": [{"indent": 4, "type": "para", "text": ["(SHOPs only) A space separated list of render types supported by this\n    shader."]}], "indent": 0, "type": "dt", "text": ["Render Mask"]}, {"body": [{"indent": 4, "type": "para", "text": ["(VOPs only) A space separated list of VOP network types supported by this\n    VOP.  Leave this field empty if the operator supports all network types.\n    Valid types are: ", {"text": ["surface"], "type": "code"}, ", ", {"text": ["displace"], "type": "code"}, ", ", {"text": ["light"], "type": "code"}, ", ", {"text": ["shadow"], "type": "code"}, ", ", {"text": ["fog"], "type": "code"}, ",\n    ", {"text": ["chop"], "type": "code"}, ", ", {"text": ["pop"], "type": "code"}, ", ", {"text": ["sop"], "type": "code"}, ", ", {"text": ["cop2"], "type": "code"}, ", ", {"text": ["image3d"], "type": "code"}, ", ", {"text": ["cvex"], "type": "code"}]}], "indent": 0, "type": "dt", "text": ["VopNet Mask"]}, {"body": [{"indent": 4, "type": "para", "text": ["The length in meters of one asset unit as used by default values and any\n    embedded nodes. This value is used in combination with the HIP file unit\n    length to scale parameters tagged as being affected by unit length."]}], "indent": 0, "type": "dt", "text": ["Unit Length"]}, {"body": [{"indent": 4, "type": "para", "text": ["The mass in kilograms of one asset unit as used by default values and any\n    embedded nodes. This value is used in combination with the HIP file unit\n    mass to scale parameters tagged as being affected by unit mass."]}], "indent": 0, "type": "dt", "text": ["Unit Mass"]}, {"body": [{"body": [{"body": [{"indent": 8, "type": "para", "text": ["Generate most properties of the operator from  ", {"_hs_sc": true, "text": ["pragma\n        statements"], "value": "/vex/pragmas", "fullpath": "/vex/pragmas", "scheme": null, "type": "link"}, "  in the VEX source code."]}], "indent": 4, "type": "dt", "text": ["Get Properties from Vex Code"]}], "container": true, "type": "dt_group"}], "indent": 0, "type": "dt", "text": ["Parameter Options"]}], "container": true, "type": "dt_group"}], "indent": 0, "level": 2, "text": ["Node tab"], "container": true, "type": "h", "id": "node"}, {"body": [{"body": [{"body": [{"body": [{"body": [{"indent": 8, "type": "para", "text": ["When this option is on, the parameter values and contents of any\n        nodes referenced by the digital asset are saved as part of the\n        asset\u2019s definition."]}], "indent": 4, "type": "dt", "text": ["Save Initial Contents and Parameters"]}, {"body": [{"indent": 8, "type": "para", "text": ["Use the default values of the original\n        parameters as the initial values for new nodes, instead of their\n        current values."]}], "indent": 4, "type": "dt", "text": ["Save Defaults as Initial Parameters"]}, {"body": [{"indent": 8, "type": "para", "text": ["Save the spare parameter definition from the node in to the creation script for the asset. This will cause any new instances of this asset to have the same spare parameters."]}], "indent": 4, "type": "dt", "text": ["Save Spare Parameters"]}, {"body": [{"indent": 8, "type": "para", "text": ["New nodes will be created with their contents locked.  When this option\n        is off, contents of the digital asset are saved as part of its\n        creation script rather than in a separate ", {"text": ["Contents"], "type": "code"}, " section.  When\n        there is no ", {"text": ["Contents"], "type": "code"}, " section, updating the asset definition will\n        not change the contents of any existing instances."]}, {"body": [{"body": [{"indent": 12, "type": "para", "text": ["New nodes will be created unlocked. Do not turn this on for an\n            asset in production."]}], "indent": 8, "type": "dt", "text": ["Unlock New Nodes on Creation"]}, {"body": [{"indent": 12, "type": "para", "text": ["Use compression on the data saved for the asset definition to\n            reduce the size of the ", {"text": [".hda"], "type": "code"}, " file. This will slightly decrease\n            the speed of working with the HDA."]}], "indent": 8, "type": "dt", "text": ["Compress Contents"]}], "container": true, "type": "dt_group"}], "indent": 4, "type": "dt", "text": ["Save Contents as Locked"]}, {"body": [{"indent": 8, "type": "para", "text": ["Change all absolute node references inside the ", {"_hs_sc": true, "text": ["digital asset"], "value": "/assets", "fullpath": "/assets", "scheme": null, "type": "link"}, " to\n        relative references."]}], "indent": 4, "type": "dt", "text": ["Check for External Node References"]}, {"body": [{"indent": 8, "type": "para", "text": ["When this checkbox is turned on, Houdini saves compiled VEX code inside the HDA and uses it instead of generating that code from the node network."]}, {"indent": 8, "type": "para", "text": ["Currently, it applies mainly to the Shader Builder SHOPs, which contain VOP nodes. Traditionally Houdini would use nodes to generate .vfl source code and then compile it to vex. By using the cached vex code, Houdini saves time, which can be quite substantial for complex shaders. Also, the synched HDA nodes don\u2019t need to create child nodes to build the VOP network inside them (since they are not needed to generate code), so time is saved by skipping the creation of node network when loading hip files. "]}], "indent": 4, "type": "dt", "text": ["Save Cached Code"]}], "container": true, "type": "dt_group"}], "indent": 0, "type": "dt", "text": ["Save Information from Node"]}], "container": true, "type": "dt_group"}], "indent": 0, "level": 2, "text": ["Save tab"], "container": true, "type": "h", "id": "save"}, {"body": [{"indent": 0, "type": "para", "text": ["The contents of the text field appear in the help browser when the user clicks the help button for a node of this operator type in the ", {"_hs_sc": true, "text": ["parameter editor"], "value": "/ref/panes/parms", "fullpath": "/ref/panes/parms", "scheme": null, "type": "link"}, "."]}, {"indent": 0, "type": "para", "text": ["This help can be HTML, or you can use a simple but powerful wiki format to create documentation that looks like the native Houdini help. See ", {"_hs_sc": true, "text": ["how to write wiki-format help"], "value": "/help/format", "fullpath": "/help/format", "scheme": null, "type": "link"}, "."]}], "indent": 0, "level": 2, "text": ["Help tab"], "container": true, "type": "h", "id": "help"}, {"body": [{"indent": 0, "type": "para", "text": ["The controls on this tab let you create a user interface for the\noperator by creating manipulators whose handles are bound to\nparameters inside the asset. These handles become available in the\nViewer pane when the asset is selected using the\n", {"_hs_sc": true, "text": ["Pose"], "value": "/shelf/pose", "fullpath": "/shelf/pose", "scheme": null, "type": "link"}, " or object tools."]}, {"indent": 0, "type": "para", "text": ["The controls in this pane are the same as for the  ", {"_hs_sc": true, "text": ["Persistent\nmanipulator editor"], "value": "/ref/windows/handleeditor", "fullpath": "/ref/windows/handleeditor", "scheme": null, "type": "link"}, "."]}], "indent": 0, "level": 2, "text": ["Handles tab"], "container": true, "type": "h", "id": "handles"}, {"body": [{"indent": 0, "type": "para", "text": ["This tab lets you create and edit code used to implement Python surface nodes, VEX shaders, VOP operators, and other code-based operators."]}, {"indent": 0, "type": "para", "text": [""]}], "indent": 0, "level": 2, "text": ["Code tab"], "container": true, "type": "h", "id": "vex"}, {"body": [{"indent": 0, "type": "para", "text": ["This tab lets you store scripts that are triggered by asset events (such as when an instance of the asset is created or deleted), as well as arbitrary scripts and Python modules needed by the asset. The interface is very similar to the ", {"_hs_sc": true, "fragment": "#extra_files", "text": ["Extra files tab"], "value": "#extra_files", "fullpath": "/ref/windows/optype#extra_files", "scheme": null, "type": "link"}, ", but includes a pop-up menu for specifying event scripts."]}, {"indent": 0, "type": "para", "text": ["A script created under PreFirstCreate script will not work when you are creating the asset, only when you restart Houdini or put down a new instance of the asset. This is because PreFirstCreate is executed while a hip file is loading."]}, {"body": [{"body": [{"indent": 4, "type": "para", "text": ["Do not create a script (on the ", {"text": ["Scripts"], "type": "ui"}, " tab) and an extra file (on the ", {"text": ["Extra files"], "type": "ui"}, " tab) with the same name. The two tabs share a single namespace, and unpredictable behavior may result."]}], "indent": 0, "role": "item", "type": "note"}], "container": true, "role": "item_group", "type": "note_group"}, {"body": [{"body": [{"body": [{"body": [{"body": [{"indent": 8, "type": "para", "text": ["Choosing an event type (other than ", {"text": ["Custom script"], "type": "ui"}, ") will create a \"section\" for the script if it doesn\u2019t already exist."]}], "indent": 4, "blevel": 6, "type": "ord", "text": ["Choose the event type from the ", {"text": ["Event handler"], "type": "ui"}, " pop-up menu."]}, {"indent": 4, "blevel": 6, "type": "ord", "text": ["Use the editor on the right side of the pane to write the script. The pop-up menu at the bottom controls whether the script is Python, HScript, or expressions."]}], "container": true, "type": "ord_group"}], "indent": 0, "role": "item", "type": "task", "text": ["Start a new event script"]}, {"body": [{"body": [{"body": [{"indent": 8, "type": "para", "text": ["Choosing an event type (other than ", {"text": ["Custom script"], "type": "ui"}, ") will create a \"section\" for the script if it doesn\u2019t already exist."]}], "indent": 4, "blevel": 6, "type": "ord", "text": ["Choose the event type from the ", {"text": ["Event handler"], "type": "ui"}, " pop-up menu."]}, {"indent": 4, "blevel": 6, "type": "ord", "text": ["Enter the filename for the script file to load in the ", {"text": ["Filename"], "type": "ui"}, " field."]}, {"indent": 4, "blevel": 6, "type": "ord", "text": ["Click ", {"text": ["Add file"], "type": "ui"}, "."]}], "container": true, "type": "ord_group"}, {"indent": 4, "type": "para", "text": ["A copy of the file is saved into the digital asset. If you change the file on disk, it will not affect the version in the asset. You will have to reload the file into the ", {"text": ["Scripts"], "type": "ui"}, " tab."]}], "indent": 0, "role": "item", "type": "task", "text": ["Load an existing file as an event script"]}, {"body": [{"indent": 4, "type": "para", "text": ["The ", {"text": ["PythonModule"], "type": "code"}, " section serves as a central place for Python values, classes, and functions related to the asset. The only thing that\u2019s special about it compared to any other embedded file is that it\u2019s returned by the ", {"text": [{"text": ["node"], "type": "var"}, ".hdaModule()"], "type": "code"}, " method, which makes it convenient to access in scripts."]}, {"body": [{"indent": 4, "blevel": 6, "type": "ord", "text": ["Click ", {"text": ["Event handler"], "type": "ui"}, " and choose ", {"text": ["Python module"], "type": "ui"}, "."]}, {"body": [{"body": [{"indent": 8, "blevel": 10, "type": "bullet", "text": ["If you have a file on disk you want to load as the module contents, enter it in the ", {"text": ["Filename"], "type": "ui"}, " field, then click ", {"text": ["Add file"], "type": "ui"}, "."]}, {"indent": 8, "blevel": 10, "type": "bullet", "text": ["Use the editor on the right side of the pane to write the module contents."]}], "container": true, "type": "bullet_group"}], "indent": 4, "blevel": 6, "type": "ord", "text": ["Do one of the following:"]}], "container": true, "type": "ord_group"}], "indent": 0, "role": "item", "type": "task", "text": ["Add a python module"]}, {"body": [{"body": [{"indent": 4, "blevel": 6, "type": "ord", "text": ["Click ", {"text": ["Event handler"], "type": "ui"}, " and choose ", {"text": ["Custom script"], "type": "ui"}, "."]}, {"indent": 4, "blevel": 6, "type": "ord", "text": ["Enter a ", {"text": ["Section name"], "type": "ui"}, " for the script. This is how you will refer to the custom script within Houdini."]}, {"body": [{"body": [{"indent": 8, "blevel": 10, "type": "bullet", "text": ["If you have a file on disk you want to load as the custom script, enter it in the ", {"text": ["Filename"], "type": "ui"}, " field, then click ", {"text": ["Add file"], "type": "ui"}, "."]}, {"indent": 8, "blevel": 10, "type": "bullet", "text": ["If you want to start the script from scratch in the editor, click ", {"text": ["Add empty section"], "type": "ui"}, "."]}], "container": true, "type": "bullet_group"}], "indent": 4, "blevel": 6, "type": "ord", "text": ["Do one of the following:"]}], "container": true, "type": "ord_group"}], "indent": 0, "role": "item", "type": "task", "text": ["Add a custom script"]}], "container": true, "role": "item_group", "type": "task_group"}, {"indent": 0, "type": "para", "text": ["See ", {"_hs_sc": true, "fragment": "#access_contents", "text": ["how to reference embedded files"], "value": "#access_contents", "fullpath": "/ref/windows/optype#access_contents", "scheme": null, "type": "link"}, " for information on how to refer to the embedded scripts wherever Houdini expects a filename."]}], "indent": 0, "level": 3, "text": ["Adding and loading scripts"], "container": true, "type": "h", "id": null}, {"body": [{"indent": 0, "type": "para", "text": ["Event Scripts can be created on disk to override scripts embedded in an HDA. There are also global event scripts for each event type, which are run for all node instances, regardless of type. Spare parameters can also be added to any node, which add event processing on a per-node basis. For any given change, all global, optype, and node event scripts are run. All scripts can be either HScript or Python scripts."]}, {"body": [{"body": [{"lang": null, "indent": 2, "type": "pre", "text": ["\n  hou.ui.displayMessage(repr(kwargs))\n  "]}], "indent": 0, "blevel": 2, "type": "bullet", "text": ["In Python, the script has a ", {"text": ["kwargs"], "type": "code"}, " variable containing a dictionary of\n  named arguments. To see the contents of the dictionary, you can use the\n  following:"]}, {"body": [{"body": [{"body": [{"indent": 8, "type": "para", "text": ["Contains an ", {"text": ["opdef:"], "type": "code"}, " style asset file specification for the event:\n        the operator class name and operator type name separated\n        by a slash (", {"text": ["/"], "type": "code"}, ") followed by a question mark (", {"text": ["?"], "type": "code"}, ") and the name of\n        the event type, for example:"]}, {"lang": null, "indent": 8, "type": "pre", "text": ["\n        opdef:/Object/my_asset?OnCreated\n        "]}], "indent": 4, "type": "dt", "text": [{"text": ["$arg0"], "type": "code"}, " "]}, {"body": [{"indent": 8, "type": "para", "text": ["The full path of the node instance that triggered the event.\n        For example:"]}, {"lang": null, "indent": 8, "type": "pre", "text": ["\n        /obj/my_asset1\n        "]}], "indent": 4, "type": "dt", "text": [{"text": ["$arg1"], "type": "code"}, " "]}], "container": true, "type": "dt_group"}, {"indent": 4, "type": "para", "text": ["You can check the contents of these arguments when you're debugging\n    your scripts using the ", {"_hs_sc": true, "text": "", "value": "/commands/message", "fallback_text": "message", "fullpath": "/commands/message", "scheme": "Cmd", "type": "link"}, " command, which just pops up a\n    message window:"]}, {"lang": null, "indent": 4, "type": "pre", "text": ["\n    message $arg0\n    "]}, {"indent": 4, "type": "para", "text": ["For the ", {"text": ["Before First Create"], "type": "ui"}, " and ", {"text": ["After Last Delete"], "type": "ui"}, " events, the first\n    argument is the same, but the second argument ", {"text": ["$arg1"], "type": "code"}, " returns the operator\n    class name and the operator type name separated by a slash (", {"text": ["/"], "type": "code"}, "),\n    for example ", {"text": ["Object/my_asset"], "type": "code"}, "."]}], "indent": 0, "blevel": 2, "type": "bullet", "text": ["In HScript, the ", {"text": ["On Created"], "type": "ui"}, ", ", {"text": ["On Loaded"], "type": "ui"}, ", ", {"text": ["On Updated"], "type": "ui"}, ", ", {"text": ["On Deleted"], "type": "ui"}, ",\n  ", {"text": ["On Input Changed"], "type": "ui"}, ", and ", {"text": ["On Name Changed"], "type": "ui"}, " event scripts are called with\n  two arguments."]}], "container": true, "type": "bullet_group"}, {"indent": 0, "type": "para", "text": ["The following events can trigger scripts:"]}, {"body": [{"body": [{"indent": 4, "type": "para", "text": ["Runs when the first instance of this operator type is created in\n    a hip file. Runs before the node is created, and runs even if\n    the operator is created while loading a hip file. To determine\n    if Houdini is in the process of loading a hip file, use the\n    ", {"_hs_sc": true, "text": "opisloading()", "value": "/expressions/opisloading", "fullpath": "/expressions/opisloading", "scheme": "Exp", "type": "link"}, " expression function."]}, {"indent": 4, "type": "para", "text": ["You can use this script to set up the external environment for\n    your asset, such as copying texture maps to a required location\n    or setting environment variables."]}, {"indent": 4, "type": "para", "text": ["The user cannot undo the actions performed in this script. Use\n    the After Last Delete script to undo any actions performed by\n    this script."]}], "indent": 0, "type": "dt", "text": ["Before First Create"]}, {"body": [{"indent": 4, "type": "para", "text": ["Runs after a new instance of this operator is created. Runs\n    after the creation script and after the default parameter values\n    are set. This script does not run when loading a hip file, only\n    when the user creates a new node interactively."]}], "indent": 0, "type": "dt", "text": ["On Created"]}, {"body": [{"indent": 4, "type": "para", "text": ["Runs after the node is loaded."]}], "indent": 0, "type": "dt", "text": ["On Loaded"]}, {"body": [{"indent": 4, "type": "para", "text": ["Runs when the definition for this operator is updated. Runs once\n    for each instance of the operator in the hip file."]}], "indent": 0, "type": "dt", "text": ["On Updated"]}, {"body": [{"indent": 4, "type": "para", "text": ["Runs immediately before Houdini deletes a node of this type.\n    Runs before the node\u2019s individual delete script."]}, {"indent": 4, "type": "para", "text": ["To determine if Houdini is in the process of quitting a hip file,\n    use the ", {"_hs_sc": true, "text": "opisquitting()", "value": "/expressions/opisquitting", "fullpath": "/expressions/opisquitting", "scheme": "Exp", "type": "link"}, " expression function."]}], "indent": 0, "type": "dt", "text": ["On Deleted"]}, {"body": [{"indent": 4, "type": "para", "text": ["Runs after the last node of this type is deleted from the hip\n    file."]}, {"indent": 4, "type": "para", "text": ["You can use this script to clean up any actions performed in the\n    \"Before First Create\" event script."]}, {"indent": 4, "type": "para", "text": ["The user cannot undo actions performed in this script."]}, {"indent": 4, "type": "para", "text": ["To determine if Houdini is in the process of quitting a hip file,\n    use the ", {"_hs_sc": true, "text": "opisquitting()", "value": "/expressions/opisquitting", "fullpath": "/expressions/opisquitting", "scheme": "Exp", "type": "link"}, " expression function."]}], "indent": 0, "type": "dt", "text": ["After Last Delete"]}, {"body": [{"indent": 4, "type": "para", "text": ["Runs after an input connection to a node of this type is\n    changed."]}, {"indent": 4, "type": "para", "text": ["Houdini calls this script with the full path and class/type\n    arguments described above, plus a third argument containing the\n    index of the input connection that changed."]}], "indent": 0, "type": "dt", "text": ["On Input Changed"]}, {"body": [{"indent": 4, "type": "para", "text": ["Runs after the name of a node of this type is changed."]}, {"indent": 4, "type": "para", "text": ["In addition to the full path and class/type arguments described\n    above, this script is called with a third argument containing\n    the old name of the node."]}], "indent": 0, "type": "dt", "text": ["On Name Changed"]}, {"body": [{"indent": 4, "type": "para", "text": ["Runs after a node\u2019s parameters are loaded and resolved but before\n    ", {"text": ["On Loaded"], "type": "ui"}, " or ", {"text": ["On Updated"], "type": "ui"}, ". It is also run when invoking the\n    ", {"_hs_sc": true, "text": ["opparm -V"], "value": "/commands/opparm", "fullpath": "/commands/opparm", "scheme": null, "type": "link"}, " HScript command or\n    ", {"_hs_sc": true, "fragment": "#syncNodeVersionIfNeeded", "text": "", "value": "/hom/hou/Node#syncNodeVersionIfNeeded", "fallback_text": "hou.Node.syncNodeVersionIfNeeded", "fullpath": "/hom/hou/Node#syncNodeVersionIfNeeded", "scheme": "Hom", "type": "link"}, " method."]}, {"indent": 4, "type": "para", "text": ["In addition to the full path and class/type arguments described above,\n    this script is called with the current and old node version strings,\n    respectively. For python, the arguments will be named ", {"text": ["old_version"], "type": "code"}, " and\n    ", {"text": ["current_version"], "type": "code"}, "."]}, {"indent": 4, "type": "para", "text": ["The purpose of this script is so that we can upgrade nodes which were\n    created with an older version of the asset definition to the current\n    version by changing its parameter values."]}], "indent": 0, "type": "dt", "text": ["Sync Node Version"]}], "container": true, "type": "dt_group"}, {"indent": 0, "type": "para", "text": [{"text": ["Created"], "type": "ui"}, " is when a new instance is created using ", {"_hs_sc": true, "text": ["opadd"], "value": "/commands/opadd", "fullpath": "/commands/opadd", "scheme": null, "type": "link"}, " or by putting down a node in a ", {"_hs_sc": true, "text": ["network editor"], "value": "/ref/panes/network", "fullpath": "/ref/panes/network", "scheme": null, "type": "link"}, ". It is run right after the creation script, but was made a separate script because the creation script often contains the node contents, and is modified by the Type Properties dialog, and so should not be edited directly by the user. Also of note is that the Created script is not run if you do \"opadd -n\" (which also stops the running of the creation script)."]}, {"indent": 0, "type": "para", "text": [{"text": ["Loaded"], "type": "ui"}, " is when the node is loaded from a hip file. This includes copy/pasting nodes or networks but ", {"text": ["not"], "type": "em"}, " when loading the node as part of the contents of another HDA. Because of the locking of nodes inside an HDA, the functionality of Loaded scripts for nodes inside a locked HDA should be made part of the Loaded script for the HDA itself. This script is run for each node after the whole hip file is loaded."]}, {"indent": 0, "type": "para", "text": ["When the Loaded script is run, the Created script will not be run, and vice versa."]}], "indent": 0, "level": 3, "text": ["Writing event scripts"], "container": true, "type": "h", "id": "events"}], "indent": 0, "level": 2, "text": ["Scripts tab"], "container": true, "type": "h", "id": "scripts"}, {"body": [{"indent": 0, "type": "para", "text": ["This tab lets you create a ", {"_hs_sc": true, "text": ["shelf tool"], "value": "/ref/windows/edittool", "fullpath": "/ref/windows/edittool", "scheme": null, "type": "link"}, " associated with this asset. When the asset is loaded, the tools you define on this tab will be available for the user to add to the shelf, and will show up in the viewer tab menu."]}, {"body": [{"body": [{"indent": 4, "type": "para", "text": ["Any tools you define on this tab will not automatically show up on the shelf whenever the asset is available. The user has to add the tools to the shelf, by right-clicking the shelf and choosing ", {"text": ["Edit Shelf Tab"], "type": "ui"}, ", then choosing the tools from a list of all available tools."]}], "indent": 0, "role": "item", "type": "note"}], "container": true, "role": "item_group", "type": "note_group"}, {"indent": 0, "type": "para", "text": ["When you create an asset, Houdini automatically adds a tool to this tab, that invokes a generic script to create an instance of the asset. You can edit the script of this tool, or add additional shelf tools to provide alternate ways of instantiating the asset. Click ", {"text": ["Create New"], "type": "ui"}, " and choose ", {"text": ["Tool"], "type": "ui"}, " to start a new tool."]}, {"indent": 0, "type": "para", "text": ["See ", {"_hs_sc": true, "text": ["how to create shelf tools"], "value": "/ref/windows/edittool", "fullpath": "/ref/windows/edittool", "scheme": null, "type": "link"}, "."]}], "indent": 0, "level": 2, "text": ["Tools"], "container": true, "type": "h", "id": "tools"}, {"body": [{"indent": 0, "type": "para", "text": ["This tab lets you set up the selection prompts shown to the user\nwhen creating the digital asset (or when the  ", {"_hs_sc": true, "text": ["Reselect\ngeometry"], "value": "/basics/select", "fullpath": "/basics/select", "scheme": null, "type": "link"}, "  button is pressed)."]}, {"indent": 0, "type": "para", "text": ["Changes to the selector bindings will affect all existing and future\nversions of this operator type. Selectors can be added, deleted or\nre-ordered using the list displayed on the left hand side. When a\nselector is selected from the list, it\u2019s bindings and properties can\nbe edited using the controls on the right."]}, {"indent": 0, "type": "para", "text": ["The Type field is not editable and reflects the basic type of the\nselector. The Name field is the english name which should uniquely\ndefine this selector with respect to the operator type. The Prompt\nfield displays the string during the selection process. The\nMulti-selection checkbox indicates whether or not multiple object\nselections are allowed for the current selector. The editable text\nfield allows for a user-defined script to be executed when object\nselections are binded. The input objects are accessed by the\nvariables ", {"text": ["$argc"], "type": "code"}, ", and ", {"text": ["$arg0, $arg1,..., $arg($argc-1)"], "type": "code"}, ", where ", {"text": ["$argc"], "type": "code"}, " is\nthe number of inputs and the remaining variables represent each of\nthe input objects."]}, {"body": [{"body": [{"indent": 5, "type": "para", "text": ["There is no variable which holds a path to your current node; however, you can retrieve the current node using the ", {"text": ["pwd"], "type": "code"}, " HScript command."]}, {"indent": 4, "type": "para", "text": ["For example, you can wire in the first selected input into your current node by doing the following:"]}, {"lang": null, "indent": 4, "type": "pre", "text": ["\n    set curNode = `run(\"pwd\")`\n    opwire -n $arg0 -1 $curNode\n    "]}], "indent": 0, "role": "item", "type": "note"}], "container": true, "role": "item_group", "type": "note_group"}], "indent": 0, "level": 2, "text": ["Selectors tab"], "container": true, "type": "h", "id": "selectors"}, {"body": [{"indent": 0, "type": "para", "text": ["In this tab, you can give the operator inputs and outputs user\nfriendly labels. The label appears when you press ", {"keys": ["MMB"], "text": null, "type": "keys"}, " on an\ninput."]}, {"indent": 0, "type": "para", "text": ["The first table describes all inputs to the VOP. The second table\ndescribes the outputs."]}, {"indent": 0, "type": "para", "text": ["To add a new input or output connection, select the data type of the\nnew connection from the New Input or New Output menu. You can edit\nthe name, label, or data type of an existing input or output by\nchanging the value directly in the table. Simply click on the value\nyou would like to change. You can also delete inputs and\noutputs using the buttons found down the left edge of each table."]}, {"indent": 0, "type": "para", "text": ["To reorder inputs, select the input header (i.e. cell in first column) to\nselect the row and then drag the row to the desired position.  You can select\nmultiple rows with ", {"keys": ["Shift", "LMB"], "text": null, "type": "keys"}, " or ", {"keys": ["Ctrl", "LMB"], "text": null, "type": "keys"}, " on the row header and move\nmultiple selected rows with a single drag.  Similarly, you can reorder signatures by selecting the column headers (i.e. cells in first row) and dragging the columns to the desired position."]}, {"indent": 0, "type": "para", "text": ["Usually it is a good idea to provide a parameter (see the Parameters\ntab) with the same name as each input. When you do this, if that\ninput does not get connected, the VEX Builder will automatically use\nthe value of the parameter with the same name in place of the input\nvalue."]}, {"indent": 0, "type": "para", "text": ["When a VOP operator appears in a VOP network, the VEX Builder will\nonly include the code generated by that operator if it determines\nthat its code is required. Generally, this is true for subnet type\nVOPs, the Output VOP, and any VOP that is connected, directly or\nindirectly, to the input of a VOP that has required code. However,\nyou can force the VEX Builder to generate the code for your VOP by\nturning on the ", {"text": ["Force Code Generation"], "type": "ui"}, " toggle."]}, {"indent": 0, "type": "para", "text": ["VOP operators are also allowed to have a variety of signatures. A\nsignature provides an alternate set of data types for each input and\noutput. By default, a new VOP operator has only one signature. To\ncreate a new signature, press the ", {"text": ["New Signature"], "type": "ui"}, " button. The new\nsignature will be created with a default name and description, and\nwith the same data types for all inputs and outputs as the previous\nsignature. The description of the signature appears in the Signature\nmenu in the VOP\u2019s parameter dialog. The signature name is used to\ndetermine which VOP parameter to use as the default value if the\ninput is not connected. To provide a default parameter to use for a\nparticular signature, create a parameter with the same name as the\ninput, followed by an underscore, then the name of the signature."]}, {"indent": 0, "type": "para", "text": ["For example, suppose you have two inputs, color and multiplier,\nwhich have the data types vector4 and float. You would create two\nparameters, also called color and multiplier. The first would be a\nColor parameter, and the second a single float parameter. Now you\nwant to allow multiplier to also be a vector4. Create a new\nsignature, and name it v4. Change the data type of multiplier for\nthat signature to vector4. The create a new parameter named\nmultiplier_v4, which is 4 floats. Now when one of these operator is\ncreated, and the signature is set to v4, the VEX Builder will use\nthe color and multiplier_v4 parameters to provide the default\nvalues."]}, {"body": [{"body": [{"indent": 4, "type": "para", "text": ["Indicates whether the VOP is implemented by a DSO or DLL file\n    instead of code generated by the VEX Builder."]}], "indent": 0, "type": "dt", "text": ["Procedural Shader"]}, {"body": [{"indent": 4, "type": "para", "text": ["Automatically generates inputs from the parameters defined on the ", {"text": ["Parameters"], "type": "ui"}, " tab. Inputs will be created with the same name and label, and the type will be guessed from the parameter type. If an input is already defined with the same name as a parameter, only the label will be updated so that manual changes to the input type will be retained after updating parameters."]}], "indent": 0, "type": "dt", "text": ["Create/Update Inputs from Parameter"]}, {"body": [{"indent": 8, "type": "para", "text": ["This column is present when editing a VOP Asset. It is the default value for whether inputs are visible or not, which is customized on a per-node basis by clicking ", {"keys": ["LMB"], "text": null, "type": "keys"}, " on the icons next to the corresponding VOP parameters."]}], "indent": 0, "type": "dt", "text": ["Visible Column"]}, {"body": [{"indent": 4, "type": "para", "text": ["Allows you to specify that certain inputs are to a digital asset are reference inputs. A reference input\u2019s geometry is used by the node but not processed, which causes wires to be drawn as a dashed line."]}], "indent": 0, "type": "dt", "text": ["Is Reference"]}], "container": true, "type": "dt_group"}], "indent": 0, "level": 2, "text": ["Input/Output tab"], "container": true, "type": "h", "id": "inout"}, {"body": [{"body": [{"body": [{"body": [{"indent": 4, "blevel": 6, "type": "ord", "text": ["Type the filename in the ", {"text": ["File name"], "type": "ui"}, " field, or click the\n      + button next to the field to choose the file."]}, {"indent": 4, "blevel": 6, "type": "ord", "text": [{"text": ["Section name"], "type": "ui"}, " is the name of the file inside the HDA.\n      It defaults to the base name of the file (that is, the\n      file name without any path information). You can edit it\n      to give the file a different name inside the HDA."]}, {"indent": 4, "blevel": 6, "type": "ord", "text": ["Click ", {"text": ["Add File"], "type": "ui"}, "."]}], "container": true, "type": "ord_group"}], "indent": 0, "role": "item", "type": "task", "text": ["Add a new file to the definition"]}, {"body": [{"body": [{"indent": 4, "blevel": 6, "type": "ord", "text": ["Select the file in the section list to show its contents\n      in the text editor on the right, along with the size and\n      time stamp of the section."]}, {"indent": 4, "blevel": 6, "type": "ord", "text": ["Edit the contents in the text editor."]}, {"indent": 4, "blevel": 6, "type": "ord", "text": ["Click ", {"text": ["Apply"], "type": "ui"}, "."]}], "container": true, "type": "ord_group"}], "indent": 0, "role": "item", "type": "task", "text": ["Edit the contents of a text file"]}, {"body": [{"body": [{"indent": 4, "blevel": 6, "type": "ord", "text": ["Select the file in the section list."]}, {"indent": 4, "blevel": 6, "type": "ord", "text": ["Click ", {"text": ["Save As File"], "type": "ui"}, " in the lower right to save the\n      contents of the section as a file on disk."]}, {"indent": 4, "blevel": 6, "type": "ord", "text": ["Edit the saved file."]}, {"indent": 4, "blevel": 6, "type": "ord", "text": ["Add the file back into the HDA with the same section name\n      to replace the old binary using ", {"text": ["Add File"], "type": "ui"}, "."]}], "container": true, "type": "ord_group"}], "indent": 0, "role": "item", "type": "task", "text": ["Edit the contents of a binary file"]}, {"body": [{"body": [{"indent": 4, "blevel": 6, "type": "bullet", "text": ["Click the X button next to the file\u2019s name in the section\n      list."]}], "container": true, "type": "bullet_group"}], "indent": 0, "role": "item", "type": "task", "text": ["Delete a file"]}], "container": true, "role": "item_group", "type": "task_group"}, {"body": [{"body": [{"indent": 4, "type": "para", "text": ["Any sections you've modified (either by changing them in the\n    editor, or because they're newly added) will have an asterisk in\n    the section list."]}], "indent": 0, "role": "item", "type": "tip"}], "container": true, "role": "item_group", "type": "tip_group"}], "indent": 0, "level": 2, "text": ["Extra Files tab (advanced)"], "container": true, "type": "h", "id": "extra_files"}, {"body": [{"indent": 4, "type": "para", "text": ["In embedded scripts you want to use as  ", {"_hs_sc": true, "fragment": "#parms", "text": ["parameter\n    callbacks"], "value": "#parms", "fullpath": "/ref/windows/optype#parms", "scheme": null, "type": "link"}, " , the name of the changed\n    parameter is available in ", {"text": ["$script_parm"], "type": "code"}, ", and the value is in\n    ", {"text": ["$script_value"], "type": "code"}, ". If the parameter has multiple components, you\n    can access them as ", {"text": ["$script_value0"], "type": "code"}, ", ", {"text": ["$script_value1"], "type": "code"}, ", and so\n    on."]}, {"indent": 4, "type": "para", "text": ["See the description of the ", {"text": ["Callback"], "type": "ui"}, " field on the operator\n    type properties window  ", {"_hs_sc": true, "fragment": "#parms", "text": ["Parameters tab"], "value": "#parms", "fullpath": "/ref/windows/optype#parms", "scheme": null, "type": "link"}, "\n    for more information."]}], "indent": 0, "level": 2, "text": ["Predefined variables in callback scripts"], "container": true, "type": "h", "id": null}, {"body": [{"indent": 4, "type": "para", "text": ["You can use a Button or Icon Strip parameter to create your own custom\n    toolbar. Start by configuring the menu items like you would for radio\n    buttons.  Set the script callback to execute ", {"text": ["handleButtonStrip(kwargs)"], "type": "code"}, "\n    based on the following python code."]}, {"indent": 4, "type": "para", "text": ["Clicking a button should trigger a message box and all radio buttons should\n    stay toggled off. Finally, tweak the python script to react differently based\n    on which button is clicked."]}], "indent": 0, "level": 2, "text": ["Button Strip and Icon Strip script callback"], "container": true, "type": "h", "id": "strip_callback"}, {"lang": "python", "indent": 0, "type": "pre", "text": ["\n# Popup a Message Box\ndef msgbox(text):\n    from PySide2 import QtCore\n    from PySide2 import QtWidgets\n    msg = QtWidgets.QMessageBox()\n    msg.setIcon(QtWidgets.QMessageBox.Information)\n    msg.setText(text)\n    msg.exec_()\n\n# Convert bit field to array of boolean\ndef extractBits(parm):\n    parm_value = parm.evalAsInt() # Get it as an integer.\n\n    # Access the Menu Items tokens\n    menu_items = parm.parmTemplate().menuItems()\n\n    # Now we can extract individual bits from the bitfield and store that in an array.\n    button_states = extractBits(parm_value, menu_items)\n    button_states = [0] * len(menu_items)\n    for i in range(len(menu_items)):\n        flag_value = 1 << i;\n        if parm_value & flag_value:\n            button_states[i] = 1\n\n    return button_states\n\ndef handleButtonStrip(kwargs):\n    parm = kwargs['parm'] # Extract the current parm from the args dict\n    menu_items = parm.parmTemplate().menuItems() # Access the Menu Items tokens\n\n    # Reset the button strip value to 0 to toggle off the button that was pressed.        \n    # This turns a Multi Select Button Strip into a list of buttons with\n    # callbacks\n    parm.set(0)\n\n    # Extract individual bits from the bitfield and stores that in an array.\n    button_states = extractBits(parm)\n\n    # Get the first token that is turned on\n    active_token = \"\"\n    active_index = -1\n    for i in button_states:\n        if i:\n            active_token = menu_items[i]\n            active_index = i\n            break\n\n    # ... or index.\n    if active_index == 0:\n        msgbox(\"You clicked the Add button.\")\n    elif active_index == 1:\n        msgbox(\"You clicked the Remove button.\")\n    elif active_index == 2:\n        msgbox(\"You clicked the Edit button.\")\n    elif active_index == 3:\n        msgbox(\"You clicked the Clear button.\")\n    elif active_index == 4:\n        msgbox(\"You clicked the Move Up button.\")\n    elif active_index == 5:\n        msgbox(\"You clicked the Move Down button.\")\n"]}, {"body": [{"indent": 4, "type": "para", "text": ["Once you have embedded files into the operator type definition,\n    you can access these embedded files from many places within\n    Houdini. Geometry or channel files can be accessed from File\n    SOPs or File CHOPs. Image files can be used as texture map files\n    specified in VEX SHOPs. Script files can be accessed from the\n    textport or parameter callbacks using the source command."]}, {"indent": 4, "type": "para", "text": ["To access one of these embedded files, wherever a file name is\n    called for, use the following:"]}, {"indent": 4, "type": "para", "text": [{"text": ["opdef:/", {"text": ["Network_type"], "type": "var"}, "/", {"text": ["asset_name"], "type": "var"}, "?", {"text": ["section"], "type": "var"}], "type": "code"}]}, {"indent": 4, "type": "para", "text": ["For example:"]}, {"indent": 4, "type": "para", "text": [{"text": ["opdef:/Shop/v_clay?DialogScript"], "type": "code"}]}, {"indent": 4, "type": "para", "text": ["To refer to the current operator, use"]}, {"indent": 4, "type": "para", "text": [{"text": ["opdef:.?", {"text": ["section"], "type": "var"}], "type": "code"}]}, {"indent": 4, "type": "para", "text": ["The ", {"text": ["opdef"], "type": "code"}, " syntax always accesses the currently used definition\n    for an operator."]}, {"indent": 4, "type": "para", "text": ["You can also access an embedded file from another asset in the same\n    library (.hda file).  To do so use:"]}, {"indent": 4, "type": "para", "text": [{"text": ["oplib:/", {"text": ["Network_type"], "type": "var"}, "/", {"text": ["asset_name"], "type": "var"}, "?", {"text": ["Network_type2"], "type": "var"}, "/", {"text": ["asset_name2"], "type": "var"}, "?", {"text": ["section"], "type": "var"}], "type": "code"}]}, {"indent": 4, "type": "para", "text": ["The second operator type should exist in the same library that provides\n    the active definition for the first operator type."]}], "indent": 0, "level": 2, "text": ["Accessing embedded files"], "container": true, "type": "h", "id": "access_contents"}], "type": "root", "attrs": {"bestbet": "disable", "helpid": "h.opmenu.typeprop"}, "title": ["Operator Type Properties window"]}